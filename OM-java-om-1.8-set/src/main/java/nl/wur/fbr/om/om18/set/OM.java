package nl.wur.fbr.om.om18.set;

import nl.wur.fbr.om.model.scales.Scale;

import nl.wur.fbr.om.factory.UnitAndScaleFactory;
import nl.wur.fbr.om.model.units.*;
import nl.wur.fbr.om.core.impl.scales.ScaleImpl;
import nl.wur.fbr.om.core.impl.units.*;
import nl.wur.fbr.om.model.UnitAndScaleSet;
import nl.wur.fbr.om.model.dimensions.SIBaseDimension;
import nl.wur.fbr.om.model.scales.Scale;
import nl.wur.fbr.om.model.units.SingularUnit;
import nl.wur.fbr.om.model.units.Unit;
import nl.wur.fbr.om.model.UnitAndScaleSet;
import nl.wur.fbr.om.model.points.ScalarPoint;
import nl.wur.fbr.om.model.points.ScalarRangePoint;
import nl.wur.fbr.om.core.impl.points.ScalarPointImpl;
import nl.wur.fbr.om.core.impl.points.ScalarRangePointImpl;
import java.util.Set;
import java.util.HashSet;
import nl.wur.fbr.om.prefixes.*;

/**
 * This class contains all identifiers for units and scales defined in the OM ontology.
 * The identifiers are all defined as <code>final static String</code> and contain the
 * URIs of the concepts as strings.
 * <br>NB. This code has been automatically generated.
 * @author OM Vocabulary Creation tool at Mon Aug 10 15:06:20 CEST 2015.
 */
public class OM extends UnitAndScaleSet {

	public static Unit Decasievert;

	/** The statvolt is a unit of electric potential defined as 2.997925e2 volt. */
	public static Unit Statvolt;

	/** Megametre per second is a unit of speed defined as megametre divided by second. */
	public static Unit MegametrePerSecondTime;

	/** The attohertz is a unit of frequency defined as 1.0e-18 hertz. */
	public static Unit Attohertz;

	/** The petagray is a unit of absorbed dose defined as 1.0e15 gray. */
	public static Unit Petagray;

	/** The terametre is a unit of length defined as 1.0e12 metre. */
	public static Unit Terametre;

	/** Metre per yottasecond is a unit of speed defined as metre divided by yottasecond. */
	public static Unit MetrePerYottasecondTime;

	public static Unit Yoctosievert;

	public static Unit Gigasiemens;

	public static Unit DecasecondTimeSquared;

	/** Metre per microsecond squared is a unit of acceleration defined as metre divided by microsecond squared. */
	public static Unit MetrePerMicrosecondTimeSquared;

	public static Unit Jansky;

	public static Unit Zebibit;

	/** The apothecaries' ounce is a unit of mass defined as 3.110348e-2 kilogram. */
	public static Unit OunceApothecaries;

	/** The oersted is a unit of magnetic field defined as 7.957747e1 ampere per metre. */
	public static Unit Oersted;

	/** The yoctohenry is a unit of inductance defined as 1.0e-24 henry. */
	public static Unit Yoctohenry;

	public static Unit Gigaweber;

	/** Zettagram per litre is a unit of density defined as zettagram divided by litre. */
	public static Unit ZettagramPerLitre;

	/** The microhertz is a unit of frequency defined as 1.0e-6 hertz. */
	public static Unit Microhertz;

	/** The yottajoule is a unit of energy defined as 1.0e24 joule. */
	public static Unit Yottajoule;

	/** Metre per megasecond squared is a unit of acceleration defined as metre divided by megasecond squared. */
	public static Unit MetrePerMegasecondTimeSquared;

	/** The gigakatal is a unit of catalytic activity defined as 1.0e9 katal. */
	public static Unit Gigakatal;

	/** The decakelvin is a unit of thermodynamic temperature defined as 1.0e1 kelvin. */
	public static Unit Decakelvin;

	public static Unit Megasiemens;

	/** The petaampere is a unit of electric current defined as 1.0e15 ampere. */
	public static Unit Petaampere;

	/** Gram per yoctolitre is a unit of density defined as gram divided by yoctolitre. */
	public static Unit GramPerYoctolitre;

	/** The picokatal is a unit of catalytic activity defined as 1.0e-12 katal. */
	public static Unit Picokatal;

	public static Unit Kilolux;

	/** The ampere is a unit of electric current defined as the constant current that produces an attractive force of 2eâ€“7 newton per metre of length between two straight, parallel conductors of infinite length and negligible circular cross section placed one metre apart in a vacuum. */
	public static Unit Ampere;

	/** Metre per hectosecond squared is a unit of acceleration defined as metre divided by hectosecond squared. */
	public static Unit MetrePerHectosecondTimeSquared;

	public static Unit Picoweber;

	public static Unit Decisievert;

	public static Unit CandelaSteradian;

	public static Unit SquareMicrometre;

	/** The hectobecquerel is a unit of activity defined as 1.0e2 becquerel. */
	public static Unit Hectobecquerel;

	/** The petagram is a unit of mass defined as 1.0e15 gram. */
	public static Unit Petagram;

	public static Unit CubicMegametre;

	public static Unit DecisecondTime;

	/** The tesla is a unit of magnetic flux density defined as volt times second divided by square metre = newton divided by ampere times metre = weber divided by square metre = kilogram divided by coulomb times second = kilogram divided by ampere times second squared. */
	public static Unit Tesla;

	/** The avoirdupois pound is a unit of mass defined as 4.535924e-1 kilogram. */
	public static Unit PoundAvoirdupois;

	public static Unit FemtomolePerMetre;

	public static Unit Kilolitre;

	/** The yottametre is a unit of length defined as 1.0e24 metre. */
	public static Unit Yottametre;

	public static Unit Exasievert;

	/** The petamolair is a unit of amount of substance concentration defined as 1.0e15 molair. */
	public static Unit Petamolair;

	/** The millimetre of mercury is a unit of pressure defined as 1.0e-3 metre of mercury. */
	public static Unit MillimetreOfMercury;

	/** Gram per nanolitre is a unit of density defined as gram divided by nanolitre. */
	public static Unit GramPerNanolitre;

	/** The inch is a unit of length defined as 2.54e-2 metre. */
	public static Unit Inch;

	public static Unit Megabit;

	public static Unit PicosecondTime;

	public static Unit SquareMetrePerSquareMetreDay;

	public static Unit Nanopascal;

	public static Unit TonnePerHectare;

	public static Unit Megasievert;

	public static Unit Hectolitre;

	/** Hectometre per second squared is a unit of acceleration defined as hectometre divided by second squared. */
	public static Unit HectometrePerSecondTimeSquared;

	/** The International Table British thermal unit is a unit of energy defined as 1.055056e3 joule. */
	public static Unit BritishThermalUnitInternationalTable;

	public static Unit DegreeCelsiusPerHour;

	/** Gram per cubic centimetre is a unit of density defined as gram divided by cubic centimetre. */
	public static Unit GramPerCubicCentimetre;

	public static Unit Exatesla;

	/** The centikelvin is a unit of temperature defined as 1.0e-2 kelvin. */
	public static Unit Centikelvin;

	/** The exakelvin is a unit of thermodynamic temperature defined as 1.0e18 kelvin. */
	public static Unit Exakelvin;

	public static Unit Gigasievert;

	public static Unit MillimolePerMetre;

	/** The gon is a unit of plane angle defined as 1.570796e-2 radian. */
	public static Unit Gon;

	public static Unit MolePerMicrometre;

	public static Unit Zettapascal;

	public static Unit Millivolt;

	public static Unit Petamole;

	public static Unit Exasiemens;

	/** The centihenry is a unit of inductance defined as 1.0e-2 henry. */
	public static Unit Centihenry;

	/** The megafarad is a unit of capacitance defined as 1.0e6 farad. */
	public static Unit Megafarad;

	/** The rem is a unit of dose equivalent defined as 1.0e-2 sievert. */
	public static Unit Rem;

	public static Unit ReciprocalHenry;

	/** The femtocandela is a unit of luminous intensity defined as 1.0e-15 candela. */
	public static Unit Femtocandela;

	public static Unit Teratesla;

	public static Unit Zeptolitre;

	/** The decahertz is a unit of frequency defined as 1.0e1 hertz. */
	public static Unit Decahertz;

	public static Unit SquareMetrePerSquareMetre;

	/** The metre is a unit of length defined as the length of the path travelled by light in vacuum during a time interval of 1/299 792 458 of a second. */
	public static Unit Metre;

	public static Unit SquareExametre;

	/** The zeptcandela is a unit of luminous intensity defined as 1.0e-21 candela. */
	public static Unit Zeptocandela;

	/** The cicular mil is a unit of area defined as 5.067075e-10 square metre. */
	public static Unit CircularMil;

	/** Mole per exalitre is a unit of amount of substance concentration defined as mole divided by exalitre. */
	public static Unit MolePerExalitre;

	/** The atronomical unit is a unit of length defined as 149 597 870 700 metre (IAU 2012 Resolution). */
	public static Unit AstronomicalUnit;

	public static Unit KelvinKilogram;

	public static Scale RankineScale;

	public static Unit Exavolt;

	public static Unit MillisecondTime;

	public static Unit MegasecondTimeSquared;

	public static Unit Millimole;

	public static Unit Zettasiemens;

	public static Unit Millisteradian;

	/** The decihenry is a unit of inductance defined as 1.0e-1 henry. */
	public static Unit Decihenry;

	public static Unit Nanoweber;

	/** The biot is a unit of electric current defined as 10 ampere. */
	public static Unit Biot;

	/** Parts per million is a unit of dimension one defined as 1/1 000 000. */
	public static Unit PartsPerMillion;

	/** The abampere is a unit of electric current defined as 10 ampere. */
	public static Unit Abampere;

	public static Unit Zettasievert;

	public static Unit Yottatesla;

	/** The terajoule is a unit of energy defined as 1.0e12 joule. */
	public static Unit Terajoule;

	public static Unit Milliwatt;

	public static Unit ReciprocalDegreeCelsiusDay;

	public static Unit JapaneseYen;

	public static Unit Gigayear;

	/** The US dry gallon is a unit of volume defined as 4.40488377086e-3 cubic metre. */
	public static Unit DryGallonUS;

	/** The foot is a unit of foot defined as 3.048e-1 metre. */
	public static Unit Foot;

	public static Unit Exbibyte;

	/** The nanocoulomb is a unit of electric charge defined as 1.0e-9 coulomb. */
	public static Unit Nanocoulomb;

	/** The exametre is a unit of length defined as 1.0e18 metre. */
	public static Unit Exametre;

	public static Unit ReciprocalYear;

	/** The statfarad is a unit of capacitance defined as 1.112650e-12 farad. */
	public static Unit Statfarad;

	public static Unit SecondTimeSquared;

	/** Femtometre per second is a unit of speed defined as femtometre divided by second. */
	public static Unit FemtometrePerSecondTime;

	public static Unit Femtopascal;

	public static Unit CentimolePerMetre;

	public static Unit Deciradian;

	/** Gram per picolitre is a unit of density defined as gram divided by picolitre. */
	public static Unit GramPerPicolitre;

	public static Unit Megawatt;

	public static Unit MicromolePerMole;

	public static Unit ErgSecondTime;

	/** Mole per millilitre is a unit of amount of substance concentration defined as mole divided by millilitre. */
	public static Unit MolePerMillilitre;

	public static Unit SecondTimeToThePower2;

	public static Unit NanosecondTimeSquared;

	public static Unit ZeptosecondTime;

	/** The attohenry is a unit of inductance defined as 1.0e-18 henry. */
	public static Unit Attohenry;

	/** The milligray is a unit of absorbed dose defined as 1.0e-3 gray. */
	public static Unit Milligray;

	public static Unit CubicMillimetre;

	/** The hectomolair is a unit of amount of substance concentration defined as 1.0e2 molair. */
	public static Unit Hectomolair;

	/** The yottakelvin is a unit of thermodynamic temperature defined as 1.0e24 kelvin. */
	public static Unit Yottakelvin;

	/** The rhe is a unit of fluidity defined as 10 reciprocal pascal second (time). */
	public static Unit Rhe;

	public static Unit NanosecondTime;

	public static Unit JoulePerSquareMetre;

	/** Metre per petasecond squared is a unit of acceleration defined as metre divided by petasecond squared. */
	public static Unit MetrePerPetasecondTimeSquared;

	/** The milligram is a unit of mass defined as 1.0e-3 gram. */
	public static Unit Milligram;

	public static Unit MolePerKilometre;

	public static Unit Kilolumen;

	public static Unit Yoctosiemens;

	public static Unit Zeptolumen;

	/** The terafarad is a unit of capacitance defined as 1.0e12 farad. */
	public static Unit Terafarad;

	public static Unit Exabit;

	/** Metre per megasecond is a unit of speed defined as metre divided by megasecond. */
	public static Unit MetrePerMegasecondTime;

	/** The stattesla is a unit of magnetic flux density defined as 2.9979e6 tesla. */
	public static Unit Stattesla;

	public static Unit Zeptoradian;

	/** The yoctohertz is a unit of frequency defined as 1.0e-24 hertz. */
	public static Unit Yoctohertz;

	/** The yoctodegree Celsius is a unit of temperature defined as 1.0e-24 degree Celsius. */
	public static Unit YoctodegreeCelsius;

	/** Teragram per litre is a unit of density defined as teragram divided by litre. */
	public static Unit TeragramPerLitre;

	public static Unit MolePerMegametre;

	/** The microhenry is a unit of inductance defined as 1.0e-6 henry. */
	public static Unit Microhenry;

	/** The yottaampere is a unit of electric current defined as 1.0e24 ampere. */
	public static Unit Yottaampere;

	/** Zettamole per litre is a unit of amount of substance concentration defined as zettamole divided by litre. */
	public static Unit ZettamolePerLitre;

	public static Unit ReciprocalPascalSecondTime;

	/** The zettabecquerel is a unit of activity defined as 1.0e21 becquerel. */
	public static Unit Zettabecquerel;

	/** Decametre per second is a unit of speed defined as decametre divided by second. */
	public static Unit DecametrePerSecondTime;

	/** Mole per decalitre is a unit of amount of substance concentration defined as mole divided by decalitre. */
	public static Unit MolePerDecalitre;

	/** The microcoulomb is a unit of electric charge defined as 1.0e-6 coulomb. */
	public static Unit Microcoulomb;

	public static Unit KilocolonyFormingUnitPerMillilitre;

	public static Unit Megamole;

	public static Unit Petavolt;

	public static Unit WattPerNanometre;

	public static Unit Yoctoradian;

	public static Unit Decalumen;

	/** The US liquid quart is a unit of volume defined as 9.463529e-4 cubic metre. */
	public static Unit LiquidQuartUS;

	/** De eenheid van de Hubble constante (die niet constant is!) (http://en.wikipedia.org/wiki/Hubble_constant). */
	public static Unit KilometrePerSecondTimePerMegaparsec;

	public static Unit MegaeuroPerMegawatt;

	public static Unit CubicKilometre;

	/** The centikatal is a unit of catalytic activity defined as 1.0e-2 katal. */
	public static Unit Centikatal;

	/** The petacoulomb is a unit of electric charge defined as 1.0e15 coulomb. */
	public static Unit Petacoulomb;

	public static Unit Hectovolt;

	public static Unit Kilovolt;

	public static Unit Terasiemens;

	/** Gram per petalitre is a unit of density defined as gram divided by petalitre. */
	public static Unit GramPerPetalitre;

	/** The amount of stellar mass created per cubic parsec in each billion years. */
	public static Unit SolarMassPerGigayearCubicParsec;

	/** The exagray is a unit of absorbed dose defined as 1.0e18 gray. */
	public static Unit Exagray;

	/** The brightness (in magnitudes) of an area on the celestial sphere of 1 arcsecond by 1 arcsecond. */
	public static Unit MagnitudePerSecondPlaneAngleSquared;

	/** Mole per centilitre is a unit of amount of substance concentration defined as mole divided by centilitre. */
	public static Unit MolePerCentilitre;

	public static Unit Megalitre;

	public static Unit Attolumen;

	/** Metre per kilosecond is a unit of speed defined as metre divided by kilosecond. */
	public static Unit MetrePerKilosecondTime;

	/** The kelvin is a unit of temperature defined as 1/273.16 of the thermodynamic temperature of the triple point of water. */
	public static Unit Kelvin;

	public static Unit Zettalux;

	/** The exagram is a unit of mass defined as 1.0e18 gram. */
	public static Unit Exagram;

	/** The EC therm is a unit of energy defined as 1.05506e8 joule. */
	public static Unit ThermEC;

	/** Mole per cubic metre is a unit of amount of substance concentration defined as mole divided by cubic metre. */
	public static Unit MolePerCubicMetre;

	/** Hectogram per litre is a unit of density defined as hectogram divided by litre. */
	public static Unit HectogramPerLitre;

	/** The kilofarad is a unit of capacitance defined as 1.0e3 farad. */
	public static Unit Kilofarad;

	/** The US fluid ounce is a unit of volume defined as 2.957353e-5 cubic metre. */
	public static Unit FluidOunceUS;

	/** The megamolair is a unit of amount of substance concentration defined as 1.0e6 molair. */
	public static Unit Megamolair;

	public static Unit Decawatt;

	public static Unit Kilobit;

	public static Unit ExamolePerMetre;

	public static Unit Terasievert;

	public static Unit SquareMetreKelvin;

	public static Unit Petaweber;

	public static Unit CubicCentimetrePerCubicCentimetre;

	public static Unit Zettawatt;

	public static Unit GramPerGram;

	/** Decametre per second squared is a unit of acceleration defined as decametre divided by second squared. */
	public static Unit DecametrePerSecondTimeSquared;

	/** The erg is a unit of energy defined as 1.0e-7 joule. */
	public static Unit Erg;

	/** The femtojoule is a unit of energy defined as 1.0e-15 joule. */
	public static Unit Femtojoule;

	public static Unit Hectolux;

	public static Unit MolePerSecondTime;

	/** Metre per petasecond is a unit of speed defined as metre divided by petasecond. */
	public static Unit MetrePerPetasecondTime;

	public static Unit Hectopascal;

	public static Unit PetasecondTime;

	/** Candela per square metre is a unit of luminance defined as candela divided by square metre. */
	public static Unit CandelaPerSquareMetre;

	/** Yoctometre per second is a unit of speed defined as yoctometre divided by second. */
	public static Unit YoctometrePerSecondTime;

	public static Unit Milliradian;

	public static Unit ExasecondTime;

	/** The radiative intensity (in watts) of an area on the celestial sphere of 1 arcsecond by 1 arcsecond. */
	public static Unit WattPerSecondPlaneAngleSquared;

	public static Unit Megalux;

	/** Terametre per second is a unit of speed defined as terametre divided by second. */
	public static Unit TerametrePerSecondTime;

	/** The farad is a unit of capacitance defined as ampere times second divided by volt = coulomb divided by volt = coulomb squared divided by joule = coulomb squared divided by newton times metre = second squared times coulomb squared divided by square metre times kilogram = second to the power 4 times ampere squared divided by square metre times kilogram. */
	public static Unit Farad;

	public static Unit GramPerSquareMetreSecondTime;

	/** The unified atomic mass unit is a unit of mass defined as 1.660538782(83)e-27 kilogram. */
	public static Unit UnifiedAtomicMassUnit;

	/** Yoctogram per litre is a unit of density defined as yoctogram divided by litre. */
	public static Unit YoctogramPerLitre;

	public static Unit DecasecondTime;

	/** The decamolair is a unit of amount of substance concentration defined as 1.0e1 molair. */
	public static Unit Decamolair;

	public static Unit MegaeuroPerMegatonne;

	/** The candela is a unit of luminous intensity defined as the luminous intensity, in a given direction, of a source that emits monochromatic radiation of frequency 540e12 hertz and that has a radiant intensity in that direction of 1/683 watt per steradian. */
	public static Unit Candela;

	public static Unit HectomolePerMetre;

	public static Unit Zettaweber;

	public static Unit JoulePerSquareMetreDay;

	/** Metre per decasecond squared is a unit of acceleration defined as metre divided by decasecond squared. */
	public static Unit MetrePerDecasecondTimeSquared;

	/** The poise is a unit of dynamic viscosity defined as 1.0e-1 pascal second (time). */
	public static Unit Poise;

	public static Unit MicrogramPerSquareMetreSecondTime;

	/** The nanohertz is a unit of frequency defined as 1.0e-9 hertz. */
	public static Unit Nanohertz;

	public static Unit PascalSecondTime;

	/** The hectoampere is a unit of electric current defined as 1.0e2 ampere. */
	public static Unit Hectoampere;

	/** The acre foot is a unit of volume defined as 1.233489e3 cubic metre. */
	public static Unit AcreFoot;

	/** The joule is a unit of energy defined as kilogram times square metre divided by second squared. */
	public static Unit Joule;

	/** The thermochemical calorie is a unit of energy defined as 4.184 joule. */
	public static Unit CalorieThermochemical;

	public static Unit MetreKilogramPerSecondTime;

	/** The kilocoulomb is a unit of electric charge defined as 1.0e3 coulomb. */
	public static Unit Kilocoulomb;

	/** The hectofarad is a unit of capacitance defined as 1.0e2 farad. */
	public static Unit Hectofarad;

	/** The millikatal is a unit of catalytic activity defined as 1.0e-3 katal. */
	public static Unit Millikatal;

	/** Decimetre per second squared is a unit of acceleration defined as decimetre divided by second squared. */
	public static Unit DecimetrePerSecondTimeSquared;

	public static Unit CentisecondTimeSquared;

	public static Unit IndianRupee;

	public static Unit BitPerSecondTime;

	public static Unit Exaohm;

	/** The maxwell is a unit of magnetic flux defined as 1.0e-8 weber. */
	public static Unit Maxwell;

	/** The hectojoule is a unit of energy defined as 1.0e2 joule. */
	public static Unit Hectojoule;

	public static Unit Picosievert;

	public static Unit SecondTimePerSquareMetre;

	public static Unit Millitesla;

	/** The yottafarad is a unit of capacitance defined as 1.0e24 farad. */
	public static Unit Yottafarad;

	/** Metre per zeptosecond squared is a unit of acceleration defined as metre divided by zeptosecond squared. */
	public static Unit MetrePerZeptosecondTimeSquared;

	/** The abmho is a unit of electrical conductance defined as 1.0e9 siemens. */
	public static Unit Abmho;

	/** Centimetre per second squared is a unit of acceleration defined as centimetre divided by second squared. */
	public static Unit CentimetrePerSecondTimeSquared;

	/** The kilojoule is a unit of energy defined as 1.0e3 joule. */
	public static Unit Kilojoule;

	/** Mole per decilitre is a unit of amount of substance concentration defined as mole divided by decilitre. */
	public static Unit MolePerDecilitre;

	public static Unit WattPerMetreKelvin;

	/** The centiampere is a unit of electric current defined as 1.0e-2 ampere. */
	public static Unit Centiampere;

	/** The hectogray is a unit of absorbed dose defined as 1.0e2 gray. */
	public static Unit Hectogray;

	/** Picometre per second squared is a unit of acceleration defined as picometre divided by second squared. */
	public static Unit PicometrePerSecondTimeSquared;

	public static Unit Hectomole;

	public static Unit Kilomole;

	/** The milligauss is a unit of magnetic flux density defined as 1.0e-3 gauss. */
	public static Unit Milligauss;

	/** The petakatal is a unit of catalytic activity defined as 1.0e15 katal. */
	public static Unit Petakatal;

	/** The rod is a unit of length defined as 5.029210 metre. */
	public static Unit Rod;

	/** The femtometre is a unit of length defined as 1.0e-15 metre. */
	public static Unit Femtometre;

	/** The nanohenry is a unit of inductance defined as 1.0e-9 henry. */
	public static Unit Nanohenry;

	/** The picodegree Celsius is a unit of temperature defined as 1.0e-12 degree Celsius. */
	public static Unit PicodegreeCelsius;

	public static Unit PetasecondTimeSquared;

	/** The zettagray is a unit of absorbed dose defined as 1.0e21 gray. */
	public static Unit Zettagray;

	/** The stokes is a unit of kinematic viscosity defined as 1.0e-4 square metre per second (time). */
	public static Unit Stokes;

	/** The yoctokelvin is a unit of temperature defined as 1.0e-24 kelvin. */
	public static Unit Yoctokelvin;

	public static Unit MolePerYoctometre;

	/** The petabecquerel is a unit of activity defined as 1.0e15 becquerel. */
	public static Unit Petabecquerel;

	public static Unit Petawatt;

	public static Unit Decinewton;

	public static Unit Attolux;

	/** The picomolair is a unit of amount of substance concentration defined as 1.0e-12 molair. */
	public static Unit Picomolair;

	public static Unit FemtosecondTime;

	/** The zettagram is a unit of mass defined as 1.0e21 gram. */
	public static Unit Zettagram;

	/** The zettamolair is a unit of amount of substance concentration defined as 1.0e21 molair. */
	public static Unit Zettamolair;

	/** The pennyweight is a unit of mass defined as 1.555174e-3 kilogram. */
	public static Unit Pennyweight;

	/** The teraampere is a unit of electric current defined as 1.0e12 ampere. */
	public static Unit Teraampere;

	public static Unit Centilux;

	/** The decahenry is a unit of inductance defined as 1.0e1 henry. */
	public static Unit Decahenry;

	/** The gigamolair is a unit of amount of substance concentration defined as 1.0e9 molair. */
	public static Unit Gigamolair;

	/** The millimagnitude is a unit of magnitude defined as 1.0e-3 magnitude. */
	public static Unit Millimagnitude;

	public static Unit Picosiemens;

	public static Unit MexicanPeso;

	/** The femtofarad is a unit of capacitance defined as 1.0e-15 farad. */
	public static Unit Femtofarad;

	public static Unit Kilowatt;

	public static Unit VoltPerMetre;

	public static Unit Decasiemens;

	/** Solar mass is a unit used in astronomy to denote stellar or galactic masses (http://en.wikipedia.org/wiki/Solar_mass). */
	public static Unit SolarMass;

	public static Unit Decalux;

	public static Unit Megatonne;

	public static Unit SwedishKrona;

	public static Unit Examole;

	/** The phot is a unit of illuminance defined as 1.0e4 lux. */
	public static Unit Phot;

	/** Metre per nanosecond squared is a unit of acceleration defined as metre divided by nanosecond squared. */
	public static Unit MetrePerNanosecondTimeSquared;

	public static Unit Exawatt;

	/** Kilogram per gigajoule is a unit of energy consumption. */
	public static Unit KilogramPerGigajoule;

	/** Gram per gigalitre is a unit of density defined as gram divided by gigalitre. */
	public static Unit GramPerGigalitre;

	/** Terametre per second squared is a unit of acceleration defined as terametre divided by second squared. */
	public static Unit TerametrePerSecondTimeSquared;

	public static Unit Zeptonewton;

	/** The petakelvin is a unit of thermodynamic temperature defined as 1.0e15 kelvin. */
	public static Unit Petakelvin;

	/** The zeptdegree Celsius is a unit of temperature defined as 1.0e-21 degree Celsius. */
	public static Unit ZeptodegreeCelsius;

	public static Unit Femtosievert;

	public static Unit CubicYoctometre;

	/** The hectogram is a unit of mass defined as 1.0e2 gram. */
	public static Unit Hectogram;

	public static Unit Zettamole;

	public static Unit KelvinMole;

	public static Unit TeramolePerMetre;

	public static Unit MicromolePerSecondTimeGram;

	/** Nanometre per second is a unit of speed defined as nanometre divided by second. */
	public static Unit NanometrePerSecondTime;

	public static Unit Zebibyte;

	/** The kilocalorie (mean) is a unit of energy defined as 1.0e3 calorie (mean). */
	public static Unit KilocalorieMean;

	/** The barye is a unit of pressure defined as 0.1 pascal. */
	public static Unit Barye;

	/** The millidegree Celsius is a unit of temperature defined as 1.0e-3 degree Celsius. */
	public static Unit MillidegreeCelsius;

	public static Unit Yoctonewton;

	public static Unit MicronewtonMetre;

	/** Exametre per second is a unit of speed defined as exametre divided by second. */
	public static Unit ExametrePerSecondTime;

	/** Zeptometre per second is a unit of speed defined as zeptometre divided by second. */
	public static Unit ZeptometrePerSecondTime;

	public static Unit DegreeCelsiusPerSecondTime;

	public static Scale ReaumurScale;

	/** The faraday is a unit of electric charge defined as 9.648531e4 coulomb. */
	public static Unit Faraday;

	/** The terakelvin is a unit of thermodynamic temperature defined as 1.0e12 kelvin. */
	public static Unit Terakelvin;

	public static Unit MetrePerMetre;

	/** The franklin is a unit of electric charge defined as 3.335641e-10 coulomb. */
	public static Unit Franklin;

	public static Unit MolePerFemtometre;

	public static Unit GramPerSquareMetreMetre;

	public static Unit GigasecondTimeSquared;

	/** The femtohertz is a unit of frequency defined as 1.0e-15 hertz. */
	public static Unit Femtohertz;

	public static Unit CubicMicrometre;

	public static Unit ReciprocalCubicCentimetre;

	public static Unit HongKongDollar;

	public static Unit Exaweber;

	public static Unit Femtotesla;

	public static Unit Centilumen;

	public static Unit Tebibit;

	/** The zeptometre is a unit of length defined as 1.0e-21 metre. */
	public static Unit Zeptometre;

	public static Unit AttomolePerMetre;

	public static Unit Zettavolt;

	/** The abohm is a unit of electrical resistance defined as 1.0e-9 ohm. */
	public static Unit Abohm;

	/** The decigram is a unit of mass defined as 1.0e-1 gram. */
	public static Unit Decigram;

	public static Unit MolePerMole;

	public static Unit Zeptosievert;

	/** The femtocoulomb is a unit of electric charge defined as 1.0e-15 coulomb. */
	public static Unit Femtocoulomb;

	public static Unit Zettabit;

	/** The gigahertz is a unit of frequency defined as 1.0e9 hertz. */
	public static Unit Gigahertz;

	public static Unit MegajoulePerSquareMetreDay;

	/** Gram per exalitre is a unit of density defined as gram divided by exalitre. */
	public static Unit GramPerExalitre;

	/** Zeptometre per second squared is a unit of acceleration defined as zeptometre divided by second squared. */
	public static Unit ZeptometrePerSecondTimeSquared;

	/** The cup is a unit of volume defined as 2.365882e-4 cubic metre. */
	public static Unit Cup;

	public static Unit SquarePicometre;

	/** The US survey mile is a unit of length defined as 1.609347e3 metre. */
	public static Unit MileUSSurvey;

	/** The shake is a unit of time defined as 1.0e-8 second. */
	public static Unit Shake;

	public static Unit Teranewton;

	/** The hour is a unit of time defined as 3600 second. */
	public static Unit Hour;

	/** The decigray is a unit of absorbed dose defined as 1.0e-1 gray. */
	public static Unit Decigray;

	public static Unit CubicMetrePerMole;

	/** Nanogram per litre is a unit of density defined as nanogram divided by litre. */
	public static Unit NanogramPerLitre;

	/** Wordt gebruikt als hoek (360Â°=24) voor o.a. rechte klimming. De h wordt meestal als superscript achter de waarde gezet gevolgd door de verdere opdeling naar minuten en seconden. Zoals in 5h34m12s09. Vaak wordt de fractie in seconden zonder punt geschreven, de s wordt als afscheiding gebruikt (http://en.wikipedia.org/wiki/Right_ascension). */
	public static Unit HourHourAngle;

	/** The millibecquerel is a unit of activity defined as 1.0e-3 becquerel. */
	public static Unit Millibecquerel;

	public static Unit Picotesla;

	/** Metre per hectosecond is a unit of speed defined as metre divided by hectosecond. */
	public static Unit MetrePerHectosecondTime;

	public static Unit Microweber;

	/** The are is a unit of area defined as 100 square metre. */
	public static Unit Are;

	public static Unit MetreToThePower2ReciprocalMetre;

	public static Unit MoleMicrometreReciprocalSquareCentimetre;

	public static Unit Yottamole;

	public static Unit Zeptosiemens;

	public static Unit Attoradian;

	public static Unit Decisteradian;

	public static Unit Pebibyte;

	public static Unit MolePerHectometre;

	public static Unit Megabyte;

	/** Wordt gebruikt om de waargenomen verandering van de positie van sterren uit te drukken (de proper motion). */
	public static Unit MillisecondPlaneAnglePerYear;

	/** The decafarad is a unit of capacitance defined as 1.0e1 farad. */
	public static Unit Decafarad;

	/** Gram per zeptolitre is a unit of density defined as gram divided by zeptolitre. */
	public static Unit GramPerZeptolitre;

	public static Unit UnitedStatesDollar;

	public static Unit Tebibyte;

	/** The picokelvin is a unit of temperature defined as 1.0e-12 kelvin. */
	public static Unit Picokelvin;

	/** The petametre is a unit of length defined as 1.0e15 metre. */
	public static Unit Petametre;

	public static Unit CoulombPerVolt;

	public static Unit Hectowatt;

	public static Unit WattPerCubicMetre;

	/** Megametre per second squared is a unit of acceleration defined as megametre divided by second squared. */
	public static Unit MegametrePerSecondTimeSquared;

	/** Mole per gigalitre is a unit of amount of substance concentration defined as mole divided by gigalitre. */
	public static Unit MolePerGigalitre;

	public static Unit WattPerAmpere;

	public static Unit Kibibyte;

	/** The microkatal is a unit of catalytic activity defined as 1.0e-6 katal. */
	public static Unit Microkatal;

	/** The petajoule is a unit of energy defined as 1.0e15 joule. */
	public static Unit Petajoule;

	public static Unit HenryPerMetre;

	public static Unit Picosteradian;

	/** Millimole per litre is a unit of amount of substance concentration defined as millimole divided by litre. */
	public static Unit MillimolePerLitre;

	/** The hectometre is a unit of length defined as 1.0e2 metre. */
	public static Unit Hectometre;

	/** The ATA pica is a unit of length defined as 12 point (ATA). */
	public static Unit PicaATA;

	public static Unit JoulePerKelvinMole;

	/** The decikatal is a unit of catalytic activity defined as 1.0e-1 katal. */
	public static Unit Decikatal;

	public static Unit Megapascal;

	/** The millimolair is a unit of amount of substance concentration defined as 1.0e-3 molair. */
	public static Unit Millimolair;

	/** The teramolair is a unit of amount of substance concentration defined as 1.0e12 molair. */
	public static Unit Teramolair;

	public static Unit PicomolePerMetre;

	public static Unit Deciweber;

	/** The micromolair is a unit of amount of substance concentration defined as 1.0e-6 molair. */
	public static Unit Micromolair;

	public static Unit Decimole;

	/** The exakatal is a unit of catalytic activity defined as 1.0e18 katal. */
	public static Unit Exakatal;

	public static Unit JoulePerMole;

	/** Gram per hectolitre is a unit of density defined as gram divided by hectolitre. */
	public static Unit GramPerHectolitre;

	/** The attocandela is a unit of luminous intensity defined as 1.0e-18 candela. */
	public static Unit Attocandela;

	public static Unit MoleMicrometreReciprocalSquareCentimetreReciprocalSecondTime;

	public static Unit Yottawatt;

	/** The decabecquerel is a unit of activity defined as 1.0e1 becquerel. */
	public static Unit Decabecquerel;

	/** The nanoampere is a unit of electric current defined as 1.0e-9 ampere. */
	public static Unit Nanoampere;

	/** Metre per millisecond is a unit of speed defined as metre divided by millisecond. */
	public static Unit MetrePerMillisecondTime;

	public static Unit Microlux;

	/** Cubic metre is a unit of volume defined as the volume of a cube whose sides measure exactly one metre. */
	public static Unit CubicMetre;

	public static Unit Decanewton;

	/** The microbar is a unit of pressure defined as 1.0e-6 bar. */
	public static Unit Microbar;

	/** The femtoampere is a unit of electric current defined as 1.0e-15 ampere. */
	public static Unit Femtoampere;

	public static Unit LitrePerHour;

	public static Unit PartsPerMillionPerYear;

	public static Unit WeberPerSquareMetre;

	/** The litre is a unit of volume defined as 1.0e-3 cubic metre. */
	public static Unit Litre;

	/** The picometre is a unit of length defined as 1.0e-12 metre. */
	public static Unit Picometre;

	/** The knot is a unit of speed defined as nautical mile per hour. */
	public static Unit Knot;

	public static Unit SquareMetreNanometre;

	public static Unit WattPerSteradian;

	/** The zeptjoule is a unit of energy defined as 1.0e-21 joule. */
	public static Unit Zeptojoule;

	public static Unit Centilitre;

	public static Unit MetreKilogram;

	/** The femtobecquerel is a unit of activity defined as 1.0e-15 becquerel. */
	public static Unit Femtobecquerel;

	/** Metre per exasecond is a unit of speed defined as metre divided by exasecond. */
	public static Unit MetrePerExasecondTime;

	/** The gigacandela is a unit of luminous intensity defined as 1.0e9 candela. */
	public static Unit Gigacandela;

	public static Unit Yottalumen;

	public static Unit GramPerMegajoule;

	/** The teracandela is a unit of luminous intensity defined as 1.0e12 candela. */
	public static Unit Teracandela;

	public static Unit MetrePerSecondTimePerMetre;

	/** Metre per decisecond is a unit of speed defined as metre divided by decisecond. */
	public static Unit MetrePerDecisecondTime;

	/** The water horsepower is a unit of power defined as 7.46043e2 watt. */
	public static Unit HorsepowerWater;

	public static Unit CubicMetrePerCubicMetre;

	public static Unit KilomolePerMetre;

	public static Unit DegreeCelsiusDay;

	/** The sidereal minute is a unit of time defined as 5.983617e1 second. */
	public static Unit MinuteSidereal;

	/** The abcoulomb is a unit of electric charge defined as 10 coulomb. */
	public static Unit Abcoulomb;

	public static Unit ZettasecondTimeSquared;

	public static Unit Yoctolumen;

	public static Unit ReciprocalGram;

	/** The microfarad is a unit of capacitance defined as 1.0e-6 farad. */
	public static Unit Microfarad;

	public static Unit KilowattHour;

	public static Unit Petatesla;

	/** The carat (mass) is a unit of mass defined as 2.0e-4 kilogram. */
	public static Unit CaratMass;

	/** Microgram per litre is a unit of density defined as microgram divided by litre. */
	public static Unit MicrogramPerLitre;

	public static Unit YottasecondTime;

	public static Unit MolePerZeptometre;

	/** The zettahenry is a unit of inductance defined as 1.0e21 henry. */
	public static Unit Zettahenry;

	/** The boiler horsepower is a unit of power defined as 9.80950e3 watt. */
	public static Unit HorsepowerBoiler;

	/** Solar radius is a unit used in astronomy to denote stellar or stellar system radii (http://en.wikipedia.org/wiki/Solar_radius). */
	public static Unit SolarRadius;

	/** Milligram per litre is a unit of density defined as milligram divided by litre. */
	public static Unit MilligramPerLitre;

	/** Attometre per second is a unit of speed defined as attometre divided by second. */
	public static Unit AttometrePerSecondTime;

	/** The barn is a unit of area defined as 1.0e-28 square metre. */
	public static Unit Barn;

	public static Unit KilogramPerHectareDay;

	/** Mole per kilolitre is a unit of amount of substance concentration defined as mole divided by kilolitre. */
	public static Unit MolePerKilolitre;

	/** The millihenry is a unit of inductance defined as 1.0e-3 henry. */
	public static Unit Millihenry;

	public static Unit Terabit;

	public static Unit Nanotesla;

	public static Unit JoulePerSquareMetreSecondTime;

	/** The tropical year is a unit of time defined as 3.155693e7 second. */
	public static Unit YearTropical;

	public static Unit Yottapascal;

	/** The US liquid pint is a unit of volume defined as 4.731765e-4 cubic metre. */
	public static Unit LiquidPintUS;

	/** The attofarad is a unit of capacitance defined as 1.0e-18 farad. */
	public static Unit Attofarad;

	public static Unit Decivolt;

	/** The picocandela is a unit of luminous intensity defined as 1.0e-12 candela. */
	public static Unit Picocandela;

	public static Unit N25Millilitre;

	/** The megacandela is a unit of luminous intensity defined as 1.0e6 candela. */
	public static Unit Megacandela;

	public static Unit Kilosievert;

	/** The nanomolair is a unit of amount of substance concentration defined as 1.0e-9 molair. */
	public static Unit Nanomolair;

	public static Unit Megalumen;

	/** The femtokelvin is a unit of temperature defined as 1.0e-15 kelvin. */
	public static Unit Femtokelvin;

	/** The microcandela is a unit of luminous intensity defined as 1.0e-6 candela. */
	public static Unit Microcandela;

	/** Centimetre per day is a unit of speed defined as centimetre divided by day. */
	public static Unit CentimetrePerDay;

	/** Nanomole per litre is a unit of amount of substance concentration defined as nanomole divided by litre. */
	public static Unit NanomolePerLitre;

	/** The minute (time) is a unit of time defined as 60 second. */
	public static Unit MinuteTime;

	/** The abhenry is a unit of inductance defined as 1.0e-9 henry. */
	public static Unit Abhenry;

	public static Unit Teralitre;

	/** Gram per decilitre is a unit of density defined as gram divided by decilitre. */
	public static Unit GramPerDecilitre;

	public static Unit Nanolumen;

	public static Unit Zeptotesla;

	public static Unit SquareZeptometre;

	public static Unit Attolitre;

	public static Unit MolePerDecametre;

	/** The pint is a unit of volume defined as 568.26125 millilitre. */
	public static Unit PintImperial;

	/** The decidegree Celsius is a unit of temperature defined as 1.0e-1 degree Celsius. */
	public static Unit DecidegreeCelsius;

	/** The tonne is a unit of mass defined as 1000 kilogram. */
	public static Unit Tonne;

	/** Mole per megalitre is a unit of amount of substance concentration defined as mole divided by megalitre. */
	public static Unit MolePerMegalitre;

	public static Unit Yobibit;

	/** The electric horsepower is a unit of power defined as 7.46e2 watt. */
	public static Unit HorsepowerElectric;

	public static Unit Zeptosteradian;

	public static Unit MegaeuroPerPetajoule;

	/** The millicandela is a unit of luminous intensity defined as 1.0e-3 candela. */
	public static Unit Millicandela;

	public static Unit ReciprocalWatt;

	public static Unit CentisecondTime;

	public static Unit SecondPlaneAngleSquared;

	public static Unit Zettabyte;

	/** Gigametre per second is a unit of speed defined as gigametre divided by second. */
	public static Unit GigametrePerSecondTime;

	public static Unit Nanolitre;

	public static Unit Millinewton;

	public static Unit MetreToThePower2ReciprocalGram;

	public static Unit WattPerSquareMetre;

	public static Unit KilogramPerKilogram;

	public static Unit Decalitre;

	/** The decaampere is a unit of electric current defined as 1.0e1 ampere. */
	public static Unit Decaampere;

	public static Unit NewtonPerSquareMetre;

	public static Unit DeltaA450PerSecondTime;

	/** The degree is a unit of plane angle defined as 1.745329e-2 radian. */
	public static Unit Degree;

	/** Metre per day is a unit of speed defined as metre divided by day. */
	public static Unit MetrePerDay;

	public static Unit CoulombMetre;

	/** Millimetre per second is a unit of speed defined as millimetre divided by second. */
	public static Unit MillimetrePerSecondTime;

	public static Unit GramPerSquareMetreCentimetre;

	/** Decimetre per second is a unit of speed defined as decimetre divided by second. */
	public static Unit DecimetrePerSecondTime;

	public static Unit Euro;

	/** The megagray is a unit of absorbed dose defined as 1.0e6 gray. */
	public static Unit Megagray;

	/** The lambert is a unit of luminance defined as 3.183099e3 candela per square metre. */
	public static Unit Lambert;

	/** The baud is a unit of symbol rate defined as one distinct symbol change or signalling event made to the transmission medium per second in a digitally modulated signal or a line code. */
	public static Unit Baud;

	public static Unit CubicDecimetre;

	public static Unit Femtovolt;

	/** The megagram is a unit of mass defined as 1.0e6 gram. */
	public static Unit Megagram;

	public static Unit JoulePerSecondTime;

	/** The centihertz is a unit of frequency defined as 1.0e-2 hertz. */
	public static Unit Centihertz;

	public static Unit Gibibit;

	/** Metre per kilosecond squared is a unit of acceleration defined as metre divided by kilosecond squared. */
	public static Unit MetrePerKilosecondTimeSquared;

	public static Unit Femtolumen;

	/** The picoampere is a unit of electric current defined as 1.0e-12 ampere. */
	public static Unit Picoampere;

	public static Unit SquarePetametre;

	/** The Imperial fluid ounce is a unit of volume defined as 2.841306e-5 cubic metre. */
	public static Unit FluidOunceImperial;

	/** Megagram per litre is a unit of density defined as megagram divided by litre. */
	public static Unit MegagramPerLitre;

	public static Unit Microsievert;

	public static Unit Yoctolux;

	/** Gram per kilolitre is a unit of density defined as gram divided by kilolitre. */
	public static Unit GramPerKilolitre;

	public static Unit CubicPetametre;

	public static Unit Mebibyte;

	/** The kilobecquerel is a unit of activity defined as 1.0e3 becquerel. */
	public static Unit Kilobecquerel;

	/** The degree Rankine is a unit of temperature defined as 5.555556e-1 kelvin. */
	public static Unit DegreeRankine;

	/** Millimetre per second squared is a unit of acceleration defined as millimetre divided by second squared. */
	public static Unit MillimetrePerSecondTimeSquared;

	public static Unit MolePerTerametre;

	public static Unit Attopascal;

	/** The zettakatal is a unit of catalytic activity defined as 1.0e21 katal. */
	public static Unit Zettakatal;

	/** Decimole per litre is a unit of amount of substance concentration defined as decimole divided by litre. */
	public static Unit DecimolePerLitre;

	/** The gigahenry is a unit of inductance defined as 1.0e9 henry. */
	public static Unit Gigahenry;

	public static Unit MilligramPerHectogram;

	/** Gram per microlitre is a unit of density defined as gram divided by microlitre. */
	public static Unit GramPerMicrolitre;

	/** The becquerel is a unit of activity defined as the activity of a quantity of radioactive material in which one nucleus decays per second. Algebraically it is defined as 1 divided by second. */
	public static Unit Becquerel;

	/** Mole per yottalitre is a unit of amount of substance concentration defined as mole divided by yottalitre. */
	public static Unit MolePerYottalitre;

	/** The microsecond (plane angle) is a unit of length defined as 1.0e-6 second (plane angle). Gebruikt in de astronomie (metingen van posities van sterren/sterrenstelsels etc.) om de fout weer te geven. De nieuwe satellieten zijn zo nauwkeurig dat deze fout mogelijk is geworden (GAIA-satelliet). */
	public static Unit MicrosecondPlaneAngle;

	/** The nanokelvin is a unit of temperature defined as 1.0e-9 kelvin. */
	public static Unit Nanokelvin;

	/** The Postscript pica is a unit of length defined as 12 point (Postscript). */
	public static Unit PicaPostscript;

	public static Unit GrayPerSecondTime;

	/** The zeptfarad is a unit of capacitance defined as 1.0e-21 farad. */
	public static Unit Zeptofarad;

	/** Hectomole per litre is a unit of amount of substance concentration defined as hectomole divided by litre. */
	public static Unit HectomolePerLitre;

	public static Unit Teraohm;

	public static Unit Megavolt;

	/** Micromole per litre is a unit of amount of substance concentration defined as micromole divided by litre. */
	public static Unit MicromolePerLitre;

	/** The megahertz is a unit of frequency defined as 1.0e6 hertz. */
	public static Unit Megahertz;

	/** Nanometre per second squared is a unit of acceleration defined as nanometre divided by second squared. */
	public static Unit NanometrePerSecondTimeSquared;

	/** Decamole per litre is a unit of amount of substance concentration defined as decamole divided by litre. */
	public static Unit DecamolePerLitre;

	/** The femtomolair is a unit of amount of substance concentration defined as 1.0e-15 molair. */
	public static Unit Femtomolair;

	/** Metre per picosecond squared is a unit of acceleration defined as metre divided by picosecond squared. */
	public static Unit MetrePerPicosecondTimeSquared;

	/** The gigakelvin is a unit of thermodynamic temperature defined as 1.0e9 kelvin. */
	public static Unit Gigakelvin;

	public static Unit CubicZeptometre;

	/** The mass (in solar masses) per cubic parsec. */
	public static Unit SolarMassPerCubicParsec;

	public static Unit MegamolePerMetre;

	/** The 59 Â°F British thermal unit is a unit of energy defined as 1.05480e3 joule. */
	public static Unit BritishThermalUnit59F;

	/** The day is a unit of time defined as 86400 second. */
	public static Unit Day;

	public static Unit Centiohm;

	/** The attocoulomb is a unit of electric charge defined as 1.0e-18 coulomb. */
	public static Unit Attocoulomb;

	public static Unit Mebibit;

	public static Unit Hectoohm;

	/** The kilocandela is a unit of luminous intensity defined as 1.0e3 candela. */
	public static Unit Kilocandela;

	/** The kilokelvin is a unit of thermodynamic temperature defined as 1.0e3 kelvin. */
	public static Unit Kilokelvin;

	/** The yottacoulomb is a unit of electric charge defined as 1.0e24 coulomb. */
	public static Unit Yottacoulomb;

	/** The zettacoulomb is a unit of electric charge defined as 1.0e21 coulomb. */
	public static Unit Zettacoulomb;

	/** Micrometre per second squared is a unit of acceleration defined as micrometre divided by second squared. */
	public static Unit MicrometrePerSecondTimeSquared;

	/** The microampere is a unit of electric current defined as 1.0e-6 ampere. */
	public static Unit Microampere;

	/** The technical atmosphere is a unit of pressure defined as 9.80665e4 pascal. */
	public static Unit AtmosphereTechnical;

	/** The gigaampere is a unit of electric current defined as 1.0e9 ampere. */
	public static Unit Gigaampere;

	public static Unit Kilonewton;

	/** The millihertz is a unit of frequency defined as 1.0e-3 hertz. */
	public static Unit Millihertz;

	public static Unit Microsiemens;

	public static Unit Millisiemens;

	/** Molair is a unit of amount of substance concentration defined as 1 mole per litre. */
	public static Unit Molair;

	public static Unit Pebibit;

	public static Unit Femtolitre;

	public static Unit ColonyFormingUnitPer25Millilitre;

	/** Metre per microsecond is a unit of speed defined as metre divided by microsecond. */
	public static Unit MetrePerMicrosecondTime;

	public static Unit ExasecondTimeSquared;

	public static Scale FahrenheitScale;

	/** The British hundredweight is a unit of mass defined as 5.080235e1 kilogram. */
	public static Unit HundredweightBritish;

	public static Unit HourSidereal;

	/** Yottametre per second squared is a unit of acceleration defined as yottametre divided by second squared. */
	public static Unit YottametrePerSecondTimeSquared;

	/** The terahertz is a unit of frequency defined as 1.0e12 hertz. */
	public static Unit Terahertz;

	public static Unit KilogramSecondTimeToThePower2;

	/** Decigram per litre is a unit of density defined as decigram divided by litre. */
	public static Unit DecigramPerLitre;

	/** The yoctocandela is a unit of luminous intensity defined as 1.0e-24 candela. */
	public static Unit Yoctocandela;

	/** The cord is a unit of volume defined as 3.624556 cubic metre. */
	public static Unit Cord;

	public static Unit CoulombPerCubicMetre;

	public static Unit Micronewton;

	public static Unit MetrePerCubicMetre;

	/** Picogram per litre is a unit of density defined as picogram divided by litre. */
	public static Unit PicogramPerLitre;

	/** The petafarad is a unit of capacitance defined as 1.0e15 farad. */
	public static Unit Petafarad;

	/** The kilokatal is a unit of catalytic activity defined as 1.0e3 katal. */
	public static Unit Kilokatal;

	public static Unit Teralumen;

	public static Unit GramPerKilogram;

	public static Unit SwissFranc;

	/** The megaparsec is a unit of length defined as 1.0e6 parsec. Gebruikt voor afstanden op de schaal van clusters. */
	public static Unit Megaparsec;

	/** Mole per yoctolitre is a unit of amount of substance concentration defined as mole divided by yoctolitre. */
	public static Unit MolePerYoctolitre;

	/** Metre per zettasecond squared is a unit of acceleration defined as metre divided by zettasecond squared. */
	public static Unit MetrePerZettasecondTimeSquared;

	/** The megahenry is a unit of inductance defined as 1.0e6 henry. */
	public static Unit Megahenry;

	public static Unit SouthKoreanWon;

	/** Decagram per litre is a unit of density defined as decagram divided by litre. */
	public static Unit DecagramPerLitre;

	public static Unit Millilumen;

	public static Unit Zettaohm;

	public static Unit ReciprocalKelvin;

	public static Unit KilogramPerSecondTime;

	public static Unit Centiradian;

	public static Unit Yottalitre;

	public static Unit Picovolt;

	public static Unit Yoctolitre;

	public static Unit WattPerSteradianSquareMetreHertz;

	public static Unit DegreeSquared;

	public static Unit GramPerSquareMetreDay;

	public static Unit MilligramRAE;

	/** The TeX point is a unit of length defined as 0.01383700013837000138370001383 inch. */
	public static Unit PointTeX;

	/** The 23 Â°C perm is a unit of permeance defined as 5.74525e-11 kilogram per pascal second (time) square metre. */
	public static Unit Perm23C;

	public static Unit Nanonewton;

	public static Unit FaradPerMetre;

	public static Unit Millisievert;

	/** The lumen is a unit of luminous flux defined as candela times steradian = lux times square metre. */
	public static Unit Lumen;

	public static Unit SquareHectometre;

	/** The lux is a unit of illuminance defined as lumen divided by square metre = candela times steradian divided by square metre. */
	public static Unit Lux;

	/** The milliampere is a unit of electric current defined as 1.0e-3 ampere. */
	public static Unit Milliampere;

	/** The bar is a unit of pressure defined as 100 000 pascal. */
	public static Unit Bar;

	public static Unit Hectoweber;

	/** The kiloampere is a unit of electric current defined as 1.0e3 ampere. */
	public static Unit Kiloampere;

	public static Unit ZettasecondTime;

	/** Metre per yoctosecond is a unit of speed defined as metre divided by yoctosecond. */
	public static Unit MetrePerYoctosecondTime;

	/** The millikelvin is a unit of temperature defined as 1.0e-3 kelvin. */
	public static Unit Millikelvin;

	/** Microram per cubic centimetre is a unit of density defined as microgram divided by cubic centimetre. */
	public static Unit MicrogramPerCubicCentimetre;

	/** The 39 Â°F British thermal unit is a unit of energy defined as 1.05967e3 joule. */
	public static Unit BritishThermalUnit39F;

	/** The US hundredweight is a unit of mass defined as 4.535924e1 kilogram. */
	public static Unit HundredweightUS;

	/** The microkelvin is a unit of temperature defined as 1.0e-6 kelvin. */
	public static Unit Microkelvin;

	/** Wordt gebruikt als hoek (360Â°=1440) voor o.a. rechte klimming. De m wordt meestal als superscript achter de waarde gezet gevolgd door de verdere opdeling naar seconden. Zoals in 5h34m12s09. Vaak wordt de fractie in seconden zonder punt geschreven, de s wordt als afscheiding gebruikt (http://en.wikipedia.org/wiki/Right_ascension). */
	public static Unit MinuteHourAngle;

	/** The ton-force is a unit of force defined as 8.896443e3 newton. */
	public static Unit TonForce;

	/** The 60 Â°F British thermal unit is a unit of energy defined as 1.05468e3 joule. */
	public static Unit BritishThermalUnit60F;

	/** The femtokatal is a unit of catalytic activity defined as 1.0e-15 katal. */
	public static Unit Femtokatal;

	public static Unit Microohm;

	public static Unit CubicNanometre;

	/** The degree Celsius is a unit of temperature defined as 1 kelvin. */
	public static Unit DegreeCelsius;

	/** The electronvolt is a unit of energy defined as 1.602177e-19 joule. */
	public static Unit Electronvolt;

	public static Unit WattPerSquareMetreSteradian;

	/** The yoctobecquerel is a unit of activity defined as 1.0e-24 becquerel. */
	public static Unit Yoctobecquerel;

	public static Unit Attosteradian;

	/** The picogram is a unit of mass defined as 1.0e-12 gram. */
	public static Unit Picogram;

	/** Gram per yottalitre is a unit of density defined as gram divided by yottalitre. */
	public static Unit GramPerYottalitre;

	public static Unit MicromolePerSecondTime;

	/** The centicoulomb is a unit of electric charge defined as 1.0e-2 coulomb. */
	public static Unit Centicoulomb;

	/** The decicoulomb is a unit of electric charge defined as 1.0e-1 coulomb. */
	public static Unit Decicoulomb;

	public static Unit GigayearCubicParsec;

	/** The hertz is a unit of frequency defined as 1 divided by second. */
	public static Unit Hertz;

	/** The millisecond (plane angle) is a unit of length defined as 1.0e-3 second (plane angle). Gebruikt in de astronomie (metingen van posities van sterren/sterrenstelsels etc.) om de fout weer te geven. */
	public static Unit MillisecondPlaneAngle;

	/** Attomole per litre is a unit of amount of substance concentration defined as attomole divided by litre. */
	public static Unit AttomolePerLitre;

	/** The picogray is a unit of absorbed dose defined as 1.0e-12 gray. */
	public static Unit Picogray;

	/** The exahertz is a unit of frequency defined as 1.0e18 hertz. */
	public static Unit Exahertz;

	public static Unit ColonyFormingUnitPerMillilitre;

	public static Unit ReciprocalDay;

	public static Unit NanomolePerMetre;

	/** The deciampere is a unit of electric current defined as 1.0e-1 ampere. */
	public static Unit Deciampere;

	public static Unit MetreToThePower2;

	public static Unit KilogramPerMole;

	/** The yoctojoule is a unit of energy defined as 1.0e-24 joule. */
	public static Unit Yoctojoule;

	/** Petametre per second squared is a unit of acceleration defined as petametre divided by second squared. */
	public static Unit PetametrePerSecondTimeSquared;

	/** The assay ton is a unit of mass defined as 2.916667e-2 kilogram. */
	public static Unit TonAssay;

	/** The zeptampere is a unit of electric current defined as 1.0e-21 ampere. */
	public static Unit Zeptoampere;

	/** Millimetre per day is a unit of speed defined as millimetre divided by day. */
	public static Unit MillimetrePerDay;

	/** The yoctocoulomb is a unit of electric charge defined as 1.0e-24 coulomb. */
	public static Unit Yoctocoulomb;

	public static Unit CanadianDollar;

	public static Unit Millipascal;

	public static Unit TerasecondTimeSquared;

	/** The megacoulomb is a unit of electric charge defined as 1.0e6 coulomb. */
	public static Unit Megacoulomb;

	/** Petametre per second is a unit of speed defined as petametre divided by second. */
	public static Unit PetametrePerSecondTime;

	/** The week is a unit of time defined as 6.04800e5 second. */
	public static Unit Week;

	/** The centifarad is a unit of capacitance defined as 1.0e-2 farad. */
	public static Unit Centifarad;

	public static Unit Petalitre;

	/** Reciprocal metre is a unit of wavenumber defined as 1 divided by metre. */
	public static Unit ReciprocalMetre;

	/** Mole per femtolitre is a unit of amount of substance concentration defined as mole divided by femtolitre. */
	public static Unit MolePerFemtolitre;

	public static Unit Zeptoohm;

	public static Unit Yottabyte;

	/** The fermi is a unit of length defined as 1.0e-15 metre. */
	public static Unit Fermi;

	/** The microdegree Celsius is a unit of temperature defined as 1.0e-6 degree Celsius. */
	public static Unit MicrodegreeCelsius;

	public static Unit SquareAttometre;

	/** The grain is a unit of mass defined as 6.479891e-5 kilogram. */
	public static Unit Grain;

	/** The apothecaries' pound is a unit of mass defined as 3.732417e-1 kilogram. */
	public static Unit PoundApothecaries;

	public static Scale CelsiusScale;

	/** Millimetre per hour is a unit of speed defined as millimetre divided by hour. */
	public static Unit MillimetrePerHour;

	public static Unit Microtesla;

	/** The gigabecquerel is a unit of activity defined as 1.0e9 becquerel. */
	public static Unit Gigabecquerel;

	/** Mole per hectolitre is a unit of amount of substance concentration defined as mole divided by hectolitre. */
	public static Unit MolePerHectolitre;

	/** The Imperial gill is a unit of volume defined as 1.420653e-4 cubic metre. */
	public static Unit GillImperial;

	public static Unit Femtomole;

	public static Unit Piconewton;

	/** Mole per zeptolitre is a unit of amount of substance concentration defined as mole divided by zeptolitre. */
	public static Unit MolePerZeptolitre;

	public static Unit Femtoohm;

	public static Unit Femtoweber;

	public static Unit KilogramPerHectare;

	public static Unit Petabit;

	public static Unit ReciprocalSecondTime;

	/** The decacoulomb is a unit of electric charge defined as 1.0e1 coulomb. */
	public static Unit Decacoulomb;

	/** Attogram per litre is a unit of density defined as attogram divided by litre. */
	public static Unit AttogramPerLitre;

	public static Unit Picoradian;

	public static Unit KilogramSecondTimeToThePower2ReciprocalMetre;

	/** The thermochemical British thermal unit is a unit of energy defined as 1.054350e3 joule. */
	public static Unit BritishThermalUnitThermochemical;

	public static Unit DecisecondTimeSquared;

	/** Picomole per litre is a unit of amount of substance concentration defined as picomole divided by litre. */
	public static Unit PicomolePerLitre;

	/** The nanofarad is a unit of capacitance defined as 1.0e-9 farad. */
	public static Unit Nanofarad;

	public static Unit Femtowatt;

	public static Unit KilojoulePerSquareMetreDay;

	public static Unit Picomole;

	/** Metre per decasecond is a unit of speed defined as metre divided by decasecond. */
	public static Unit MetrePerDecasecondTime;

	public static Unit Zettalumen;

	/** Micrometre per second is a unit of speed defined as micrometre divided by second. */
	public static Unit MicrometrePerSecondTime;

	public static Unit MolePerMetre;

	/** The stathenry is a unit of inductance defined as 8.987552e11 henry. */
	public static Unit Stathenry;

	/** The year is a unit of time defined as 3.1536e7 second. */
	public static Unit Year;

	public static Unit AttosecondTime;

	public static Unit MolePerGigametre;

	public static Unit ReciprocalCubicMetre;

	/** Gram per megalitre is a unit of density defined as gram divided by megalitre. */
	public static Unit GramPerMegalitre;

	/** The kilomolair is a unit of amount of substance concentration defined as 1.0e3 molair. */
	public static Unit Kilomolair;

	public static Unit LumenPerSquareMetre;

	/** Metre per centisecond squared is a unit of acceleration defined as metre divided by centisecond squared. */
	public static Unit MetrePerCentisecondTimeSquared;

	public static Unit Decitesla;

	public static Unit HectareDay;

	public static Unit Attotesla;

	public static Unit Nanowatt;

	public static Unit SquareDecimetre;

	/** The revolution is a unit of plane angle defined as 6.283185 radian. */
	public static Unit Revolution;

	public static Unit Picowatt;

	public static Unit Megohm;

	public static Unit YoctosecondTime;

	public static Unit SquareMetreSteradian;

	public static Unit CubicPicometre;

	/** Kilometre per second squared is a unit of acceleration defined as kilometre divided by second squared. */
	public static Unit KilometrePerSecondTimeSquared;

	/** Metre per second is a unit of speed defined as metre divided by second. */
	public static Unit MetrePerSecondTime;

	/** The amylase unit is a unit of catalytic activity. */
	public static Unit AmylaseUnit;

	public static Unit NewtonMetre;

	public static Unit CubicMetrePerYear;

	public static Unit Kiloweber;

	public static Unit Zeptoweber;

	public static Unit Petalumen;

	public static Unit ReciprocalDegreeCelsius;

	public static Unit CubicHectometre;

	/** The metre of mercury is a unit of pressure defined as 133 322 pascal. */
	public static Unit MetreOfMercury;

	/** The femtogram is a unit of mass defined as 1.0e-15 gram. */
	public static Unit Femtogram;

	public static Unit ReciprocalAtmosphereStandard;

	/** The Postscript point is a unit of length defined as 0.013888888888888888888888888888889 inch. */
	public static Unit PointPostscript;

	/** The ton of refridgeration is a unit of power defined as 3.516853e3 watt. */
	public static Unit TonOfRefridgeration;

	/** The attometre is a unit of length defined as 1.0e-18 metre. */
	public static Unit Attometre;

	/** The petacandela is a unit of luminous intensity defined as 1.0e15 candela. */
	public static Unit Petacandela;

	public static Unit ReciprocalSquareMetre;

	public static Unit CubicGigametre;

	/** Femtometre per second squared is a unit of acceleration defined as femtometre divided by second squared. */
	public static Unit FemtometrePerSecondTimeSquared;

	public static Unit Decatesla;

	public static Unit DegreeCelsiusPerMinuteTime;

	public static Unit Kibibit;

	/** The femtogray is a unit of absorbed dose defined as 1.0e-15 gray. */
	public static Unit Femtogray;

	/** The decijoule is a unit of energy defined as 1.0e-1 joule. */
	public static Unit Decijoule;

	public static Unit Femtonewton;

	/** Square metre is a unit of area defined as the area of a square whose sides measure exactly one metre. */
	public static Unit SquareMetre;

	/** Metre per exasecond squared is a unit of acceleration defined as metre divided by exasecond squared. */
	public static Unit MetrePerExasecondTimeSquared;

	public static Unit Megaeuro;

	/** The centimetre is a unit of length defined as 1.0e-2 metre. */
	public static Unit Centimetre;

	public static Unit Deciohm;

	public static Unit MegametrePerKilojoule;

	/** The picofarad is a unit of capacitance defined as 1.0e-12 farad. */
	public static Unit Picofarad;

	/** Kilomole per litre is a unit of amount of substance concentration defined as kilomole divided by litre. */
	public static Unit KilomolePerLitre;

	public static Unit ColonyFormingUnit;

	/** The rÃ¶ntgen is a unit of exposure to x and Î³ rays defined as 2.58e-4 coulomb per kilogram. */
	public static Unit RÃ¶ntgen;

	/** The yottahertz is a unit of frequency defined as 1.0e24 hertz. */
	public static Unit Yottahertz;

	/** The sidereal second is a unit of time defined as 9.972696e-1 second. */
	public static Unit SecondSidereal;

	public static Unit Nanosiemens;

	public static Unit ReciprocalPartsPerMillion;

	public static Unit Picolitre;

	public static Unit YoctomolePerMetre;

	/** The degree Fahrenheit is a unit of temperature defined as 5.555556e-1 kelvin. */
	public static Unit DegreeFahrenheit;

	public static Unit Nanomole;

	public static Unit KilosecondTime;

	public static Unit GramPerMetre;

	/** The micrometre is a unit of length defined as 1.0e-6 metre. */
	public static Unit Micrometre;

	public static Unit Centisteradian;

	/** The nanobecquerel is a unit of activity defined as 1.0e-9 becquerel. */
	public static Unit Nanobecquerel;

	/** The picocoulomb is a unit of electric charge defined as 1.0e-12 coulomb. */
	public static Unit Picocoulomb;

	public static Unit ReciprocalHectare;

	public static Unit Exapascal;

	/** The zeptmolair is a unit of amount of substance concentration defined as 1.0e-21 molair. */
	public static Unit Zeptomolair;

	public static Unit PoundSterling;

	/** The zettakelvin is a unit of thermodynamic temperature defined as 1.0e21 kelvin. */
	public static Unit Zettakelvin;

	public static Unit Nanosievert;

	/** The decimetre is a unit of length defined as 1.0e-1 metre. */
	public static Unit Decimetre;

	/** The hectokatal is a unit of catalytic activity defined as 1.0e2 katal. */
	public static Unit Hectokatal;

	public static Unit Zettalitre;

	public static Unit SquareYottametre;

	public static Unit TerawattHour;

	/** Metre per femtosecond squared is a unit of acceleration defined as metre divided by femtosecond squared. */
	public static Unit MetrePerFemtosecondTimeSquared;

	/** The centijoule is a unit of energy defined as 1.0e-2 joule. */
	public static Unit Centijoule;

	public static Unit Giganewton;

	public static Unit JouleSecondTime;

	/** The sidereal year is a unit of time defined as 3.155815e7 second. */
	public static Unit YearSidereal;

	public static Unit MolePerZettametre;

	public static Unit JoulePerCubicMetre;

	public static Unit JoulePerKelvin;

	public static Unit AustralianDollar;

	public static Unit PetamolePerMetre;

	/** The attojoule is a unit of energy defined as 1.0e-18 joule. */
	public static Unit Attojoule;

	/** The decimolair is a unit of amount of substance concentration defined as 1.0e-1 molair. */
	public static Unit Decimolair;

	/** The yoctomolair is a unit of amount of substance concentration defined as 1.0e-24 molair. */
	public static Unit Yoctomolair;

	/** Gram per joule is a unit of energy consumption. */
	public static Unit GramPerJoule;

	public static Unit YottamolePerMetre;

	/** The terahenry is a unit of inductance defined as 1.0e12 henry. */
	public static Unit Terahenry;

	public static Unit Yottalux;

	/** The curie is a unit of activity defined as 3.7e10 becquerel. */
	public static Unit Curie;

	public static Unit Petasievert;

	public static Unit Perm23C_1;

	/** Metre per decisecond squared is a unit of acceleration defined as metre divided by decisecond squared. */
	public static Unit MetrePerDecisecondTimeSquared;

	/** The henry is a unit of inductance defined as square metre times kilogram divided by second squared times ampere squared = weber divided by ampere = volt second divided by ampere = (joule divided by coulomb) times second divided by (coulomb divided by second) = joule times second squared divided by coulomb squared = square metre times kilogram divided by coulomb squared. */
	public static Unit Henry;

	/** The Imperial quart is a unit of volume defined as 1.1365 litre. */
	public static Unit QuartImperial;

	public static Unit MicrogramPerJoule;

	/** The statohm is a unit of electrical resistance defined as 8.987552e11 ohm. */
	public static Unit Statohm;

	/** The exabecquerel is a unit of activity defined as 1.0e18 becquerel. */
	public static Unit Exabecquerel;

	public static Unit Millilitre;

	/** Kilogram per cubic metre is a unit of density defined as kilogram divided by cubic metre. */
	public static Unit KilogramPerCubicMetre;

	/** The exahenry is a unit of inductance defined as 1.0e18 henry. */
	public static Unit Exahenry;

	/** The 15 Â°C calorie is a unit of energy defined as 4.18580 joule. */
	public static Unit Calorie15C;

	public static Unit ZeptosecondTimeSquared;

	/** The bit is a unit of information capacity defined as the information capacity of one binary digit. */
	public static Unit Bit;

	/** The nanogray is a unit of absorbed dose defined as 1.0e-9 gray. */
	public static Unit Nanogray;

	public static Unit ZeptomolePerMetre;

	/** The TeX pica is a unit of length defined as 12 point (TeX). */
	public static Unit PicaTeX;

	/** The nanogram is a unit of mass defined as 1.0e-9 gram. */
	public static Unit Nanogram;

	public static Unit Nanosteradian;

	public static Unit MolePerNanometre;

	/** The exacoulomb is a unit of electric charge defined as 1.0e18 coulomb. */
	public static Unit Exacoulomb;

	public static Unit Kilosiemens;

	/** The gigacoulomb is a unit of electric charge defined as 1.0e9 coulomb. */
	public static Unit Gigacoulomb;

	/** The megaerg is a unit of energy defined as 1.0e6 erg. */
	public static Unit Megaerg;

	/** Mile (statute) per hour is a unit of speed defined as mile (statute) divided by hour. */
	public static Unit MileStatutePerHour;

	public static Unit Megaweber;

	/** The teracoulomb is a unit of electric charge defined as 1.0e12 coulomb. */
	public static Unit Teracoulomb;

	public static Unit NewtonPerMetre;

	/** The nanometre is a unit of length defined as 1.0e-9 metre. */
	public static Unit Nanometre;

	/** Metre per zeptosecond is a unit of speed defined as metre divided by zeptosecond. */
	public static Unit MetrePerZeptosecondTime;

	public static Unit Petasiemens;

	/** The dyne is a unit of force defined as 1.0e-5 newton. */
	public static Unit Dyne;

	/** Megamole per litre is a unit of amount of substance concentration defined as megamole divided by litre. */
	public static Unit MegamolePerLitre;

	/** Zettametre per second is a unit of speed defined as zettametre divided by second. */
	public static Unit ZettametrePerSecondTime;

	/** Metre per femtosecond is a unit of speed defined as metre divided by femtosecond. */
	public static Unit MetrePerFemtosecondTime;

	public static Unit MolePerPetametre;

	/** The microjoule is a unit of energy defined as 1.0e-6 joule. */
	public static Unit Microjoule;

	/** The centigray is a unit of absorbed dose defined as 1.0e-2 gray. */
	public static Unit Centigray;

	/** Metre per attosecond squared is a unit of acceleration defined as metre divided by attosecond squared. */
	public static Unit MetrePerAttosecondTimeSquared;

	public static Unit Gigawatt;

	/** The decifarad is a unit of capacitance defined as 1.0e-1 farad. */
	public static Unit Decifarad;

	/** The peck is a unit of volume defined as 8.809768e-3 cubic metre. */
	public static Unit Peck;

	/** The siemens is a unit of electrical conductance defined as 1 divided by ohm = ampere divided by volt = coulomb squared times second divided by kilogram times square metre = ampere squared times second to the power 3 divided by kilogram times square metre. */
	public static Unit Siemens;

	/** The unit pole is a unit of magnetic flux defined as 1.256637e-7 weber. */
	public static Unit UnitPole;

	public static Unit MicromolePerMetre;

	public static Unit Attowatt;

	public static Unit Centitesla;

	/** The statute mile is a unit of length defined as 1.609344e3 metre. */
	public static Unit MileStatute;

	/** The picojoule is a unit of energy defined as 1.0e-12 joule. */
	public static Unit Picojoule;

	public static Unit Zeptovolt;

	/** Metre per terasecond is a unit of speed defined as metre divided by terasecond. */
	public static Unit MetrePerTerasecondTime;

	public static Unit Centimole;

	/** The short ton is a unit of mass defined as 9.071847e2 kilogram. */
	public static Unit TonShort;

	public static Unit Terapascal;

	/** The decibecquerel is a unit of activity defined as 1.0e-1 becquerel. */
	public static Unit Decibecquerel;

	public static Unit CubicYottametre;

	public static Unit Yottavolt;

	/** The statweber is a unit of magnetic flux defined as 2.9979e2 weber. */
	public static Unit Statweber;

	public static Unit Yoctoohm;

	/** The newton is a unit of force defined as kilogram timesmetre divided by second squared. */
	public static Unit Newton;

	public static Unit Hectosiemens;

	public static Unit Exalumen;

	public static Unit Nanovolt;

	/** The byte is a unit of information capacity defined as 8 bit. */
	public static Unit Byte;

	/** Cubic metre per kilogram is a unit of specific volume defined as cubic metre divided by kilogram. */
	public static Unit CubicMetrePerKilogram;

	public static Unit DecimolePerMetre;

	/** Gigamole per litre is a unit of amount of substance concentration defined as gigamole divided by litre. */
	public static Unit GigamolePerLitre;

	/** The debye is a unit of electric dipole moment defined as 3.33564e-30 coulomb metre. */
	public static Unit Debye;

	public static Unit SquareMetrePerSecondTime;

	/** The chain is a unit of length defined as 2.011684e1 metre. */
	public static Unit Chain;

	/** The quad is a unit of energy defined as 1.0e15 British thermal unit (International Table). */
	public static Unit Quad;

	public static Unit WattPerSquareMetreHertz;

	/** The abvolt is a unit of electric potential defined as 1.0e-8 volt. */
	public static Unit Abvolt;

	/** The darcy is a unit of area defined as 9.869233e-13 square metre. */
	public static Unit Darcy;

	public static Unit DecamolePerMetre;

	public static Unit HectosecondTimeSquared;

	/** The micromagnitude is a unit of magnitude defined as 1.0e-6 magnitude. */
	public static Unit Micromagnitude;

	public static Unit Yoctopascal;

	/** Nautical mile per hour is a unit of speed defined as nautical mile divided by hour. */
	public static Unit NauticalMilePerHour;

	/** Metre per picosecond is a unit of speed defined as metre divided by picosecond. */
	public static Unit MetrePerPicosecondTime;

	/** The decikelvin is a unit of temperature defined as 1.0e-1 kelvin. */
	public static Unit Decikelvin;

	public static Unit Terabyte;

	public static Unit Nanolux;

	public static Unit MicrosecondTimeSquared;

	/** The yoctoampere is a unit of electric current defined as 1.0e-24 ampere. */
	public static Unit Yoctoampere;

	/** Mole per teralitre is a unit of amount of substance concentration defined as mole divided by teralitre. */
	public static Unit MolePerTeralitre;

	/** The ATA point is a unit of length defined as 0.3514598e-3 metre. */
	public static Unit PointATA;

	public static Unit Microsteradian;

	/** The foot poundal is a unit of energy defined as 4.214011e-2 joule. */
	public static Unit FootPoundal;

	/** The attodegree Celsius is a unit of temperature defined as 1.0e-18 degree Celsius. */
	public static Unit AttodegreeCelsius;

	/** The statmho is a unit of electrical conductance defined as 1.112650e-12 siemens. */
	public static Unit Statmho;

	/** Metre per gigasecond squared is a unit of acceleration defined as metre divided by gigasecond squared. */
	public static Unit MetrePerGigasecondTimeSquared;

	/** The long ton is a unit of mass defined as 1.016047e3 kilogram. */
	public static Unit TonLong;

	/** The yottacandela is a unit of luminous intensity defined as 1.0e24 candela. */
	public static Unit Yottacandela;

	public static Unit Attomole;

	/** Yottametre per second is a unit of speed defined as yottametre divided by second. */
	public static Unit YottametrePerSecondTime;

	public static Unit MolePerYottametre;

	/** The mean British thermal unit is a unit of energy defined as 1.05587e3 joule. */
	public static Unit BritishThermalUnitMean;

	public static Unit Picolux;

	/** The centibecquerel is a unit of activity defined as 1.0e-2 becquerel. */
	public static Unit Centibecquerel;

	/** The nautical mile is a unit of length defined as 1852 metre. */
	public static Unit NauticalMile;

	public static Unit Milliohm;

	public static Unit JoulePerKelvinKilogram;

	/** Metre per terasecond squared is a unit of acceleration defined as metre divided by terasecond squared. */
	public static Unit MetrePerTerasecondTimeSquared;

	/** The decametre is a unit of length defined as 1.0e1 metre. */
	public static Unit Decametre;

	public static Unit Centiwatt;

	public static Unit SquareZettametre;

	/** The decajoule is a unit of energy defined as 1.0e1 joule. */
	public static Unit Decajoule;

	public static Unit Gigalumen;

	/** The standard atmosphere is a unit of pressure defined as 1.01325e5 pascal. */
	public static Unit AtmosphereStandard;

	/** The nanojoule is a unit of energy defined as 1.0e-9 joule. */
	public static Unit Nanojoule;

	public static Unit Yoctotesla;

	/** Kilogram per cubic decimetre is a unit of density defined as kilogram divided by cubic decimetre. */
	public static Unit KilogramPerCubicDecimetre;

	/** The yoctofarad is a unit of capacitance defined as 1.0e-24 farad. */
	public static Unit Yoctofarad;

	public static Unit Yottasiemens;

	public static Unit ColonyFormingUnitPerGram;

	public static Unit Deciwatt;

	public static Unit Attosiemens;

	/** Zettametre per second squared is a unit of acceleration defined as zettametre divided by second squared. */
	public static Unit ZettametrePerSecondTimeSquared;

	/** The hectocandela is a unit of luminous intensity defined as 1.0e2 candela. */
	public static Unit Hectocandela;

	/** Yottagram per litre is a unit of density defined as yottagram divided by litre. */
	public static Unit YottagramPerLitre;

	public static Unit Gigalitre;

	/** Milligram per cubic metre is a unit of density defined as milligram divided by cubic metre. */
	public static Unit MilligramPerCubicMetre;

	/** The megakatal is a unit of catalytic activity defined as 1.0e6 katal. */
	public static Unit Megakatal;

	public static Unit Centipascal;

	public static Unit MolePerAttometre;

	/** The second is a unit of time defined as the duration of 9 192 631 770 periods of the radiation corresponding to the transition between the two hyperfine levels of the ground state of the cesium 133 atom. */
	public static Unit SecondTime;

	/** The ohm is a unit of electrical resistance defined as volt divided by ampere = square metre times kilogram divided by second to the power 3 times ampere squared. */
	public static Unit Ohm;

	public static Unit AttosecondTimeSquared;

	/** The millicoulomb is a unit of electric charge defined as 1.0e-3 coulomb. */
	public static Unit Millicoulomb;

	public static Unit GramPerHectogram;

	public static Unit SquareNanometre;

	public static Unit CubicMillimetrePerCubicMillimetre;

	/** The attobecquerel is a unit of activity defined as 1.0e-18 becquerel. */
	public static Unit Attobecquerel;

	/** The gigaelectronvolt is a unit of energy defined as 1.0e9 electronvolt. */
	public static Unit Gigaelectronvolt;

	/** Ampere per metre is a unit of magnetic field defined as ampere divided by metre. */
	public static Unit AmperePerMetre;

	public static Unit CubicAttometre;

	/** The mil (length) is a unit of length defined as 2.54e-5 metre. */
	public static Unit MilLength;

	public static Unit Kilohm;

	/** The stilb is a unit of luminance defined as 1.0e4 candela per square metre. */
	public static Unit Stilb;

	/** The femtodegree Celsius is a unit of temperature defined as 1.0e-15 degree Celsius. */
	public static Unit FemtodegreeCelsius;

	public static Unit Centivolt;

	public static Unit SteradianSquareMetreHertz;

	public static Unit KatalPerCubicMetre;

	public static Unit PicosecondTimeSquared;

	public static Unit SquareKilometre;

	public static Unit Petanewton;

	public static Unit CoulombPerSquareMetre;

	public static Unit MetreKelvin;

	/** The microbecquerel is a unit of activity defined as 1.0e-6 becquerel. */
	public static Unit Microbecquerel;

	public static Unit CubicParsec;

	public static Unit Centistokes;

	public static Unit Attovolt;

	public static Unit MegajoulePerSquareMetre;

	public static Unit Centipoise;

	/** The zeptkelvin is a unit of temperature defined as 1.0e-21 kelvin. */
	public static Unit Zeptokelvin;

	/** The attogray is a unit of absorbed dose defined as 1.0e-18 gray. */
	public static Unit Attogray;

	public static Unit Hectonewton;

	/** Mole per picolitre is a unit of amount of substance concentration defined as mole divided by picolitre. */
	public static Unit MolePerPicolitre;

	public static Unit CubicFemtometre;

	/** The minute (plane angle) is a unit of plane angle defined as 2.908882e-4 radian. */
	public static Unit MinutePlaneAngle;

	/** The yoctometre is a unit of length defined as 1.0e-24 metre. */
	public static Unit Yoctometre;

	public static Unit Yottasievert;

	public static Unit Gigalux;

	/** The femtohenry is a unit of inductance defined as 1.0e-15 henry. */
	public static Unit Femtohenry;

	public static Unit Teralux;

	/** The attogram is a unit of mass defined as 1.0e-18 gram. */
	public static Unit Attogram;

	public static Unit SquareDecametre;

	public static Unit Hectotesla;

	public static Unit Hectosievert;

	/** Gram per zettalitre is a unit of density defined as gram divided by zettalitre. */
	public static Unit GramPerZettalitre;

	/** Centimetre per second is a unit of speed defined as centimetre divided by second. */
	public static Unit CentimetrePerSecondTime;

	/** The footlambert is a unit of luminance defined as 3.426259 candela per square metre. */
	public static Unit Footlambert;

	/** Kilogram per litre is a unit of density defined as kilogram divided by litre. */
	public static Unit KilogramPerLitre;

	/** The teaspoon is a unit of volume defined as 4.928922e-6 cubic metre. */
	public static Unit Teaspoon;

	/** The US dry quart is a unit of volume defined as 1.101221e-3 cubic metre. */
	public static Unit DryQuartUS;

	/** The megaelectronvolt is a unit of energy defined as 1.0e6 electronvolt. */
	public static Unit Megaelectronvolt;

	public static Unit MoleMicrometre;

	/** The acre is a unit of area defined as 4.046873e3 square metre. */
	public static Unit Acre;

	/** The barrel is a unit of volume defined as 1.589873e-1 cubic metre. */
	public static Unit Barrel;

	/** The zeptkatal is a unit of catalytic activity defined as 1.0e-21 katal. */
	public static Unit Zeptokatal;

	/** The kilohenry is a unit of inductance defined as 1.0e3 henry. */
	public static Unit Kilohenry;

	public static Unit Petaohm;

	public static Unit SecondTimeAmpere;

	public static Unit Attosievert;

	/** The centigram is a unit of mass defined as 1.0e-2 gram. */
	public static Unit Centigram;

	/** Metre per second squared is a unit of acceleration defined as metre divided by second squared. */
	public static Unit MetrePerSecondTimeSquared;

	/** The nanodegree Celsius is a unit of temperature defined as 1.0e-9 degree Celsius. */
	public static Unit NanodegreeCelsius;

	public static Unit NanokatalPerMilligram;

	/** The yottahenry is a unit of inductance defined as 1.0e24 henry. */
	public static Unit Yottahenry;

	public static Unit RadianPerSecondTime;

	/** The yottagray is a unit of absorbed dose defined as 1.0e24 gray. */
	public static Unit Yottagray;

	/** The sievert is a unit of dose equivalent defined as joule divided by kilogram = square metre divided by second squared. */
	public static Unit Sievert;

	/** The zettahertz is a unit of frequency defined as 1.0e21 hertz. */
	public static Unit Zettahertz;

	public static Unit KilosecondTimeSquared;

	/** The yottagram is a unit of mass defined as 1.0e24 gram. */
	public static Unit Yottagram;

	public static Unit Zeptolux;

	public static Unit WattPerSquareMetreNanometre;

	public static Unit WattPerSteradianSquareMetre;

	/** The light year is a unit of length defined as 9.46073e15 metre. */
	public static Unit LightYear;

	/** The zettacandela is a unit of luminous intensity defined as 1.0e21 candela. */
	public static Unit Zettacandela;

	/** The volt is a unit of electric potential defined as watt divided by ampere = joule divided by coulomb = newton times metre divided by ampere times second = kilogram times square metre divided by ampere times second to the power 3. */
	public static Unit Volt;

	public static Unit SquareMetreHertz;

	/** The US dry pint is a unit of volume defined as 5.506105e-4 cubic metre. */
	public static Unit DryPintUS;

	/** The kilometre is a unit of length defined as 1.0e3 metre. */
	public static Unit Kilometre;

	/** The attokatal is a unit of catalytic activity defined as 1.0e-18 katal. */
	public static Unit Attokatal;

	/** Femtomole per litre is a unit of amount of substance concentration defined as femtomole divided by litre. */
	public static Unit FemtomolePerLitre;

	/** The month is a unit of time. */
	public static Unit Month;

	/** The statcoulomb is a unit of electric charge defined as 3.335641e-10 coulomb. */
	public static Unit Statcoulomb;

	/** The mho is a unit of electrical conductance defined as 1 siemens. */
	public static Unit Mho;

	/** The weber is a unit of magnetic flux defined as kilogram times square metre divided by second squared times ampere = volt times second = joule divided by ampere. */
	public static Unit Weber;

	public static Unit Exbibit;

	public static Unit Attoohm;

	/** The pascal is a unit of pressure and stress defined as newton divided by square metre = joule divided by cubic metre = kilogram divided by metre second squared. */
	public static Unit Pascal;

	public static Unit MilligramPerKilometre;

	public static Unit SquareFemtometre;

	/** The tablespoon is a unit of volume defined as 1.478676e-5 cubic metre. */
	public static Unit Tablespoon;

	/** The centiare is a unit of area defined as 1.0e-2 are. */
	public static Unit Centiare;

	/** The teragram is a unit of mass defined as 1.0e12 gram. */
	public static Unit Teragram;

	/** Zeptomole per litre is a unit of amount of substance concentration defined as zeptomole divided by litre. */
	public static Unit ZeptomolePerLitre;

	/** The parsec is a unit of length defined as 3.08567802e16 metre. */
	public static Unit Parsec;

	public static Unit NewZealandDollar;

	public static Unit ReciprocalHour;

	public static Unit CubicDecametre;

	/** The metric horsepower is a unit of power defined as 7.354988e2 watt. */
	public static Unit HorsepowerMetric;

	/** The katal is a unit of catalytic activity defined as mole divided by second. */
	public static Unit Katal;

	/** The millimetre is a unit of length defined as 1.0e-3 metre. */
	public static Unit Millimetre;

	/** The zettaampere is a unit of electric current defined as 1.0e21 ampere. */
	public static Unit Zettaampere;

	public static Unit SingaporeDollar;

	/** The zeptcoulomb is a unit of electric charge defined as 1.0e-21 coulomb. */
	public static Unit Zeptocoulomb;

	/** The footcandle is a unit of illuminance defined as 1.076391e1 lux. */
	public static Unit Footcandle;

	public static Unit Gigatesla;

	/** The teragray is a unit of absorbed dose defined as 1.0e12 gray. */
	public static Unit Teragray;

	/** The picohertz is a unit of frequency defined as 1.0e-12 hertz. */
	public static Unit Picohertz;

	public static Unit SquareGigametre;

	public static Unit MicrosecondTime;

	public static Unit PascalSecondTimeSquareMetre;

	public static Unit Femtosiemens;

	/** The kayser is a unit of wavenumber defined as 100 reciprocal metre. */
	public static Unit Kayser;

	public static Unit Gigaohm;

	/** The steradian is a unit of solid angle defined as the solid angle subtended at the center of a sphere by a portion of the surface of the sphere that has an area equal to the square of the radius of the sphere. */
	public static Unit Steradian;

	/** The torr is a unit of pressure defined as 1.333224e2 pascal. */
	public static Unit Torr;

	/** The yoctogray is a unit of absorbed dose defined as 1.0e-24 gray. */
	public static Unit Yoctogray;

	/** Gram per millilitre is a unit of density defined as gram divided by millilitre. */
	public static Unit GramPerMillilitre;

	/** The Imperial gallon is a unit of volume defined as 4.54609e-3 cubic metre. */
	public static Unit GallonImperial;

	public static Unit Attonewton;

	/** The centimetre of mercury is a unit of pressure defined as 1.0e-2 metre of mercury. */
	public static Unit CentimetreOfMercury;

	public static Unit Gibibyte;

	/** Unit one is a unit of dimension one. */
	public static Unit One;

	/** Hectometre per second is a unit of speed defined as hectometre divided by second. */
	public static Unit HectometrePerSecondTime;

	/** Ampere per watt is a unit of responsivity. */
	public static Unit AmperePerWatt;

	public static Unit Yoctowatt;

	public static Unit CubicMetrePerSecondTime;

	/** The gauss is a unit of magnetic flux density defined as 1.0e-4 tesla. */
	public static Unit Gauss;

	public static Unit Microradian;

	public static Unit Petapascal;

	public static Unit Teravolt;

	/** Mole per microlitre is a unit of amount of substance concentration defined as mole divided by microlitre. */
	public static Unit MolePerMicrolitre;

	public static Unit Attoweber;

	/** Femtogram per litre is a unit of density defined as femtogram divided by litre. */
	public static Unit FemtogramPerLitre;

	/** The International Table calorie is a unit of energy defined as 4.1868 joule. */
	public static Unit CalorieInternationalTable;

	public static Unit MetreKilogramPerSecondTimeSquared;

	/** The gram is a unit of mass defined as 1.0e-3 kilogram. */
	public static Unit Gram;

	public static Unit SquareMetreKelvinPerWatt;

	/** The attomolair is a unit of amount of substance concentration defined as 1.0e-18 molair. */
	public static Unit Attomolair;

	/** The hectokelvin is a unit of thermodynamic temperature defined as 1.0e2 kelvin. */
	public static Unit Hectokelvin;

	/** The terakatal is a unit of catalytic activity defined as 1.0e12 katal. */
	public static Unit Terakatal;

	/** The zepthertz is a unit of frequency defined as 1.0e-21 hertz. */
	public static Unit Zeptohertz;

	public static Unit Decavolt;

	/** Gram per decalitre is a unit of density defined as gram divided by decalitre. */
	public static Unit GramPerDecalitre;

	/** Volt per watt is a unit of responsivity. */
	public static Unit VoltPerWatt;

	/** Yoctometre per second squared is a unit of acceleration defined as yoctometre divided by second squared. */
	public static Unit YoctometrePerSecondTimeSquared;

	/** The nanocandela is a unit of luminous intensity defined as 1.0e-9 candela. */
	public static Unit Nanocandela;

	public static Unit Gigavolt;

	public static Unit Zeptowatt;

	public static Unit Yoctomole;

	public static Unit Zeptopascal;

	/** The exaampere is a unit of electric current defined as 1.0e18 ampere. */
	public static Unit Exaampere;

	/** Mole per litre is a unit of amount of substance concentration defined as mole divided by litre. */
	public static Unit MolePerLitre;

	public static Unit WattPerHertz;

	/** The hectohertz is a unit of frequency defined as 1.0e2 hertz. */
	public static Unit Hectohertz;

	/** Ampere per square metre is a unit of current density defined as ampere divided by square metre. */
	public static Unit AmperePerSquareMetre;

	public static Unit SquareMetreSecondTime;

	/** The terabecquerel is a unit of activity defined as 1.0e12 becquerel. */
	public static Unit Terabecquerel;

	/** The amount of stellar mass created per cubic kiloparsec in each billion years. */
	public static Unit SolarMassPerGigayearCubicKiloparsec;

	public static Unit MolePerExametre;

	public static Unit KilojoulePerHectogram;

	public static Unit MillisecondTimeSquared;

	public static Unit MilligramPerKilogram;

	/** The decicandela is a unit of luminous intensity defined as 1.0e-1 candela. */
	public static Unit Decicandela;

	public static Unit MolePerMillimetre;

	/** The decagram is a unit of mass defined as 1.0e1 gram. */
	public static Unit Decagram;

	/** Yoctomole per litre is a unit of amount of substance concentration defined as yoctomole divided by litre. */
	public static Unit YoctomolePerLitre;

	public static Unit CandelaPerSquareCentimetre;

	public static Unit Yoctovolt;

	/** The gigagray is a unit of absorbed dose defined as 1.0e9 gray. */
	public static Unit Gigagray;

	/** The US gallon is a unit of volume defined as 3.785412e-3 cubic metre. */
	public static Unit GallonUS;

	public static Unit Exalitre;

	/** The kilogray is a unit of absorbed dose defined as 1.0e3 gray. */
	public static Unit Kilogray;

	public static Unit CoulombPerKilogram;

	/** The mole is a unit of amount of substance defined as the amount of substance of a system that contains as many elementary entities as there are atoms in 0.012 kilogram of carbon 12. */
	public static Unit Mole;

	/** The gigagram is a unit of mass defined as 1.0e9 gram. */
	public static Unit Gigagram;

	public static Unit TerasecondTime;

	/** The British horsepower is a unit of power defined as 7.4570e2 watt. */
	public static Unit HorsepowerBritish;

	/** The abfarad is a unit of capacitance defined as 1.0e9 farad. */
	public static Unit Abfarad;

	/** The gray is a unit of absorbed dose defined as joule divided by kilogram = square metre divided by second squared. */
	public static Unit Gray;

	/** The exafarad is a unit of capacitance defined as 1.0e18 farad. */
	public static Unit Exafarad;

	/** The petahertz is a unit of frequency defined as 1.0e15 hertz. */
	public static Unit Petahertz;

	/** Centimole per litre is a unit of amount of substance concentration defined as centimole divided by litre. */
	public static Unit CentimolePerLitre;

	public static Unit ZettamolePerMetre;

	/** The kilogram is a unit of mass defined as the mass of the international prototype of the kilogram. */
	public static Unit Kilogram;

	/** The kilohertz is a unit of frequency defined as 1.0e3 hertz. */
	public static Unit Kilohertz;

	/** Kilometre per second is a unit of speed defined as kilometre divided by second. */
	public static Unit KilometrePerSecondTime;

	/** The decacandela is a unit of luminous intensity defined as 1.0e1 candela. */
	public static Unit Decacandela;

	public static Unit RussianRuble;

	/** Gram per litre is a unit of density defined as gram divided by litre. */
	public static Unit GramPerLitre;

	/** The millifarad is a unit of capacitance defined as 1.0e-3 farad. */
	public static Unit Millifarad;

	/** Wordt gebruikt als hoek (360Â°=864000) voor o.a. rechte klimming. De s wordt meestal als superscript achter de waarde gezet. Zoals in 5h34m12s09. Vaak wordt de fractie in seconden zonder punt geschreven, de s wordt als afscheiding gebruikt (http://en.wikipedia.org/wiki/Right_ascension). */
	public static Unit SecondHourAngle;

	public static Unit GramPerSquareMetre;

	/** The gal is a unit of acceleration defined as centimetre per second (time) squared. */
	public static Unit Gal;

	/** The kip is a unit of force defined as 4.448222e3 newton. */
	public static Unit Kip;

	public static Unit Kilotesla;

	/** The centicandela is a unit of luminous intensity defined as 1.0e-2 candela. */
	public static Unit Centicandela;

	/** The hectohenry is a unit of inductance defined as 1.0e2 henry. */
	public static Unit Hectohenry;

	public static Unit Microlitre;

	public static Unit YoctosecondTimeSquared;

	public static Unit Centinewton;

	public static Unit Zeptomole;

	/** The megabecquerel is a unit of activity defined as 1.0e6 becquerel. */
	public static Unit Megabecquerel;

	public static Unit Microwatt;

	/** The decagray is a unit of absorbed dose defined as 1.0e1 gray. */
	public static Unit Decagray;

	/** The kiloelectronvolt is a unit of energy defined as 1.0e3 electronvolt. */
	public static Unit Kiloelectronvolt;

	public static Unit MegasecondTime;

	/** Gram per femtolitre is a unit of density defined as gram divided by femtolitre. */
	public static Unit GramPerFemtolitre;

	/** The watt is a unit of power defined as joule divided by second = newton times metre divided by second = volt times ampere = kilogram times square metre divided by second to the power 3. */
	public static Unit Watt;

	/** The millijoule is a unit of energy defined as 1.0e-3 joule. */
	public static Unit Millijoule;

	/** The mean calorie is a unit of energy defined as 4.19002 joule. */
	public static Unit CalorieMean;

	/** Metre per nanosecond is a unit of speed defined as metre divided by nanosecond. */
	public static Unit MetrePerNanosecondTime;

	public static Unit Decamole;

	/** Petamole per litre is a unit of amount of substance concentration defined as petamole divided by litre. */
	public static Unit PetamolePerLitre;

	public static Unit Yobibyte;

	/** The decibar is a unit of pressure defined as 1.0e-1 bar. */
	public static Unit Decibar;

	/** The microgray is a unit of absorbed dose defined as 1.0e-6 gray. */
	public static Unit Microgray;

	/** The zeptgram is a unit of mass defined as 1.0e-21 gram. */
	public static Unit Zeptogram;

	public static Unit Zettanewton;

	/** Mole per nanolitre is a unit of amount of substance concentration defined as mole divided by nanolitre. */
	public static Unit MolePerNanolitre;

	/** The yoctogram is a unit of mass defined as 1.0e-24 gram. */
	public static Unit Yoctogram;

	/** Eenheid waarmee de helderheid van sterren wordt aangegeven. Meestal wordt het symbool niet aangeduid (http://en.wikipedia.org/wiki/Magnitude_(astronomy)). */
	public static Unit Magnitude;

	public static Unit Decilux;

	/** Gram per teralitre is a unit of density defined as gram divided by teralitre. */
	public static Unit GramPerTeralitre;

	public static Unit SteradianSquareMetre;

	/** Yottamole per litre is a unit of amount of substance concentration defined as yottamole divided by litre. */
	public static Unit YottamolePerLitre;

	public static Unit Gigabit;

	/** The millibar is a unit of pressure defined as 1.0e-3 bar. */
	public static Unit Millibar;

	public static Unit MillinewtonMetre;

	/** The mil (plane angle) is a unit of plane angle defined as 9.817477e-4 radian. */
	public static Unit MilPlaneAngle;

	/** The sidereal day is a unit of time defined as 8.616409e4 second. */
	public static Unit DaySidereal;

	public static Unit Millilux;

	public static Unit MolePerKilogram;

	/** Kilometre per hour is a unit of speed defined as kilometre divided by hour. */
	public static Unit KilometrePerHour;

	public static Unit YottasecondTimeSquared;

	public static Unit Gigamole;

	public static Unit Decipascal;

	public static Unit Yoctosteradian;

	public static Unit Femtosteradian;

	public static Unit CubicZettametre;

	public static Unit Megatesla;

	/** The examolair is a unit of amount of substance concentration defined as 1.0e18 molair. */
	public static Unit Examolair;

	/** The percent is a unit of dimension one defined as 1/100. */
	public static Unit Percent;

	/** Mole per zettalitre is a unit of amount of substance concentration defined as mole divided by zettalitre. */
	public static Unit MolePerZettalitre;

	/** The picohenry is a unit of inductance defined as 1.0e-12 henry. */
	public static Unit Picohenry;

	public static Unit KilogramPerPascalSecondTimeSquareMetre;

	/** The slug is a unit of mass defined as 1.459390e1 kilogram. */
	public static Unit Slug;

	public static Unit Decaweber;

	public static Unit Micromole;

	/** Gram per attolitre is a unit of density defined as gram divided by attolitre. */
	public static Unit GramPerAttolitre;

	/** The zettajoule is a unit of energy defined as 1.0e21 joule. */
	public static Unit Zettajoule;

	/** Picometre per second is a unit of speed defined as picometre divided by second. */
	public static Unit PicometrePerSecondTime;

	/** The zettafarad is a unit of capacitance defined as 1.0e21 farad. */
	public static Unit Zettafarad;

	/** The zettametre is a unit of length defined as 1.0e21 metre. */
	public static Unit Zettametre;

	public static Unit CubicExametre;

	/** The zeptgray is a unit of absorbed dose defined as 1.0e-21 gray. */
	public static Unit Zeptogray;

	public static Unit Decilitre;

	public static Unit MolePerCentimetre;

	public static Unit NorwegianKrone;

	/** The US gill is a unit of volume defined as 1.182941e-4 cubic metre. */
	public static Unit GillUS;

	public static Unit Nanoradian;

	public static Unit ReciprocalCubicParsec;

	public static Unit KilogramSquareMetre;

	/** Petagram per litre is a unit of density defined as petagram divided by litre. */
	public static Unit PetagramPerLitre;

	public static Unit DeltaA450;

	/** Mole per petalitre is a unit of amount of substance concentration defined as mole divided by petalitre. */
	public static Unit MolePerPetalitre;

	/** The coulomb is a unit of electric charge defined as ampere times second = farad times volt. */
	public static Unit Coulomb;

	public static Unit CubicTerametre;

	/** The micron is a unit of length defined as 1.0e-6 metre. */
	public static Unit Micron;

	public static Unit AmperePerVolt;

	public static Unit Decapascal;

	public static Unit GigasecondTime;

	public static Unit Yoctoweber;

	public static Unit RadianPerSecondTimeSquared;

	/** The US therm is a unit of energy defined as 1.054804e8 joule. */
	public static Unit ThermUS;

	public static Unit Decilumen;

	public static Unit Yottaweber;

	/** The exacandela is a unit of luminous intensity defined as 1.0e18 candela. */
	public static Unit Exacandela;

	public static Unit ReciprocalSquareCentimetre;

	public static Unit CubicKiloparsec;

	public static Unit SquareMetreDay;

	public static Unit SquareCentimetre;

	/** The degree RÃ©aumur is a unit of temperature defined as 1.25 kelvin. */
	public static Unit DegreeReaumur;

	/** The radian is a unit of plane angle defined as the plane angle subtended at the center of a circle by an arc that is equal in length to the radius of the circle. */
	public static Unit Radian;

	/** The hectocoulomb is a unit of electric charge defined as 1.0e2 coulomb. */
	public static Unit Hectocoulomb;

	/** Examole per litre is a unit of amount of substance concentration defined as examole divided by litre. */
	public static Unit ExamolePerLitre;

	public static Unit Centiweber;

	/** The microgram is a unit of mass defined as 1.0e-6 gram. */
	public static Unit Microgram;

	/** The exajoule is a unit of energy defined as 1.0e18 joule. */
	public static Unit Exajoule;

	/** Metre per yoctosecond squared is a unit of acceleration defined as metre divided by yoctosecond squared. */
	public static Unit MetrePerYoctosecondTimeSquared;

	/** The Ã¥ngstrÃ¶m is a unit of length defined as 1.0e-10 metre. The unit is often used for wavelengths of electromagnetic radiation or to express the sizes of atoms and molecules. */
	public static Unit Angstrom;

	public static Unit Yottanewton;

	public static Unit Milliweber;

	public static Unit DeltaA450PerSecondTimePerMilligram;

	public static Unit WattSquareMetre;

	/** The yottabecquerel is a unit of activity defined as 1.0e24 becquerel. */
	public static Unit Yottabecquerel;

	/** The furlong is a unit of length defined as 201.168 metre. */
	public static Unit Furlong;

	public static Unit GigamolePerMetre;

	public static Unit Gigabyte;

	public static Unit WeberPerAmpere;

	public static Unit Petalux;

	public static Unit CubicCentimetre;

	public static Unit SquareYoctometre;

	public static Unit MoleMicrometreReciprocalSquareCentimetreReciprocalSecondTimeReciprocalAtmosphereStandard;

	/** The yottakatal is a unit of catalytic activity defined as 1.0e24 katal. */
	public static Unit Yottakatal;

	public static Unit Femtoradian;

	/** Metre per attosecond is a unit of speed defined as metre divided by attosecond. */
	public static Unit MetrePerAttosecondTime;

	/** The yottamolair is a unit of amount of substance concentration defined as 1.0e24 molair. */
	public static Unit Yottamolair;

	public static Unit SquareMillimetre;

	public static Unit SquareTerametre;

	public static Unit SecondTimePerDay;

	public static Unit Zettatesla;

	/** Solar luminosity is a unit used in astronomy to denote stellar or galactic radiant fluxes (http://en.wikipedia.org/wiki/Solar_luminosity). */
	public static Unit SolarLuminosity;

	/** The megajoule is a unit of energy defined as 1.0e6 joule. */
	public static Unit Megajoule;

	/** The 0 Â°C perm is a unit ofpermeance defined as 5.72135e-11 kilogram per pascal second (time) square metre. */
	public static Unit Perm0C;

	/** Metre per zettasecond is a unit of speed defined as metre divided by zettasecond. */
	public static Unit MetrePerZettasecondTime;

	/** The US survey foot is a unit of length defined as 3.048006e-1 metre. */
	public static Unit FootUSSurvey;

	public static Unit GramMetreToThePower2ReciprocalMetre;

	/** Centigram per litre is a unit of density defined as centigram divided by litre. */
	public static Unit CentigramPerLitre;

	public static Unit Microvolt;

	/** The yard is a unit of length defined as 9.144e-1 metre. */
	public static Unit Yard;

	public static Unit KilocolonyFormingUnit;

	/** The yoctokatal is a unit of catalytic activity defined as 1.0e-24 katal. */
	public static Unit Yoctokatal;

	/** Exagram per litre is a unit of density defined as exagram divided by litre. */
	public static Unit ExagramPerLitre;

	public static Unit Yottaohm;

	/** Gigagram per litre is a unit of density defined as gigagram divided by litre. */
	public static Unit GigagramPerLitre;

	public static Unit JoulePerKilogram;

	/** The megametre is a unit of length defined as 1.0e6 metre. */
	public static Unit Megametre;

	/** The megaampere is a unit of electric current defined as 1.0e6 ampere. */
	public static Unit Megaampere;

	public static Unit TonnePerCubicMetre;

	/** The ton of TNT is a unit of energy defined as 4.184e9 joule. */
	public static Unit TonOfTNT;

	/** The hectare is a unit of area defined as 1.0e2 are. */
	public static Unit Hectare;

	public static Unit Terawatt;

	public static Unit Picoohm;

	/** The centidegree Celsius is a unit of temperature defined as 1.0e-2 degree Celsius. */
	public static Unit CentidegreeCelsius;

	/** The shannon is a unit of information capacity defined as 1 bit. */
	public static Unit Shannon;

	/** The picobecquerel is a unit of activity defined as 1.0e-12 becquerel. */
	public static Unit Picobecquerel;

	/** The decakatal is a unit of catalytic activity defined as 1.0e1 katal. */
	public static Unit Decakatal;

	public static Unit Nanoohm;

	/** Gram per centilitre is a unit of density defined as gram divided by centilitre. */
	public static Unit GramPerCentilitre;

	/** The gamma is a unit of magnetic flux density defined as 1.0e-9 tesla. */
	public static Unit Gamma;

	public static Unit Teraweber;

	/** Teramole per litre is a unit of amount of substance concentration defined as teramole divided by litre. */
	public static Unit TeramolePerLitre;

	public static Unit Exanewton;

	/** The poundal is a unit of force defined as 1.382550e-1 newton. */
	public static Unit Poundal;

	/** The zeptbecquerel is a unit of activity defined as 1.0e-21 becquerel. */
	public static Unit Zeptobecquerel;

	/** Mole per attolitre is a unit of amount of substance concentration defined as mole divided by attolitre. */
	public static Unit MolePerAttolitre;

	public static Unit NanounifiedAtomicMassUnit;

	public static Unit VoltSecondTime;

	/** The attoampere is a unit of electric current defined as 1.0e-18 ampere. */
	public static Unit Attoampere;

	/** The gigaparsec is a unit of length defined as 1.0e9 parsec. Gebruikt voor de afstand op de schaal van het heelal. */
	public static Unit Gigaparsec;

	public static Unit SquareMetrePerGram;

	/** The gigametre is a unit of length defined as 1.0e9 metre. */
	public static Unit Gigametre;

	/** The nanokatal is a unit of catalytic activity defined as 1.0e-9 katal. */
	public static Unit Nanokatal;

	/** The zepthenry is a unit of inductance defined as 1.0e-21 henry. */
	public static Unit Zeptohenry;

	/** Exametre per second squared is a unit of acceleration defined as exametre divided by second squared. */
	public static Unit ExametrePerSecondTimeSquared;

	public static Unit KilogramPerSquareMetre;

	public static Unit MolePerDecimetre;

	public static Scale KelvinScale;

	/** Gram per cubic metre is a unit of density defined as gram divided by cubic metre. */
	public static Unit GramPerCubicMetre;

	/** The fathom is a unit of length defined as 1.828804 metre. */
	public static Unit Fathom;

	public static Unit Meganewton;

	public static Unit Exabyte;

	public static Unit Micropascal;

	public static Unit Decaohm;

	public static Unit Gigapascal;

	/** The statampere is a unit of electric current defined as 3.335641e-10 ampere. */
	public static Unit Statampere;

	public static Unit Centisievert;

	/** Metre per gigasecond is a unit of speed defined as metre divided by gigasecond. */
	public static Unit MetrePerGigasecondTime;

	public static Unit Kilopascal;

	/** The 20 Â°C calorie is a unit of energy defined as 4.18190 joule. */
	public static Unit Calorie20C;

	/** The kiloparsec is a unit of length defined as 1.0e3 parsec. Gebruikt voor afstanden op de schaal van het melkwegstelsel. */
	public static Unit Kiloparsec;

	/** The second (plane angle) is a unit of plane angle defined as 4.848137e-6 radian. */
	public static Unit SecondPlaneAngle;

	/** Gigametre per second squared is a unit of acceleration defined as gigametre divided by second squared. */
	public static Unit GigametrePerSecondTimeSquared;

	/** The attokelvin is a unit of temperature defined as 1.0e-18 kelvin. */
	public static Unit Attokelvin;

	public static Unit HectosecondTime;

	public static Unit Hectolumen;

	/** The avoirdupois ounce is a unit of mass defined as 2.834952e-2 kilogram. */
	public static Unit OunceAvoirdupois;

	public static Unit MolePerPicometre;

	public static Unit Picolumen;

	public static Unit Teramole;

	/** Zeptogram per litre is a unit of density defined as zeptogram divided by litre. */
	public static Unit ZeptogramPerLitre;

	/** Metre per yottasecond squared is a unit of acceleration defined as metre divided by yottasecond squared. */
	public static Unit MetrePerYottasecondTimeSquared;

	public static Unit LitrePerMole;

	/** The decihertz is a unit of frequency defined as 1.0e-1 hertz. */
	public static Unit Decihertz;

	/** The gigafarad is a unit of capacitance defined as 1.0e9 farad. */
	public static Unit Gigafarad;

	public static Unit Microlumen;

	public static Unit Yottabit;

	public static Unit VoltPerAmpere;

	/** The Didot point is a unit of length defined as 0.3759e-3 metre. */
	public static Unit PointDidot;

	/** Attometre per second squared is a unit of acceleration defined as attometre divided by second squared. */
	public static Unit AttometrePerSecondTimeSquared;

	/** The megakelvin is a unit of thermodynamic temperature defined as 1.0e6 kelvin. */
	public static Unit Megakelvin;

	/** The centimolair is a unit of amount of substance concentration defined as 1.0e-2 molair. */
	public static Unit Centimolair;

	public static Unit Kilotonne;

	public static Unit Petabyte;

	public static Unit Decisiemens;

	/** The gigajoule is a unit of energy defined as 1.0e9 joule. */
	public static Unit Gigajoule;

	/** The hartley is a unit of information capacity defined as 3.321928095 bit. */
	public static Unit Hartley;

	public static Unit Exalux;

	/** The bushel is a unit of volume defined as 3.523907e-2 cubic metre. */
	public static Unit Bushel;

	public static Unit Picopascal;

	/** Metre per millisecond squared is a unit of acceleration defined as metre divided by millisecond squared. */
	public static Unit MetrePerMillisecondTimeSquared;

	public static Unit FemtosecondTimeSquared;

	public static Unit Centisiemens;

	/** The petahenry is a unit of inductance defined as 1.0e15 henry. */
	public static Unit Petahenry;

	/** The cicero is a unit of length defined as 12 point (Didot). */
	public static Unit Cicero;

	public static Unit SquareMegametre;

	/** The stere is a unit of volume defined as cubic metre. */
	public static Unit Stere;

	/** The rad is a unit of absorbed dose defined as 1.0e-2 gray. */
	public static Unit Rad;

	public static Unit Kilobyte;

	/** Metre per centisecond is a unit of speed defined as metre divided by centisecond. */
	public static Unit MetrePerCentisecondTime;

	/** The pound-force is a unit of force defined as 4.448222 newton. */
	public static Unit PoundForce;

	/** The register ton is a unit of volume defined as 2.831658 cubic metre. */
	public static Unit TonRegister;

	public static Unit GigayearCubicKiloparsec;

	public static Unit Femtolux;

	public static Unit InternationalUnit;



    /**
     * Initializes the set by creating all units and scales in the set using the specified factory.
     * @param factory The factory to create units and scales.
     */
    @Override
    public void initialize(UnitAndScaleFactory factory) {
        if(Metre!=null) return; // has already been initialised! 
		Metre = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/metre", "metre", "m", nl.wur.fbr.om.model.dimensions.SIBaseDimension.LENGTH);
		Metre.addAlternativeName("meter","nl");
		Gram = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/gram", "gram", "g" );
		Kilogram = factory.createPrefixedBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilogram","kilogram","kg", nl.wur.fbr.om.model.dimensions.SIBaseDimension.MASS,(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		MetreKilogram = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/metre_kilogram","metre kilogram","m kg",Metre, Kilogram);
		MetreKilogram.addAlternativeName("meter kilogram","nl");
		MetreKilogram.addAlternativeSymbol("mÂ·kg");
		SecondTime = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/second-time", "second", "s", nl.wur.fbr.om.model.dimensions.SIBaseDimension.TIME);
		SecondTime.addAlternativeName("seconde","nl");
		SecondTime.addAlternativeName("sec","");
		SecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/second-time_squared","second squared","s2",SecondTime, 2.0);
		SecondTimeSquared.addAlternativeName("seconde kwadraat","nl");
		MetreKilogramPerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_kilogram_per_second-time_squared","metre kilogram per second squared","m kg/s2",MetreKilogram, SecondTimeSquared);
		MetreKilogramPerSecondTimeSquared.addAlternativeName("meter kilogram per seconde kwadraat","nl");
		MetreKilogramPerSecondTimeSquared.addAlternativeSymbol("m kg s-2");
		MetreKilogramPerSecondTimeSquared.addAlternativeSymbol("mÂ·kg/s2");
		MetreKilogramPerSecondTimeSquared.addAlternativeSymbol("mÂ·kgÂ·s-2");
		Newton = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/newton", "newton", "N", MetreKilogramPerSecondTimeSquared, 1.0 );
		NewtonMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/newton_metre","newton metre","N m",Newton, Metre);
		NewtonMetre.addAlternativeName("newton meter","nl");
		NewtonMetre.addAlternativeSymbol("NÂ·m");
		Joule = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/joule", "joule", "J", NewtonMetre, 1.0 );
		JoulePerKilogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/joule_per_kilogram","joule per kilogram","J/kg",Joule, Kilogram);
		JoulePerKilogram.addAlternativeSymbol("J kg-1");
		JoulePerKilogram.addAlternativeSymbol("JÂ·kg-1");
		Sievert = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/sievert", "sievert", "Sv", JoulePerKilogram, 1.0 );
		Decasievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decasievert","decasievert","daSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		JoulePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/joule_per_second-time","joule per second","J/s",Joule, SecondTime);
		JoulePerSecondTime.addAlternativeName("joule per seconde","nl");
		JoulePerSecondTime.addAlternativeSymbol("J s-1");
		JoulePerSecondTime.addAlternativeSymbol("JÂ·s-1");
		Watt = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/watt", "watt", "W", JoulePerSecondTime, 1.0 );
		Ampere = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/ampere", "ampere", "A", nl.wur.fbr.om.model.dimensions.SIBaseDimension.ELECTRIC_CURRENT);
		Ampere.addAlternativeName("ampÃ¨re","nl");
		WattPerAmpere = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_ampere","watt per ampere","W/A",Watt, Ampere);
		WattPerAmpere.addAlternativeName("watt per ampÃ¨re","nl");
		WattPerAmpere.addAlternativeSymbol("W A-1");
		WattPerAmpere.addAlternativeSymbol("WÂ·A-1");
		Volt = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/volt", "volt", "V", WattPerAmpere, 1.0 );
		Statvolt = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/statvolt", "statvolt", "statV", Volt, 299.7925 );
		Megametre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megametre","megametre","Mm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Megametre.addAlternativeName("megameter","nl");
		MegametrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/megametre_per_second-time","megametre per second","Mm/s",Megametre, SecondTime);
		MegametrePerSecondTime.addAlternativeName("megameter per seconde","nl");
		MegametrePerSecondTime.addAlternativeSymbol("Mm s-1");
		MegametrePerSecondTime.addAlternativeSymbol("MmÂ·s-1");
		ReciprocalSecondTime = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_second-time","reciprocal second","s-1",SecondTime, -1.0);
		ReciprocalSecondTime.addAlternativeName("omgekeerde seconde","nl");
		Hertz = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/hertz", "hertz", "Hz", ReciprocalSecondTime, 1.0 );
		Attohertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attohertz","attohertz","aHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Gray = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/gray", "gray", "Gy", JoulePerKilogram, 1.0 );
		Petagray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petagray","petagray","PGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Terametre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terametre","terametre","Tm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Terametre.addAlternativeName("terameter","nl");
		Terametre.addAlternativeName("10^9 km","");
		YottasecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottasecond-time","yottasecond","Ys",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		YottasecondTime.addAlternativeName("yottaseconde","nl");
		MetrePerYottasecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_yottasecond-time","metre per yottasecond","m/Ys",Metre, YottasecondTime);
		MetrePerYottasecondTime.addAlternativeName("meter per yottaseconde","nl");
		MetrePerYottasecondTime.addAlternativeSymbol("m Ys-1");
		MetrePerYottasecondTime.addAlternativeSymbol("mÂ·Ys-1");
		Yoctosievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctosievert","yoctosievert","ySv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		AmperePerVolt = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/ampere_per_volt","ampere per volt","A/V",Ampere, Volt);
		AmperePerVolt.addAlternativeName("ampÃ¨re per volt","nl");
		AmperePerVolt.addAlternativeSymbol("A V-1");
		AmperePerVolt.addAlternativeSymbol("AÂ·V-1");
		Siemens = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/siemens", "siemens", "S", AmperePerVolt, 1.0 );
		Gigasiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigasiemens","gigasiemens","GS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		DecasecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decasecond-time","decasecond","das",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		DecasecondTime.addAlternativeName("decaseconde","nl");
		DecasecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/decasecond-time_squared","decasecond squared","das2",DecasecondTime, 2.0);
		DecasecondTimeSquared.addAlternativeName("decaseconde kwadraat","nl");
		MicrosecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microsecond-time","microsecond","Î¼s",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		MicrosecondTime.addAlternativeName("microseconde","nl");
		MicrosecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/microsecond-time_squared","microsecond squared","Î¼s2",MicrosecondTime, 2.0);
		MicrosecondTimeSquared.addAlternativeName("microseconde kwadraat","nl");
		MetrePerMicrosecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_microsecond-time_squared","metre per microsecond squared","m/Î¼s2",Metre, MicrosecondTimeSquared);
		MetrePerMicrosecondTimeSquared.addAlternativeName("meter per microseconde kwadraat","nl");
		MetrePerMicrosecondTimeSquared.addAlternativeSymbol("m Î¼s-2");
		MetrePerMicrosecondTimeSquared.addAlternativeSymbol("mÂ·Î¼s-2");
		Jansky = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/jansky", "jansky", "Jy", null);
		Bit = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/bit", "bit", "bit", null);
		Zebibit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zebibit","zebibit","Zibit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.BinaryPrefix.ZEBI);
		OunceApothecaries = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/ounce-apothecaries", "ounce (apothecaries')", "oz (ap.)", Kilogram, 0.03110348 );
		OunceApothecaries.addAlternativeSymbol("oz (apoth)");
		AmperePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/ampere_per_metre","ampere per metre","A/m",Ampere, Metre);
		AmperePerMetre.addAlternativeName("ampÃ¨re per meter","nl");
		AmperePerMetre.addAlternativeSymbol("A m-1");
		AmperePerMetre.addAlternativeSymbol("AÂ·m-1");
		Oersted = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/oersted", "oersted", "Oe", AmperePerMetre, 79.57747 );
		VoltSecondTime = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/volt_second-time","volt second","V s",Volt, SecondTime);
		VoltSecondTime.addAlternativeName("volt seconde","nl");
		VoltSecondTime.addAlternativeSymbol("VÂ·s");
		Weber = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/weber", "weber", "Wb", VoltSecondTime, 1.0 );
		WeberPerAmpere = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/weber_per_ampere","weber per ampere","Wb/A",Weber, Ampere);
		WeberPerAmpere.addAlternativeName("weber per ampÃ¨re","nl");
		WeberPerAmpere.addAlternativeSymbol("Wb A-1");
		WeberPerAmpere.addAlternativeSymbol("WbÂ·A-1");
		Henry = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/henry", "henry", "H", WeberPerAmpere, 1.0 );
		Yoctohenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctohenry","yoctohenry","yH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Gigaweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigaweber","gigaweber","GWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Zettagram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettagram","zettagram","ZG",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		CubicMetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_metre","cubic metre","m3",Metre, 3.0);
		CubicMetre.addAlternativeName("kubieke meter","nl");
		Litre = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/litre", "litre", "l", CubicMetre, 0.001 );
		Litre.addAlternativeName("liter","nl");
		Litre.addAlternativeSymbol("L");
		ZettagramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/zettagram_per_litre","zettagram per litre","Zg/l",Zettagram, Litre);
		ZettagramPerLitre.addAlternativeName("zettagram per liter","nl");
		ZettagramPerLitre.addAlternativeSymbol("Zg l-1");
		ZettagramPerLitre.addAlternativeSymbol("ZgÂ·l-1");
		Microhertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microhertz","microhertz","Î¼Hz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Yottajoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottajoule","yottajoule","YJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		MegasecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megasecond-time","megasecond","Ms",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		MegasecondTime.addAlternativeName("megaseconde","nl");
		MegasecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/megasecond-time_squared","megasecond squared","Ms2",MegasecondTime, 2.0);
		MegasecondTimeSquared.addAlternativeName("megaseconde kwadraat","nl");
		MetrePerMegasecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_megasecond-time_squared","metre per megasecond squared","m/Ms2",Metre, MegasecondTimeSquared);
		MetrePerMegasecondTimeSquared.addAlternativeName("meter per megaseconde kwadraat","nl");
		MetrePerMegasecondTimeSquared.addAlternativeSymbol("m Ms-2");
		MetrePerMegasecondTimeSquared.addAlternativeSymbol("mÂ·Ms-2");
		Mole = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/mole", "mole", "mol", nl.wur.fbr.om.model.dimensions.SIBaseDimension.AMOUNT_OF_SUBSTANCE);
		Mole.addAlternativeName("mol","nl");
		MolePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_second-time","mole per second","mol/s",Mole, SecondTime);
		MolePerSecondTime.addAlternativeName("mol per seconde","nl");
		MolePerSecondTime.addAlternativeSymbol("mol s-1");
		MolePerSecondTime.addAlternativeSymbol("molÂ·s-1");
		Katal = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/katal", "katal", "kat", MolePerSecondTime, 1.0 );
		Gigakatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigakatal","gigakatal","Gkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Kelvin = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/kelvin", "kelvin", "K", nl.wur.fbr.om.model.dimensions.SIBaseDimension.THERMODYNAMIC_TEMPERATURE);
		Decakelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decakelvin","decakelvin","daK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Megasiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megasiemens","megasiemens","MS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Petaampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petaampere","petaampere","PA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Petaampere.addAlternativeName("petaampÃ¨re","nl");
		Yoctolitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctolitre","yoctolitre","yl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Yoctolitre.addAlternativeName("yoctoliter","nl");
		GramPerYoctolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_yoctolitre","gram per yoctolitre","g/yl",Gram, Yoctolitre);
		GramPerYoctolitre.addAlternativeName("gram per yoctoliter","nl");
		GramPerYoctolitre.addAlternativeSymbol("g yl-1");
		GramPerYoctolitre.addAlternativeSymbol("gÂ·yl-1");
		Picokatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picokatal","picokatal","pkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Candela = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/candela", "candela", "cd", nl.wur.fbr.om.model.dimensions.SIBaseDimension.LUMINOUS_INTENSITY);
		SquareMetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_metre","square metre","m2",Metre, 2.0);
		SquareMetre.addAlternativeName("vierkante meter","nl");
		SquareMetrePerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_per_square_metre","square metre per square metre","m2/m2",SquareMetre, SquareMetre);
		SquareMetrePerSquareMetre.addAlternativeName("vierkante meter per vierkante meter","nl");
		SquareMetrePerSquareMetre.addAlternativeSymbol("m2 m-2");
		SquareMetrePerSquareMetre.addAlternativeSymbol("m2Â·m-2");
		Steradian = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/steradian", "steradian", "sr", SquareMetrePerSquareMetre, 1.0 );
		Steradian.addAlternativeName("steradiaal","nl");
		CandelaSteradian = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/candela_steradian","candela steradian","cd sr",Candela, Steradian);
		CandelaSteradian.addAlternativeName("candela steradiaal","nl");
		CandelaSteradian.addAlternativeSymbol("cdÂ·sr");
		Lumen = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/lumen", "lumen", "lm", CandelaSteradian, 1.0 );
		LumenPerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/lumen_per_square_metre","lumen per square metre","lm/m2",Lumen, SquareMetre);
		LumenPerSquareMetre.addAlternativeName("lumen per vierkante meter","nl");
		LumenPerSquareMetre.addAlternativeSymbol("lm m-2");
		LumenPerSquareMetre.addAlternativeSymbol("lmÂ·m-2");
		Lux = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/lux", "lux", "lx", LumenPerSquareMetre, 1.0 );
		Kilolux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilolux","kilolux","klx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		HectosecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectosecond-time","hectosecond","hs",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		HectosecondTime.addAlternativeName("hectoseconde","nl");
		HectosecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/hectosecond-time_squared","hectosecond squared","hs2",HectosecondTime, 2.0);
		HectosecondTimeSquared.addAlternativeName("hectoseconde kwadraat","nl");
		MetrePerHectosecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_hectosecond-time_squared","metre per hectosecond squared","m/hs2",Metre, HectosecondTimeSquared);
		MetrePerHectosecondTimeSquared.addAlternativeName("meter per hectoseconde kwadraat","nl");
		MetrePerHectosecondTimeSquared.addAlternativeSymbol("m hs-2");
		MetrePerHectosecondTimeSquared.addAlternativeSymbol("mÂ·hs-2");
		Picoweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picoweber","picoweber","pWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Decisievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decisievert","decisievert","dSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Micrometre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/micrometre","micrometre","Î¼m",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Micrometre.addAlternativeName("micrometer","nl");
		SquareMicrometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_micrometre","square micrometre","Î¼m2",Micrometre, 2.0);
		SquareMicrometre.addAlternativeName("vierkante micrometer","nl");
		Becquerel = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/becquerel", "becquerel", "Bq", ReciprocalSecondTime, 1.0 );
		Hectobecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectobecquerel","hectobecquerel","hBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Petagram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petagram","petagram","Pg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		CubicMegametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_megametre","cubic megametre","Mm3",Megametre, 3.0);
		CubicMegametre.addAlternativeName("kubieke megameter","nl");
		DecisecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decisecond-time","decisecond","ds",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		DecisecondTime.addAlternativeName("deciseconde","nl");
		WeberPerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/weber_per_square_metre","weber per square metre","Wb/m2",Weber, SquareMetre);
		WeberPerSquareMetre.addAlternativeName("weber per vierkante meter","nl");
		WeberPerSquareMetre.addAlternativeSymbol("Wb m-2");
		WeberPerSquareMetre.addAlternativeSymbol("WbÂ·m-2");
		Tesla = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/tesla", "tesla", "T", WeberPerSquareMetre, 1.0 );
		PoundAvoirdupois = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/pound-avoirdupois", "pound (avoirdupois)", "lb", Kilogram, 0.4535924 );
		Femtomole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtomole","femtomole","fmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Femtomole.addAlternativeName("femtomol","nl");
		FemtomolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/femtomole_per_metre","femtomole per metre","fmol/m",Femtomole, Metre);
		FemtomolePerMetre.addAlternativeName("femtomole per meter","nl");
		FemtomolePerMetre.addAlternativeSymbol("fm s-1");
		FemtomolePerMetre.addAlternativeSymbol("fmÂ·s-1");
		Kilolitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilolitre","kilolitre","kl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Kilolitre.addAlternativeName("kiloliter","nl");
		Yottametre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottametre","yottametre","Ym",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Yottametre.addAlternativeName("yottameter","nl");
		Exasievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exasievert","exasievert","ESv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		MolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_litre","mole per litre","mol/l",Mole, Litre);
		MolePerLitre.addAlternativeName("mole per liter","nl");
		MolePerLitre.addAlternativeSymbol("mol l-1");
		MolePerLitre.addAlternativeSymbol("molÂ·l-1");
		Molair = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/molair", "molair", "M", MolePerLitre, 1.0 );
		Petamolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petamolair","petamolair","PM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		NewtonPerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/newton_per_square_metre","newton per square metre","N/m2",Newton, SquareMetre);
		NewtonPerSquareMetre.addAlternativeName("newton per vierkante meter","nl");
		NewtonPerSquareMetre.addAlternativeSymbol("N m-2");
		NewtonPerSquareMetre.addAlternativeSymbol("NÂ·m-2");
		Pascal = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/pascal", "pascal", "Pa", NewtonPerSquareMetre, 1.0 );
		MetreOfMercury = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/metre_of_mercury", "metre of mercury", "m Hg", Pascal, 133.322 );
		MetreOfMercury.addAlternativeName("meter kwik","nl");
		MillimetreOfMercury = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millimetre_of_mercury","millimetre of mercury","mm Hg",(SingularUnit)MetreOfMercury, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		MillimetreOfMercury.addAlternativeName("millimeter kwik","nl");
		Nanolitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanolitre","nanolitre","nl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Nanolitre.addAlternativeName("nanoliter","nl");
		GramPerNanolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_nanolitre","gram per nanolitre","g/nl",Gram, Nanolitre);
		GramPerNanolitre.addAlternativeName("gram per nanoliter","nl");
		GramPerNanolitre.addAlternativeSymbol("g nl-1");
		GramPerNanolitre.addAlternativeSymbol("gÂ·nl-1");
		Inch = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/inch", "inch", "in", Metre, 0.0254 );
		Megabit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megabit","megabit","Mbit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		PicosecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picosecond-time","picosecond","ps",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		PicosecondTime.addAlternativeName("picoseconde","nl");
		Day = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/day", "day", "d", SecondTime, 86400.0 );
		Day.addAlternativeName("dag","nl");
		SquareMetrePerSquareMetreDay = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_per_square_metre_day","square metre per square metre day","m2/(m2 d)",SquareMetrePerSquareMetre, Day);
		SquareMetrePerSquareMetreDay.addAlternativeSymbol("m2 m-2 d-1");
		SquareMetrePerSquareMetreDay.addAlternativeSymbol("m2Â·m-2Â·d-1");
		Nanopascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanopascal","nanopascal","nPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Tonne = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/tonne", "tonne", "t", Kilogram, 1000.0 );
		Tonne.addAlternativeName("ton","nl");
		Are = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/are", "are", "a", SquareMetre, 100.0 );
		Hectare = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectare","hectare","ha",(SingularUnit)Are, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		TonnePerHectare = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/tonne_per_hectare","tonne per hectare","t/ha",Tonne, Hectare);
		TonnePerHectare.addAlternativeSymbol("t ha-1");
		TonnePerHectare.addAlternativeSymbol("tÂ·ha-1");
		Megasievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megasievert","megasievert","MSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Hectolitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectolitre","hectolitre","hl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Hectolitre.addAlternativeName("hectoliter","nl");
		Hectometre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectometre","hectometre","hm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Hectometre.addAlternativeName("hectometer","nl");
		HectometrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/hectometre_per_second-time_squared","hectometre per second squared","hm/s2",Hectometre, SecondTimeSquared);
		HectometrePerSecondTimeSquared.addAlternativeName("hectometer per seconde kwadraat","nl");
		HectometrePerSecondTimeSquared.addAlternativeSymbol("hm s-2");
		HectometrePerSecondTimeSquared.addAlternativeSymbol("hmÂ·s-2");
		BritishThermalUnitInternationalTable = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/British_thermal_unit-International_Table", "British thermal unit (International Table)", "Btu_IT", Joule, 1055.056 );
		DegreeCelsius = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius", "degree Celsius", "Â°C", Kelvin, 1.0 );
		DegreeCelsius.addAlternativeName("graad Celsius","nl");
		Hour = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/hour", "hour", "h", SecondTime, 3600.0 );
		Hour.addAlternativeName("uur","nl");
		Hour.addAlternativeSymbol("u");
		DegreeCelsiusPerHour = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius_per_hour","degree Celsius per hour","Â°C/h",DegreeCelsius, Hour);
		DegreeCelsiusPerHour.addAlternativeName("graad Celsius per uur","nl");
		DegreeCelsiusPerHour.addAlternativeSymbol("Â°C h-1");
		DegreeCelsiusPerHour.addAlternativeSymbol("Â°CÂ·h-1");
		Centimetre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centimetre","centimetre","cm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Centimetre.addAlternativeName("centimeter","nl");
		CubicCentimetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_centimetre","cubic centimetre","cm3",Centimetre, 3.0);
		CubicCentimetre.addAlternativeName("kubieke centimeter","nl");
		GramPerCubicCentimetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_cubic_centimetre","gram per cubic centimetre","g/cm3",Gram, CubicCentimetre);
		GramPerCubicCentimetre.addAlternativeName("gram per kubieke centimeter","nl");
		GramPerCubicCentimetre.addAlternativeSymbol("g cm-3");
		GramPerCubicCentimetre.addAlternativeSymbol("gÂ·cm-3");
		Exatesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exatesla","exatesla","ET",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Centikelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centikelvin","centikelvin","cK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Exakelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exakelvin","exakelvin","EK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Gigasievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigasievert","gigasievert","GSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Millimole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millimole","millimole","mmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Millimole.addAlternativeName("millimol","nl");
		MillimolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/millimole_per_metre","millimole per metre","mmol/m",Millimole, Metre);
		MillimolePerMetre.addAlternativeName("millimole per meter","nl");
		MillimolePerMetre.addAlternativeSymbol("mmol m-1");
		MillimolePerMetre.addAlternativeSymbol("mmolÂ·m-1");
		MetrePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_metre","metre per metre","m/m",Metre, Metre);
		MetrePerMetre.addAlternativeName("meter per meter","nl");
		MetrePerMetre.addAlternativeSymbol("m m-1");
		MetrePerMetre.addAlternativeSymbol("mÂ·m-1");
		Radian = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/radian", "radian", "rad", MetrePerMetre, 1.0 );
		Radian.addAlternativeName("radiaal","nl");
		Gon = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/gon", "gon", "gon", Radian, 0.01570796 );
		MolePerMicrometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_micrometre","mole per micrometre","mol/Î¼m",Mole, Micrometre);
		MolePerMicrometre.addAlternativeName("mole per micrometer","nl");
		MolePerMicrometre.addAlternativeSymbol("mol Î¼m-1");
		MolePerMicrometre.addAlternativeSymbol("molÂ·Î¼m-1");
		Zettapascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettapascal","zettapascal","ZPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Millivolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millivolt","millivolt","mV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Petamole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petamole","petamole","Pmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Petamole.addAlternativeName("petamol","nl");
		Exasiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exasiemens","exasiemens","ES",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Centihenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centihenry","centihenry","cH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		SecondTimeAmpere = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/second-time_ampere","second ampere","s A",SecondTime, Ampere);
		SecondTimeAmpere.addAlternativeName("seconde ampÃ¨re","nl");
		SecondTimeAmpere.addAlternativeSymbol("sÂ·A");
		Coulomb = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/coulomb", "coulomb", "C", SecondTimeAmpere, 1.0 );
		CoulombPerVolt = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/coulomb_per_volt","coulomb per volt","C/V",Coulomb, Volt);
		CoulombPerVolt.addAlternativeSymbol("C V-1");
		CoulombPerVolt.addAlternativeSymbol("CÂ·V-1");
		Farad = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/farad", "farad", "F", CoulombPerVolt, 1.0 );
		Megafarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megafarad","megafarad","MF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Rem = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/rem", "rem", "rem", Sievert, 0.01 );
		ReciprocalHenry = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_henry","reciprocal henry","H-1",Henry, -1.0);
		ReciprocalHenry.addAlternativeName("omgekeerde henry","nl");
		Femtocandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtocandela","femtocandela","fcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Teratesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teratesla","teratesla","TT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Zeptolitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptolitre","zeptolitre","zl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Zeptolitre.addAlternativeName("zeptoliter","nl");
		Decahertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decahertz","decahertz","daHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Exametre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exametre","exametre","Em",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Exametre.addAlternativeName("exameter","nl");
		SquareExametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_exametre","square exametre","Em2",Exametre, 2.0);
		SquareExametre.addAlternativeName("vierkante exameter","nl");
		Zeptocandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptocandela","zeptocandela","zcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		CircularMil = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/circular_mil", "circular mil", "null", SquareMetre, 5.067075E-10 );
		Exalitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exalitre","exalitre","El",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Exalitre.addAlternativeName("exaliter","nl");
		MolePerExalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_exalitre","mole per exalitre","mol/El",Mole, Exalitre);
		MolePerExalitre.addAlternativeName("mole per exaliter","nl");
		MolePerExalitre.addAlternativeSymbol("mol El-1");
		MolePerExalitre.addAlternativeSymbol("molÂ·El-1");
		AstronomicalUnit = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/astronomical_unit", "astronomical unit", "au", Metre, 1.495978707E11 );
		AstronomicalUnit.addAlternativeSymbol("AU");
		KelvinKilogram = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/kelvin_kilogram","kelvin kilogram","K kg",Kelvin, Kilogram);
		KelvinKilogram.addAlternativeSymbol("KÂ·kg");
		DegreeRankine = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/degree_Rankine", "degree Rankine", "Â°R", Kelvin, 0.5555556 );
		DegreeRankine.addAlternativeName("graad Rankine","nl");
		DegreeRankine.addAlternativeSymbol("Â°Ra");
		KelvinScale = factory.createScale("http://www.wurvoc.org/vocabularies/om-1.8/Kelvin_scale","Kelvin scale","null", Kelvin);
		ScalarPoint pointKelvinScale1 = new ScalarPointImpl(1234.93, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale1);
		ScalarPoint pointKelvinScale2 = new ScalarPointImpl(1337.33, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale2);
		ScalarPoint pointKelvinScale3 = new ScalarPointImpl(1357.77, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale3);
		ScalarPoint pointKelvinScale4 = new ScalarPointImpl(13.8033, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale4);
		ScalarPoint pointKelvinScale5 = new ScalarPointImpl(234.3156, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale5);
		ScalarPoint pointKelvinScale6 = new ScalarPointImpl(24.5561, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale6);
		ScalarPoint pointKelvinScale7 = new ScalarPointImpl(273.16, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale7);
		ScalarPoint pointKelvinScale8 = new ScalarPointImpl(302.9146, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale8);
		ScalarRangePoint pointKelvinScale9 = new ScalarRangePointImpl(3.0, 5.0, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale9);
		ScalarPoint pointKelvinScale10 = new ScalarPointImpl(429.7485, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale10);
		ScalarPoint pointKelvinScale11 = new ScalarPointImpl(505.078, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale11);
		ScalarPoint pointKelvinScale12 = new ScalarPointImpl(54.3584, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale12);
		ScalarPoint pointKelvinScale13 = new ScalarPointImpl(692.677, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale13);
		ScalarPoint pointKelvinScale14 = new ScalarPointImpl(83.8058, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale14);
		ScalarPoint pointKelvinScale15 = new ScalarPointImpl(933.473, KelvinScale);
		KelvinScale.addDefinitionPoint(pointKelvinScale15);
		KelvinScale.addAlternativeName("Kelvinschaal","nl");
		RankineScale = factory.createScale("http://www.wurvoc.org/vocabularies/om-1.8/Rankine_scale","Rankine scale","null",KelvinScale, 0.0, 1.8, DegreeRankine);
		RankineScale.addAlternativeName("Rankineschaal","nl");
		Exavolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exavolt","exavolt","EV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		MillisecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millisecond-time","millisecond","ms",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		MillisecondTime.addAlternativeName("milliseconde","nl");
		Zettasiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettasiemens","zettasiemens","ZS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Millisteradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millisteradian","millisteradian","msr",(SingularUnit)Steradian, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Millisteradian.addAlternativeName("millisteradiaal","nl");
		Decihenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decihenry","decihenry","dH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Nanoweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanoweber","nanoweber","nWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Biot = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/biot", "biot", "Bi", Ampere, 10.0 );
		One = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/one", "one", "1", null);
		PartsPerMillion = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/parts_per_million", "parts per million", "ppm", One, 1.0E-6 );
		Abampere = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/abampere", "abampere", "abA", Ampere, 10.0 );
		Abampere.addAlternativeName("abampÃ¨re","nl");
		Zettasievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettasievert","zettasievert","ZSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Yottatesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottatesla","yottatesla","YT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Terajoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terajoule","terajoule","TJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Milliwatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/milliwatt","milliwatt","mW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		DegreeCelsiusDay = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius_day","degree Celsius day","Â°C d",DegreeCelsius, Day);
		DegreeCelsiusDay.addAlternativeName("graad Celsius dag","nl");
		DegreeCelsiusDay.addAlternativeSymbol("Â°CÂ·d");
		ReciprocalDegreeCelsiusDay = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_degree_Celsius_day","reciprocal degree Celsius day","(Â°C d)-1",DegreeCelsiusDay, -1.0);
		ReciprocalDegreeCelsiusDay.addAlternativeName("omgekeerde graad Celsius dag","nl");
		JapaneseYen = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Japanese_yen", "Japanese yen", "null", null);
		Year = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/year", "year", "a", SecondTime, 3.1536E7 );
		Year.addAlternativeName("jaar","nl");
		Year.addAlternativeSymbol("y");
		Year.addAlternativeSymbol("yr");
		Gigayear = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigayear","gigayear","Gyr",(SingularUnit)Year, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Gigayear.addAlternativeName("gigajaar","nl");
		DryGallonUS = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/dry_gallon-US", "dry gallon (US)", "gal", CubicMetre, 0.00440488377086 );
		Foot = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/foot", "foot", "ft", Metre, 0.3048 );
		Byte = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/byte", "byte", "B", Bit, 8.0 );
		Exbibyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exbibyte","exbibyte","EiB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.BinaryPrefix.EXBI);
		Nanocoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanocoulomb","nanocoulomb","nC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		ReciprocalYear = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_year","reciprocal year","a-1",Year, -1.0);
		ReciprocalYear.addAlternativeName("omgekeerd jaar","nl");
		Statfarad = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/statfarad", "statfarad", "statF", Farad, 1.11265E-12 );
		Femtometre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtometre","femtometre","fm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Femtometre.addAlternativeName("femtometer","nl");
		FemtometrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/femtometre_per_second-time","femtometre per second","fm/s",Femtometre, SecondTime);
		FemtometrePerSecondTime.addAlternativeName("femtometer per seconde","nl");
		FemtometrePerSecondTime.addAlternativeSymbol("fm s-1");
		FemtometrePerSecondTime.addAlternativeSymbol("fmÂ·s-1");
		Femtopascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtopascal","femtopascal","fPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Centimole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centimole","centimole","cmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Centimole.addAlternativeName("centimol","nl");
		CentimolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/centimole_per_metre","centimole per metre","cmol/m",Centimole, Metre);
		CentimolePerMetre.addAlternativeName("centimole per meter","nl");
		CentimolePerMetre.addAlternativeSymbol("cmol m-1");
		CentimolePerMetre.addAlternativeSymbol("cmolÂ·m-1");
		Deciradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/deciradian","deciradian","drad",(SingularUnit)Radian, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Deciradian.addAlternativeName("deciradiaal","nl");
		Picolitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picolitre","picolitre","pl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Picolitre.addAlternativeName("picoliter","nl");
		GramPerPicolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_picolitre","gram per picolitre","g/pl",Gram, Picolitre);
		GramPerPicolitre.addAlternativeName("gram per picoliter","nl");
		GramPerPicolitre.addAlternativeSymbol("g pl-1");
		GramPerPicolitre.addAlternativeSymbol("gÂ·pl-1");
		Megawatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megawatt","megawatt","MW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Micromole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/micromole","micromole","Î¼mol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Micromole.addAlternativeName("micromol","nl");
		MicromolePerMole = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/micromole_per_mole","micromole per mole","Î¼mol/mol",Micromole, Mole);
		MicromolePerMole.addAlternativeName("micromol per mol","nl");
		MicromolePerMole.addAlternativeSymbol("Î¼mol mol-1");
		MicromolePerMole.addAlternativeSymbol("Î¼molÂ·mol-1");
		Erg = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/erg", "erg", "erg", Joule, 1.0E-7 );
		ErgSecondTime = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/erg_second-time","erg second","erg s",Erg, SecondTime);
		ErgSecondTime.addAlternativeName("erg seconde","nl");
		ErgSecondTime.addAlternativeSymbol("ergÂ·s");
		Millilitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millilitre","millilitre","ml",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Millilitre.addAlternativeName("milliliter","nl");
		MolePerMillilitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_millilitre","mole per millilitre","mol/ml",Mole, Millilitre);
		MolePerMillilitre.addAlternativeName("mole per milliliter","nl");
		MolePerMillilitre.addAlternativeSymbol("mol ml-1");
		MolePerMillilitre.addAlternativeSymbol("molÂ·ml-1");
		SecondTimeToThePower2 = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/second-time_to_the_power_-2","second to the power -2","s-2",SecondTime, -2.0);
		SecondTimeToThePower2.addAlternativeName("seconde tot de macht -2","nl");
		NanosecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanosecond-time","nanosecond","ns",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		NanosecondTime.addAlternativeName("nanoseconde","nl");
		NanosecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/nanosecond-time_squared","nanosecond squared","ns2",NanosecondTime, 2.0);
		NanosecondTimeSquared.addAlternativeName("nanoseconde kwadraat","nl");
		ZeptosecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptosecond-time","zeptosecond","zs",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		ZeptosecondTime.addAlternativeName("zeptoseconde","nl");
		Attohenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attohenry","attohenry","aH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Milligray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/milligray","milligray","mGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Millimetre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millimetre","millimetre","mm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Millimetre.addAlternativeName("millimeter","nl");
		CubicMillimetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_millimetre","cubic millimetre","mm3",Millimetre, 3.0);
		CubicMillimetre.addAlternativeName("kubieke millimeter","nl");
		Hectomolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectomolair","hectomolair","hM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Yottakelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottakelvin","yottakelvin","YK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		PascalSecondTime = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/pascal_second-time","pascal second","Pa s",Pascal, SecondTime);
		PascalSecondTime.addAlternativeName("pascal seconde","nl");
		PascalSecondTime.addAlternativeSymbol("PaÂ·s");
		ReciprocalPascalSecondTime = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_pascal_second-time","reciprocal pascal second","Pa-1 s-1",PascalSecondTime, -1.0);
		ReciprocalPascalSecondTime.addAlternativeName("omgekeerde pascal seconde","nl");
		ReciprocalPascalSecondTime.addAlternativeSymbol("(Pa s)-1");
		ReciprocalPascalSecondTime.addAlternativeSymbol("(PaÂ·s)-1");
		ReciprocalPascalSecondTime.addAlternativeSymbol("Pa-1Â·s-1");
		Rhe = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/rhe", "rhe", "null", ReciprocalPascalSecondTime, 10.0 );
		JoulePerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/joule_per_square_metre","joule per square metre","J/m2",Joule, SquareMetre);
		JoulePerSquareMetre.addAlternativeName("joule per vierkante meter","nl");
		JoulePerSquareMetre.addAlternativeSymbol("J m-2");
		JoulePerSquareMetre.addAlternativeSymbol("JÂ·m-2");
		PetasecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petasecond-time","petasecond","Ps",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		PetasecondTime.addAlternativeName("petaseconde","nl");
		PetasecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/petasecond-time_squared","petasecond squared","Ps2",PetasecondTime, 2.0);
		PetasecondTimeSquared.addAlternativeName("petaseconde kwadraat","nl");
		MetrePerPetasecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_petasecond-time_squared","metre per petasecond squared","m/Ps2",Metre, PetasecondTimeSquared);
		MetrePerPetasecondTimeSquared.addAlternativeName("meter per petaseconde kwadraat","nl");
		MetrePerPetasecondTimeSquared.addAlternativeSymbol("m Ps-2");
		MetrePerPetasecondTimeSquared.addAlternativeSymbol("mÂ·Ps-2");
		Milligram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/milligram","milligram","mg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Kilometre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilometre","kilometre","km",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Kilometre.addAlternativeName("kilometer","nl");
		MolePerKilometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_kilometre","mole per kilometre","mol/km",Mole, Kilometre);
		MolePerKilometre.addAlternativeName("mole per kilometer","nl");
		MolePerKilometre.addAlternativeSymbol("mol km-1");
		MolePerKilometre.addAlternativeSymbol("molÂ·km-1");
		Kilolumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilolumen","kilolumen","klm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Yoctosiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctosiemens","yoctosiemens","yS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Zeptolumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptolumen","zeptolumen","zlm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Terafarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terafarad","terafarad","TF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Exabit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exabit","exabit","Ebit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		MetrePerMegasecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_megasecond-time","metre per megasecond","m/Ms",Metre, MegasecondTime);
		MetrePerMegasecondTime.addAlternativeName("meter per megaseconde","nl");
		MetrePerMegasecondTime.addAlternativeSymbol("m Ms-1");
		MetrePerMegasecondTime.addAlternativeSymbol("mÂ·Ms-1");
		Stattesla = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/stattesla", "stattesla", "statT", Tesla, 2997900.0 );
		Zeptoradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptoradian","zeptoradian","zrad",(SingularUnit)Radian, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Zeptoradian.addAlternativeName("zeptoradiaal","nl");
		Yoctohertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctohertz","yoctohertz","yHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		YoctodegreeCelsius = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctodegree_Celsius","yoctodegree Celsius","yÂ°C",(SingularUnit)DegreeCelsius, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		YoctodegreeCelsius.addAlternativeName("yoctograad Celsius","nl");
		Teragram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teragram","teragram","Tg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		TeragramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/teragram_per_litre","teragram per litre","Tg/l",Teragram, Litre);
		TeragramPerLitre.addAlternativeName("teragram per liter","nl");
		TeragramPerLitre.addAlternativeSymbol("Tg l-1");
		TeragramPerLitre.addAlternativeSymbol("TgÂ·l-1");
		MolePerMegametre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_megametre","mole per megametre","mol/Mm",Mole, Megametre);
		MolePerMegametre.addAlternativeName("mole per megameter","nl");
		MolePerMegametre.addAlternativeSymbol("mol Mm-1");
		MolePerMegametre.addAlternativeSymbol("molÂ·Mm-1");
		Microhenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microhenry","microhenry","Î¼H",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Yottaampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottaampere","yottaampere","YA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Yottaampere.addAlternativeName("yottaampÃ¨re","nl");
		Zettamole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettamole","zettamole","Zmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Zettamole.addAlternativeName("zettamol","nl");
		ZettamolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/zettamole_per_litre","zettamole per litre","Zmol/l",Zettamole, Litre);
		ZettamolePerLitre.addAlternativeName("zettamole per liter","nl");
		ZettamolePerLitre.addAlternativeSymbol("Zmol l-1");
		ZettamolePerLitre.addAlternativeSymbol("ZmolÂ·l-1");
		Zettabecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettabecquerel","zettabecquerel","ZBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Decametre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decametre","decametre","dam",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Decametre.addAlternativeName("decameter","nl");
		DecametrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/decametre_per_second-time","decametre per second","dam/s",Decametre, SecondTime);
		DecametrePerSecondTime.addAlternativeName("decameter per seconde","nl");
		DecametrePerSecondTime.addAlternativeSymbol("dam s-1");
		DecametrePerSecondTime.addAlternativeSymbol("damÂ·s-1");
		Decalitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decalitre","decalitre","dal",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Decalitre.addAlternativeName("decaliter","nl");
		MolePerDecalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_decalitre","mole per decalitre","mol/dal",Mole, Decalitre);
		MolePerDecalitre.addAlternativeName("mole per decaliter","nl");
		MolePerDecalitre.addAlternativeSymbol("mol dal-1");
		MolePerDecalitre.addAlternativeSymbol("molÂ·dal-1");
		Microcoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microcoulomb","microcoulomb","Î¼C",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		KilocolonyFormingUnitPerMillilitre = null;
		Megamole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megamole","megamole","Mmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Megamole.addAlternativeName("megamol","nl");
		Petavolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petavolt","petavolt","PV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Nanometre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanometre","nanometre","nm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Nanometre.addAlternativeName("nanometer","nl");
		WattPerNanometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_nanometre","watt per nanometre","W/nm",Watt, Nanometre);
		WattPerNanometre.addAlternativeName("watt per nanometer","nl");
		WattPerNanometre.addAlternativeSymbol("W nm-1");
		WattPerNanometre.addAlternativeSymbol("WÂ·nm-1");
		Yoctoradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctoradian","yoctoradian","yrad",(SingularUnit)Radian, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Yoctoradian.addAlternativeName("yoctoradiaal","nl");
		Decalumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decalumen","decalumen","dalm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		LiquidQuartUS = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/liquid_quart-US", "liquid quart (US)", "liq qt", CubicMetre, 9.463529E-4 );
		KilometrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilometre_per_second-time","kilometre per second","km/s",Kilometre, SecondTime);
		KilometrePerSecondTime.addAlternativeName("kilometer per seconde","nl");
		KilometrePerSecondTime.addAlternativeSymbol("km s-1");
		KilometrePerSecondTime.addAlternativeSymbol("kmÂ·s-1");
		Parsec = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/parsec", "parsec", "pc", Metre, 3.08567802E16 );
		Megaparsec = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megaparsec","megaparsec","Mpc",(SingularUnit)Parsec, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		KilometrePerSecondTimePerMegaparsec = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilometre_per_second-time_per_megaparsec","kilometre per second per megaparsec","km s-1 Mpc-1",KilometrePerSecondTime, Megaparsec);
		KilometrePerSecondTimePerMegaparsec.addAlternativeName("kilometer per seconde per megaparsec","nl");
		MegaeuroPerMegawatt = null;
		CubicKilometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_kilometre","cubic kilometre","km3",Kilometre, 3.0);
		CubicKilometre.addAlternativeName("kubieke kilometer","nl");
		Centikatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centikatal","centikatal","ckat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Petacoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petacoulomb","petacoulomb","PC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Hectovolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectovolt","hectovolt","hV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Kilovolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilovolt","kilovolt","kV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Terasiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terasiemens","terasiemens","TS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Petalitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petalitre","petalitre","Pl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Petalitre.addAlternativeName("petaliter","nl");
		GramPerPetalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_petalitre","gram per petalitre","g/Pl",Gram, Petalitre);
		GramPerPetalitre.addAlternativeName("gram per petaliter","nl");
		GramPerPetalitre.addAlternativeSymbol("g Pl-1");
		GramPerPetalitre.addAlternativeSymbol("gÂ·Pl-1");
		SolarMass = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/solar_mass", "solar mass", "M_â˜‰", Kilogram, 1.98892E30 );
		SolarMass.addAlternativeName("zonsmassa","nl");
		CubicParsec = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_parsec","cubic parsec","pc3",Parsec, 3.0);
		CubicParsec.addAlternativeName("kubieke parsec","nl");
		GigayearCubicParsec = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/gigayear_cubic_parsec","gigayear cubic parsec","Gyr pc3",Gigayear, CubicParsec);
		GigayearCubicParsec.addAlternativeName("gigajaar kubieke parsec","nl");
		GigayearCubicParsec.addAlternativeSymbol("GyrÂ·pc3");
		SolarMassPerGigayearCubicParsec = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/solar_mass_per_gigayear_cubic_parsec","solar mass per gigayear cubic parsec","M_â˜‰/(Gyr pc3)",SolarMass, GigayearCubicParsec);
		SolarMassPerGigayearCubicParsec.addAlternativeSymbol("M_â˜‰ Gyr-1 pc-3");
		SolarMassPerGigayearCubicParsec.addAlternativeSymbol("M_â˜‰Â·Gyr-1Â·pc-3");
		Exagray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exagray","exagray","EGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Magnitude = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/magnitude", "magnitude", "mag", One, 1.0 );
		SecondPlaneAngle = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/second-plane_angle", "second (plane angle)", "\"", Radian, 4.848137E-6 );
		SecondPlaneAngle.addAlternativeName("seconde (hoek)","nl");
		SecondPlaneAngle.addAlternativeName("boogseconde","nl");
		SecondPlaneAngle.addAlternativeName("seconde (hoek)","nl");
		SecondPlaneAngle.addAlternativeName("boogseconde","nl");
		SecondPlaneAngleSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/second-plane_angle_squared","second (plane angle) squared","arcsec2",SecondPlaneAngle, 2.0);
		MagnitudePerSecondPlaneAngleSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/magnitude_per_second-plane_angle_squared","magnitude per second (plane angle) squared","mag/arcsec2",Magnitude, SecondPlaneAngleSquared);
		MagnitudePerSecondPlaneAngleSquared.addAlternativeSymbol("mag arcsec-2");
		MagnitudePerSecondPlaneAngleSquared.addAlternativeSymbol("magÂ·arcsec-2");
		Centilitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centilitre","centilitre","cl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Centilitre.addAlternativeName("centiliter","nl");
		MolePerCentilitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_centilitre","mole per centilitre","mol/cl",Mole, Centilitre);
		MolePerCentilitre.addAlternativeName("mole per centiliter","nl");
		MolePerCentilitre.addAlternativeSymbol("mol cl-1");
		MolePerCentilitre.addAlternativeSymbol("molÂ·cl-1");
		Megalitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megalitre","megalitre","Ml",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Megalitre.addAlternativeName("megaliter","nl");
		Attolumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attolumen","attolumen","alm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		KilosecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilosecond-time","kilosecond","ks",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		KilosecondTime.addAlternativeName("kiloseconde","nl");
		MetrePerKilosecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_kilosecond-time","metre per kilosecond","m/ks",Metre, KilosecondTime);
		MetrePerKilosecondTime.addAlternativeName("meter per kiloseconde","nl");
		MetrePerKilosecondTime.addAlternativeSymbol("m ks-1");
		MetrePerKilosecondTime.addAlternativeSymbol("mÂ·ks-1");
		Zettalux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettalux","zettalux","Zlx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Exagram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exagram","exagram","Eg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		ThermEC = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/therm-EC", "therm (EC)", "null", Joule, 1.05506E8 );
		MolePerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_cubic_metre","mole per cubic metre","mol/m3",Mole, CubicMetre);
		MolePerCubicMetre.addAlternativeName("mol per kubieke meter","nl");
		MolePerCubicMetre.addAlternativeSymbol("mol m-3");
		MolePerCubicMetre.addAlternativeSymbol("molÂ·m-3");
		Hectogram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectogram","hectogram","hg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		HectogramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/hectogram_per_litre","hectogram per litre","hg/l",Hectogram, Litre);
		HectogramPerLitre.addAlternativeName("hectogram per liter","nl");
		HectogramPerLitre.addAlternativeSymbol("hg l-1");
		HectogramPerLitre.addAlternativeSymbol("hgÂ·l-1");
		Kilofarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilofarad","kilofarad","kF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		FluidOunceUS = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/fluid_ounce-US", "fluid ounce (US)", "fl oz", CubicMetre, 2.957353E-5 );
		Megamolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megamolair","megamolair","MM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Decawatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decawatt","decawatt","daW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Kilobit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilobit","kilobit","kbit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Examole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/examole","examole","Emol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Examole.addAlternativeName("examol","nl");
		ExamolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/examole_per_metre","examole per metre","Emol/m",Examole, Metre);
		ExamolePerMetre.addAlternativeName("examole per meter","nl");
		ExamolePerMetre.addAlternativeSymbol("Emol m-1");
		ExamolePerMetre.addAlternativeSymbol("EmolÂ·m-1");
		Terasievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terasievert","terasievert","TSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		SquareMetreKelvin = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_kelvin","square metre kelvin","m2 K",SquareMetre, Kelvin);
		SquareMetreKelvin.addAlternativeName("vierkante meter kelvin","nl");
		SquareMetreKelvin.addAlternativeSymbol("m2Â·K");
		Petaweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petaweber","petaweber","PWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		CubicCentimetrePerCubicCentimetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/cubic_centimetre_per_cubic_centimetre","cubic centimetre per cubic centimetre","cm3/cm3",CubicCentimetre, CubicCentimetre);
		CubicCentimetrePerCubicCentimetre.addAlternativeName("kubieke centimeter per kubieke centimeter","nl");
		CubicCentimetrePerCubicCentimetre.addAlternativeSymbol("cm3 cm-3");
		CubicCentimetrePerCubicCentimetre.addAlternativeSymbol("cm3Â·cm-3");
		Zettawatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettawatt","zettawatt","ZW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		GramPerGram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_gram","gram per gram","g/g",Gram, Gram);
		GramPerGram.addAlternativeSymbol("g g-1");
		GramPerGram.addAlternativeSymbol("gÂ·g-1");
		DecametrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/decametre_per_second-time_squared","decametre per second squared","dam/s2",Decametre, SecondTimeSquared);
		DecametrePerSecondTimeSquared.addAlternativeName("decameter per seconde kwadraat","nl");
		DecametrePerSecondTimeSquared.addAlternativeSymbol("dam s-2");
		DecametrePerSecondTimeSquared.addAlternativeSymbol("damÂ·s-2");
		Femtojoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtojoule","femtojoule","fJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Hectolux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectolux","hectolux","hlx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		MetrePerPetasecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_petasecond-time","metre per petasecond","m/Ps",Metre, PetasecondTime);
		MetrePerPetasecondTime.addAlternativeName("meter per petaseconde","nl");
		MetrePerPetasecondTime.addAlternativeSymbol("m Ps-1");
		MetrePerPetasecondTime.addAlternativeSymbol("mÂ·Ps-1");
		Hectopascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectopascal","hectopascal","hPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		CandelaPerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/candela_per_square_metre","candela per square metre","cd/m",Candela, SquareMetre);
		CandelaPerSquareMetre.addAlternativeName("candela per vierkante meter","nl");
		CandelaPerSquareMetre.addAlternativeSymbol("cd m-1");
		CandelaPerSquareMetre.addAlternativeSymbol("cdÂ·m-1");
		Yoctometre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctometre","yoctometre","ym",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Yoctometre.addAlternativeName("yoctometer","nl");
		YoctometrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/yoctometre_per_second-time","yoctometre per second","ym/s",Yoctometre, SecondTime);
		YoctometrePerSecondTime.addAlternativeName("yoctometer per seconde","nl");
		YoctometrePerSecondTime.addAlternativeSymbol("ym s-1");
		YoctometrePerSecondTime.addAlternativeSymbol("ymÂ·s-1");
		Milliradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/milliradian","milliradian","mrad",(SingularUnit)Radian, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Milliradian.addAlternativeName("milliradiaal","nl");
		ExasecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exasecond-time","exasecond","Es",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		ExasecondTime.addAlternativeName("exaseconde","nl");
		WattPerSecondPlaneAngleSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_second-plane_angle_squared","watt per second (plane angle) squared","W/arcsec2",Watt, SecondPlaneAngleSquared);
		WattPerSecondPlaneAngleSquared.addAlternativeSymbol("W arcsec-2");
		WattPerSecondPlaneAngleSquared.addAlternativeSymbol("WÂ·arcsec-2");
		Megalux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megalux","megalux","Mlx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		TerametrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/terametre_per_second-time","terametre per second","Tm/s",Terametre, SecondTime);
		TerametrePerSecondTime.addAlternativeName("terameter per seconde","nl");
		TerametrePerSecondTime.addAlternativeSymbol("Tm s-1");
		TerametrePerSecondTime.addAlternativeSymbol("TmÂ·s-1");
		SquareMetreSecondTime = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_second-time","square metre second","m2 s",SquareMetre, SecondTime);
		SquareMetreSecondTime.addAlternativeName("vierkante meter seconde","nl");
		SquareMetreSecondTime.addAlternativeSymbol("m2Â·s");
		GramPerSquareMetreSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_square_metre_second-time","gram per square metre second","g/(m2 s)",Gram, SquareMetreSecondTime);
		GramPerSquareMetreSecondTime.addAlternativeName("gram per vierkante meter seconde","nl");
		GramPerSquareMetreSecondTime.addAlternativeSymbol("g m-2 s-1");
		GramPerSquareMetreSecondTime.addAlternativeSymbol("gÂ·m-2Â·s-1");
		UnifiedAtomicMassUnit = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/unified_atomic_mass_unit", "unified atomic mass unit", "u", nl.wur.fbr.om.model.dimensions.SIBaseDimension.MASS);
		Yoctogram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctogram","yoctogram","yg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		YoctogramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/yoctogram_per_litre","yoctogram per litre","yg/l",Yoctogram, Litre);
		YoctogramPerLitre.addAlternativeName("yoctogram per liter","nl");
		YoctogramPerLitre.addAlternativeSymbol("yg l-1");
		YoctogramPerLitre.addAlternativeSymbol("ygÂ·l-1");
		Decamolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decamolair","decamolair","daM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		MegaeuroPerMegatonne = null;
		Hectomole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectomole","hectomole","hmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Hectomole.addAlternativeName("hectomol","nl");
		HectomolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/hectomole_per_metre","hectomole per metre","hmol/m",Hectomole, Metre);
		HectomolePerMetre.addAlternativeName("hectomole per meter","nl");
		HectomolePerMetre.addAlternativeSymbol("hmol m-1");
		HectomolePerMetre.addAlternativeSymbol("hmolÂ·m-1");
		Zettaweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettaweber","zettaweber","ZWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		SquareMetreDay = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_day","square metre day","m2 d",SquareMetre, Day);
		SquareMetreDay.addAlternativeName("vierkante meter dag","nl");
		SquareMetreDay.addAlternativeSymbol("m2Â·d");
		JoulePerSquareMetreDay = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/joule_per_square_metre_day","joule per square metre day","J/(m2 d)",Joule, SquareMetreDay);
		JoulePerSquareMetreDay.addAlternativeName("joule per vierkante meter dag","nl");
		JoulePerSquareMetreDay.addAlternativeSymbol("J m-2 d-1");
		JoulePerSquareMetreDay.addAlternativeSymbol("JÂ·m-2Â·d-1");
		MetrePerDecasecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_decasecond-time_squared","metre per decasecond squared","m/das2",Metre, DecasecondTimeSquared);
		MetrePerDecasecondTimeSquared.addAlternativeName("meter per decaseconde kwadraat","nl");
		MetrePerDecasecondTimeSquared.addAlternativeSymbol("m das-2");
		MetrePerDecasecondTimeSquared.addAlternativeSymbol("mÂ·das-2");
		Poise = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/poise", "poise", "P", PascalSecondTime, 0.1 );
		Microgram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microgram","microgram","Î¼g",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Microgram.addAlternativeName("mcg","");
		Microgram.addAlternativeName("ug","");
		Microgram.addAlternativeName("mcg","");
		Microgram.addAlternativeName("ug","");
		MicrogramPerSquareMetreSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/microgram_per_square_metre_second-time","microgram per square metre second","mg/(m2 s)",Microgram, SquareMetreSecondTime);
		MicrogramPerSquareMetreSecondTime.addAlternativeName("microgram per vierkante meter seconde","nl");
		MicrogramPerSquareMetreSecondTime.addAlternativeSymbol("mg m-2 s-1");
		MicrogramPerSquareMetreSecondTime.addAlternativeSymbol("mgÂ·m-2Â·s-1");
		Nanohertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanohertz","nanohertz","nHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Hectoampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectoampere","hectoampere","hA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Hectoampere.addAlternativeName("hectoampÃ¨re","nl");
		AcreFoot = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/acre_foot", "acre foot", "null", CubicMetre, 1233.489 );
		CalorieThermochemical = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/calorie-thermochemical", "calorie (thermochemical)", "cal_th", Joule, 4.184 );
		MetreKilogramPerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_kilogram_per_second-time","metre kilogram per second","m kg/s",MetreKilogram, SecondTime);
		MetreKilogramPerSecondTime.addAlternativeName("meter kilogram per seconde","nl");
		MetreKilogramPerSecondTime.addAlternativeSymbol("m kg s-1");
		MetreKilogramPerSecondTime.addAlternativeSymbol("mÂ·kg/s");
		MetreKilogramPerSecondTime.addAlternativeSymbol("mÂ·kgÂ·s-1");
		Kilocoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilocoulomb","kilocoulomb","kC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Hectofarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectofarad","hectofarad","hF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Millikatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millikatal","millikatal","mkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Decimetre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decimetre","decimetre","dm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Decimetre.addAlternativeName("decimeter","nl");
		DecimetrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/decimetre_per_second-time_squared","decimetre per second squared","dm/s2",Decimetre, SecondTimeSquared);
		DecimetrePerSecondTimeSquared.addAlternativeName("decimeter per seconde kwadraat","nl");
		DecimetrePerSecondTimeSquared.addAlternativeSymbol("dm s-2");
		DecimetrePerSecondTimeSquared.addAlternativeSymbol("dmÂ·s-2");
		CentisecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centisecond-time","centisecond","cs",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		CentisecondTime.addAlternativeName("centiseconde","nl");
		CentisecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/centisecond-time_squared","centisecond squared","cs2",CentisecondTime, 2.0);
		CentisecondTimeSquared.addAlternativeName("centiseconde kwadraat","nl");
		IndianRupee = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Indian_rupee", "Indian rupee", "null", null);
		BitPerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/bit_per_second-time","bit per second","bit/s",Bit, SecondTime);
		BitPerSecondTime.addAlternativeName("bit per seconde","nl");
		BitPerSecondTime.addAlternativeSymbol("bit s-1");
		BitPerSecondTime.addAlternativeSymbol("bitÂ·s-1");
		VoltPerAmpere = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/volt_per_ampere","volt per ampere","V/A",Volt, Ampere);
		VoltPerAmpere.addAlternativeName("volt per ampÃ¨re","nl");
		VoltPerAmpere.addAlternativeSymbol("V A-1");
		VoltPerAmpere.addAlternativeSymbol("VÂ·A-1");
		Ohm = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/ohm", "ohm", "Î©", VoltPerAmpere, 1.0 );
		Exaohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exaohm","exaohm","EÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Maxwell = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/maxwell", "maxwell", "Mx", Weber, 1.0E-8 );
		Hectojoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectojoule","hectojoule","hJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Picosievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picosievert","picosievert","pSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		SecondTimePerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/second-time_per_square_metre","second per square metre","s/m2",SecondTime, SquareMetre);
		SecondTimePerSquareMetre.addAlternativeSymbol("s m-2");
		SecondTimePerSquareMetre.addAlternativeSymbol("sÂ·m-2");
		Millitesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millitesla","millitesla","mT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Yottafarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottafarad","yottafarad","YF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		ZeptosecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/zeptosecond-time_squared","zeptosecond squared","zs2",ZeptosecondTime, 2.0);
		ZeptosecondTimeSquared.addAlternativeName("zeptoseconde kwadraat","nl");
		MetrePerZeptosecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_zeptosecond-time_squared","metre per zeptosecond squared","m/zs2",Metre, ZeptosecondTimeSquared);
		MetrePerZeptosecondTimeSquared.addAlternativeName("meter per zeptoseconde kwadraat","nl");
		MetrePerZeptosecondTimeSquared.addAlternativeSymbol("m zs-2");
		MetrePerZeptosecondTimeSquared.addAlternativeSymbol("mÂ·zs-2");
		Abmho = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/abmho", "abmho", "null", Siemens, 1.0E9 );
		CentimetrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/centimetre_per_second-time_squared","centimetre per second squared","cm/s2",Centimetre, SecondTimeSquared);
		CentimetrePerSecondTimeSquared.addAlternativeName("centimeter per seconde kwadraat","nl");
		CentimetrePerSecondTimeSquared.addAlternativeSymbol("cm s-2");
		CentimetrePerSecondTimeSquared.addAlternativeSymbol("cmÂ·s-2");
		Kilojoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilojoule","kilojoule","kJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Decilitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decilitre","decilitre","dl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Decilitre.addAlternativeName("deciliter","nl");
		MolePerDecilitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_decilitre","mole per decilitre","mol/dl",Mole, Decilitre);
		MolePerDecilitre.addAlternativeName("mole per deciliter","nl");
		MolePerDecilitre.addAlternativeSymbol("mol dl-1");
		MolePerDecilitre.addAlternativeSymbol("molÂ·dl-1");
		MetreKelvin = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/metre_kelvin","metre kelvin","m K",Metre, Kelvin);
		MetreKelvin.addAlternativeName("meter kelvin","nl");
		MetreKelvin.addAlternativeSymbol("mÂ·K");
		WattPerMetreKelvin = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_metre_kelvin","watt per metre kelvin","W/(m K)",Watt, MetreKelvin);
		WattPerMetreKelvin.addAlternativeName("watt per meter kelvin","nl");
		WattPerMetreKelvin.addAlternativeSymbol("W m-1 K-1");
		WattPerMetreKelvin.addAlternativeSymbol("W/(mÂ·K)");
		WattPerMetreKelvin.addAlternativeSymbol("WÂ·m-1Â·K-1");
		Centiampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centiampere","centiampere","cA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Centiampere.addAlternativeName("centiampÃ¨re","nl");
		Hectogray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectogray","hectogray","hGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Picometre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picometre","picometre","pm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Picometre.addAlternativeName("picometer","nl");
		PicometrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/picometre_per_second-time_squared","picometre per second squared","pm/s2",Picometre, SecondTimeSquared);
		PicometrePerSecondTimeSquared.addAlternativeName("picometer per seconde kwadraat","nl");
		PicometrePerSecondTimeSquared.addAlternativeSymbol("pm s-2");
		PicometrePerSecondTimeSquared.addAlternativeSymbol("pmÂ·s-2");
		Kilomole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilomole","kilomole","kmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Kilomole.addAlternativeName("kilomol","nl");
		Gauss = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/gauss", "gauss", "G", Tesla, 1.0E-4 );
		Gauss.addAlternativeSymbol("Gs");
		Milligauss = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/milligauss","milligauss","mG",(SingularUnit)Gauss, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Petakatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petakatal","petakatal","Pkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Rod = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/rod", "rod", "rd", Metre, 5.02921 );
		Nanohenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanohenry","nanohenry","nH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		PicodegreeCelsius = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picodegree_Celsius","picodegree Celsius","pÂ°C",(SingularUnit)DegreeCelsius, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		PicodegreeCelsius.addAlternativeName("picograad Celsius","nl");
		Zettagray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettagray","zettagray","ZGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		SquareMetrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_per_second-time","square metre per second","m2/s",SquareMetre, SecondTime);
		SquareMetrePerSecondTime.addAlternativeName("vierkante meter per seconde","nl");
		SquareMetrePerSecondTime.addAlternativeSymbol("m2 s-1");
		SquareMetrePerSecondTime.addAlternativeSymbol("m2Â·s-1");
		Stokes = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/stokes", "stokes", "St", SquareMetrePerSecondTime, 1.0E-4 );
		Yoctokelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctokelvin","yoctokelvin","yK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		MolePerYoctometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_yoctometre","mole per yoctometre","mol/ym",Mole, Yoctometre);
		MolePerYoctometre.addAlternativeName("mole per yoctometer","nl");
		MolePerYoctometre.addAlternativeSymbol("mol ym-1");
		MolePerYoctometre.addAlternativeSymbol("molÂ·ym-1");
		Petabecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petabecquerel","petabecquerel","PBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Petawatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petawatt","petawatt","PW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Decinewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decinewton","decinewton","dN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Attolux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attolux","attolux","alx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Picomolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picomolair","picomolair","pM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		FemtosecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtosecond-time","femtosecond","fs",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		FemtosecondTime.addAlternativeName("femtoseconde","nl");
		Zettamolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettamolair","zettamolair","ZM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Pennyweight = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/pennyweight", "pennyweight", "dwt", Kilogram, 0.001555174 );
		Teraampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teraampere","teraampere","TA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Teraampere.addAlternativeName("teraampÃ¨re","nl");
		Centilux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centilux","centilux","clx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Decahenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decahenry","decahenry","daH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Gigamolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigamolair","gigamolair","GM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Millimagnitude = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millimagnitude","millimagnitude","mmag",(SingularUnit)Magnitude, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Picosiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picosiemens","picosiemens","pS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		MexicanPeso = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Mexican_peso", "Mexican peso", "null", null);
		Femtofarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtofarad","femtofarad","fF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Kilowatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilowatt","kilowatt","kW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		VoltPerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/volt_per_metre","volt per metre","V/m",Volt, Metre);
		VoltPerMetre.addAlternativeName("volt per meter","nl");
		VoltPerMetre.addAlternativeSymbol("V m-1");
		VoltPerMetre.addAlternativeSymbol("VÂ·m-1");
		Decasiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decasiemens","decasiemens","daS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Decalux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decalux","decalux","dalx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Megatonne = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megatonne","megatonne","Mt",(SingularUnit)Tonne, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Megatonne.addAlternativeName("megaton","nl");
		SwedishKrona = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Swedish_krona", "Swedish krona", "null", null);
		Phot = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/phot", "phot", "ph", Lux, 10000.0 );
		MetrePerNanosecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_nanosecond-time_squared","metre per nanosecond squared","m/ns2",Metre, NanosecondTimeSquared);
		MetrePerNanosecondTimeSquared.addAlternativeName("meter per nanoseconde kwadraat","nl");
		MetrePerNanosecondTimeSquared.addAlternativeSymbol("m ns-2");
		MetrePerNanosecondTimeSquared.addAlternativeSymbol("mÂ·ns-2");
		Exawatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exawatt","exawatt","EW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Gigajoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigajoule","gigajoule","GJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		KilogramPerGigajoule = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_gigajoule","kikogram per gigajoule","kg/GJ",Kilogram, Gigajoule);
		KilogramPerGigajoule.addAlternativeName("kilogram per gigajoule","nl");
		KilogramPerGigajoule.addAlternativeSymbol("kg GJ-1");
		KilogramPerGigajoule.addAlternativeSymbol("kgÂ·GJ-1");
		Gigalitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigalitre","gigalitre","Gl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Gigalitre.addAlternativeName("gigaliter","nl");
		GramPerGigalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_gigalitre","gram per gigalitre","g/Gl",Gram, Gigalitre);
		GramPerGigalitre.addAlternativeName("gram per gigaliter","nl");
		GramPerGigalitre.addAlternativeSymbol("g Gl-1");
		GramPerGigalitre.addAlternativeSymbol("gÂ·Gl-1");
		TerametrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/terametre_per_second-time_squared","terametre per second squared","Tm/s2",Terametre, SecondTimeSquared);
		TerametrePerSecondTimeSquared.addAlternativeName("terameter per seconde kwadraat","nl");
		TerametrePerSecondTimeSquared.addAlternativeSymbol("Tm s-2");
		TerametrePerSecondTimeSquared.addAlternativeSymbol("TmÂ·s-2");
		Zeptonewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptonewton","zeptonewton","zN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Petakelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petakelvin","petakelvin","PK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		ZeptodegreeCelsius = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptodegree_Celsius","zeptodegree Celsius","zÂ°C",(SingularUnit)DegreeCelsius, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		ZeptodegreeCelsius.addAlternativeName("zeptograad Celsius","nl");
		Femtosievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtosievert","femtosievert","fSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		CubicYoctometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_yoctometre","cubic yoctometre","ym3",Yoctometre, 3.0);
		CubicYoctometre.addAlternativeName("kubieke yoctometer","nl");
		KelvinMole = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/kelvin_mole","kelvin mole","K mol",Kelvin, Mole);
		KelvinMole.addAlternativeName("kelvin mol","nl");
		KelvinMole.addAlternativeSymbol("KÂ·mol");
		Teramole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teramole","teramole","Tmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Teramole.addAlternativeName("teramol","nl");
		TeramolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/teramole_per_metre","teramole per metre","Tmol/m",Teramole, Metre);
		TeramolePerMetre.addAlternativeName("teramole per meter","nl");
		TeramolePerMetre.addAlternativeSymbol("Tmol m-1");
		TeramolePerMetre.addAlternativeSymbol("TmolÂ·m-1");
		MicromolePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/micromole_per_second-time","micromole per second","Î¼mol/s",Micromole, SecondTime);
		MicromolePerSecondTime.addAlternativeName("micromol per seconde","nl");
		MicromolePerSecondTime.addAlternativeSymbol("Î¼mol s-1");
		MicromolePerSecondTime.addAlternativeSymbol("Î¼molÂ·s-1");
		MicromolePerSecondTimeGram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/micromole_per_second-time_gram","micromole per second gram","Î¼mol/(s g)",MicromolePerSecondTime, Gram);
		MicromolePerSecondTimeGram.addAlternativeSymbol("Î¼mol s-1 g-1");
		MicromolePerSecondTimeGram.addAlternativeSymbol("Î¼molÂ·s-1Â·g-1");
		NanometrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/nanometre_per_second-time","nanometre per second","nm/s",Nanometre, SecondTime);
		NanometrePerSecondTime.addAlternativeName("nanometer per seconde","nl");
		NanometrePerSecondTime.addAlternativeSymbol("nm s-1");
		NanometrePerSecondTime.addAlternativeSymbol("nmÂ·s-1");
		Zebibyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zebibyte","zebibyte","ZiB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.BinaryPrefix.ZEBI);
		CalorieMean = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/calorie-mean", "calorie (mean)", "cal", Joule, 4.19002 );
		CalorieMean.addAlternativeSymbol("c");
		KilocalorieMean = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilocalorie-mean","kilocalorie (mean)","kcal",(SingularUnit)CalorieMean, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Barye = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/barye", "barye", "ba", Pascal, 0.1 );
		MillidegreeCelsius = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millidegree_Celsius","millidegree Celsius","mÂ°C",(SingularUnit)DegreeCelsius, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		MillidegreeCelsius.addAlternativeName("milligraad Celsius","nl");
		Yoctonewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctonewton","yoctonewton","yN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Micronewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/micronewton","micronewton","Î¼N",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		MicronewtonMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/micronewton_metre","micronewton metre","Î¼N m",Micronewton, Metre);
		MicronewtonMetre.addAlternativeName("micronewton meter","nl");
		MicronewtonMetre.addAlternativeSymbol("Î¼NÂ·m");
		ExametrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/exametre_per_second-time","exametre per second","Em/s",Exametre, SecondTime);
		ExametrePerSecondTime.addAlternativeName("exameter per seconde","nl");
		ExametrePerSecondTime.addAlternativeSymbol("Em s-1");
		ExametrePerSecondTime.addAlternativeSymbol("EmÂ·s-1");
		Zeptometre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptometre","zeptometre","zm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Zeptometre.addAlternativeName("zeptometer","nl");
		ZeptometrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/zeptometre_per_second-time","zeptometre per second","zm/s",Zeptometre, SecondTime);
		ZeptometrePerSecondTime.addAlternativeName("zeptometer per seconde","nl");
		ZeptometrePerSecondTime.addAlternativeSymbol("zm s-1");
		ZeptometrePerSecondTime.addAlternativeSymbol("zmÂ·s-1");
		DegreeCelsiusPerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius_per_second-time","degree Celsius per second","Â°C/s",DegreeCelsius, SecondTime);
		DegreeCelsiusPerSecondTime.addAlternativeName("graad Celsius per seconde","nl");
		DegreeCelsiusPerSecondTime.addAlternativeSymbol("Â°C s-1");
		DegreeCelsiusPerSecondTime.addAlternativeSymbol("Â°CÂ·s-1");
		DegreeReaumur = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/degree_Reaumur", "degree RÃ©aumur", "Â°RÃ©", Kelvin, 1.25 );
		DegreeReaumur.addAlternativeName("graad RÃ©aumur","nl");
		DegreeReaumur.addAlternativeSymbol("Â°R");
		DegreeReaumur.addAlternativeSymbol("Â°Re");
		ReaumurScale = factory.createScale("http://www.wurvoc.org/vocabularies/om-1.8/Reaumur_scale","RÃ©aumur scale","null",KelvinScale, -218.52, 1.0, DegreeReaumur);
		ReaumurScale.addAlternativeName("RÃ©aumurschaal","nl");
		Faraday = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/faraday", "faraday", "null", Coulomb, 96485.31 );
		Terakelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terakelvin","terakelvin","TK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Franklin = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/franklin", "franklin", "Fr", Coulomb, 3.335641E-10 );
		MolePerFemtometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_femtometre","mole per femtometre","mol/fm",Mole, Femtometre);
		MolePerFemtometre.addAlternativeName("mole per femtometer","nl");
		MolePerFemtometre.addAlternativeSymbol("mol fm-1");
		MolePerFemtometre.addAlternativeSymbol("molÂ·fm-1");
		GramPerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_square_metre","gram per square metre","g/m2",Gram, SquareMetre);
		GramPerSquareMetre.addAlternativeName("gram per vierkante meter","nl");
		GramPerSquareMetre.addAlternativeSymbol("g m-2");
		GramPerSquareMetre.addAlternativeSymbol("gÂ·m-2");
		GramPerSquareMetreMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_square_metre_metre","gram per square metre metre","g/(m2 m)",GramPerSquareMetre, Metre);
		GramPerSquareMetreMetre.addAlternativeSymbol("g m-2 m-1");
		GramPerSquareMetreMetre.addAlternativeSymbol("gÂ·m-2Â·m-1");
		GigasecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigasecond-time","gigasecond","Gs",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		GigasecondTime.addAlternativeName("gigaseconde","nl");
		GigasecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/gigasecond-time_squared","gigasecond squared","Gs2",GigasecondTime, 2.0);
		GigasecondTimeSquared.addAlternativeName("gigaseconde kwadraat","nl");
		Femtohertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtohertz","femtohertz","fHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		CubicMicrometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_micrometre","cubic micrometre","Î¼m3",Micrometre, 3.0);
		CubicMicrometre.addAlternativeName("kubieke micrometer","nl");
		ReciprocalCubicCentimetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_cubic_centimetre","reciprocal cubic centimetre","cm-3",Centimetre, -3.0);
		ReciprocalCubicCentimetre.addAlternativeName("omgekeerde kubieke centimeter","nl");
		HongKongDollar = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Hong_Kong_dollar", "Hong Kong dollar", "null", null);
		Exaweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exaweber","exaweber","EWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Femtotesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtotesla","femtotesla","fT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Centilumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centilumen","centilumen","clm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Tebibit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/tebibit","tebibit","Tibit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.BinaryPrefix.TEBI);
		Attomole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attomole","attomole","amol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Attomole.addAlternativeName("attomol","nl");
		AttomolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/attomole_per_metre","attomole per metre","amol/m",Attomole, Metre);
		AttomolePerMetre.addAlternativeName("attomole per meter","nl");
		AttomolePerMetre.addAlternativeSymbol("amol m-1");
		AttomolePerMetre.addAlternativeSymbol("amolÂ·m-1");
		Zettavolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettavolt","zettavolt","ZV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Abohm = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/abohm", "abohm", "abÎ©", Ohm, 1.0E-9 );
		Decigram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decigram","decigram","dg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		MolePerMole = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_mole","mole per mole","mol/mol",Mole, Mole);
		MolePerMole.addAlternativeName("mol per mol","nl");
		MolePerMole.addAlternativeSymbol("mol mol-1");
		MolePerMole.addAlternativeSymbol("molÂ·mol-1");
		Zeptosievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptosievert","zeptosievert","zSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Femtocoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtocoulomb","femtocoulomb","fC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Zettabit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettabit","zettabit","Zbit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Gigahertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigahertz","gigahertz","GHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Megajoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megajoule","megajoule","MJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		MegajoulePerSquareMetreDay = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/megajoule_per_square_metre_day","megajoule per square metre day","MJ/(m2 d)",Megajoule, SquareMetreDay);
		MegajoulePerSquareMetreDay.addAlternativeName("megajoule per vierkante meter dag","nl");
		MegajoulePerSquareMetreDay.addAlternativeSymbol("MJ m-2 d-1");
		MegajoulePerSquareMetreDay.addAlternativeSymbol("MJÂ·m-2Â·d-1");
		GramPerExalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_exalitre","gram per exalitre","g/El",Gram, Exalitre);
		GramPerExalitre.addAlternativeName("gram per exaliter","nl");
		GramPerExalitre.addAlternativeSymbol("g El-1");
		GramPerExalitre.addAlternativeSymbol("gÂ·El-1");
		ZeptometrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/zeptometre_per_second-time_squared","zeptometre per second squared","zm/s2",Zeptometre, SecondTimeSquared);
		ZeptometrePerSecondTimeSquared.addAlternativeName("zeptometer per seconde kwadraat","nl");
		ZeptometrePerSecondTimeSquared.addAlternativeSymbol("zm s-2");
		ZeptometrePerSecondTimeSquared.addAlternativeSymbol("zmÂ·s-2");
		Cup = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/cup", "cup", "null", CubicMetre, 2.365882E-4 );
		SquarePicometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_picometre","square picometre","pm2",Picometre, 2.0);
		SquarePicometre.addAlternativeName("vierkante picometer","nl");
		MileUSSurvey = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/mile-US_survey", "mile (US survey)", "null", Metre, 1609.347 );
		Shake = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/shake", "shake", "null", SecondTime, 1.0E-8 );
		Teranewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teranewton","teranewton","TN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Decigray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decigray","decigray","dGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		CubicMetrePerMole = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/cubic_metre_per_mole","cubic metre per mole","m3/mol",CubicMetre, Mole);
		CubicMetrePerMole.addAlternativeName("kubieke meter per mol","nl");
		CubicMetrePerMole.addAlternativeSymbol("m3 mol-1");
		CubicMetrePerMole.addAlternativeSymbol("m3Â·mol-1");
		Nanogram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanogram","nanogram","ng",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		NanogramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/nanogram_per_litre","nanogram per litre","ng/l",Nanogram, Litre);
		NanogramPerLitre.addAlternativeName("nanogram per liter","nl");
		NanogramPerLitre.addAlternativeSymbol("ng l-1");
		NanogramPerLitre.addAlternativeSymbol("ngÂ·l-1");
		Degree = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/degree", "degree", "Â°", Radian, 0.01745329 );
		Degree.addAlternativeName("graad","nl");
		HourHourAngle = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/hour-hour_angle", "hour (hour angle)", "h", Degree, 15.0 );
		HourHourAngle.addAlternativeName("uur (uurhoek)","nl");
		Millibecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millibecquerel","millibecquerel","mBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Picotesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picotesla","picotesla","pT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		MetrePerHectosecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_hectosecond-time","metre per hectosecond","m/hs",Metre, HectosecondTime);
		MetrePerHectosecondTime.addAlternativeName("meter per hectoseconde","nl");
		MetrePerHectosecondTime.addAlternativeSymbol("m hs-1");
		MetrePerHectosecondTime.addAlternativeSymbol("mÂ·hs-1");
		Microweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microweber","microweber","Î¼Wb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		MetreToThePower2 = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/metre_to_the_power_-2","metre to the power -2","m-2",Metre, -2.0);
		MetreToThePower2.addAlternativeName("meter tot de macht -2","nl");
		ReciprocalMetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_metre","reciprocal metre","m-1",Metre, -1.0);
		ReciprocalMetre.addAlternativeName("omgekeerder meter","nl");
		MetreToThePower2ReciprocalMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/metre_to_the_power_-2_reciprocal_metre","metre to the power -2 reciprocal metre","m-2 m-1",MetreToThePower2, ReciprocalMetre);
		MetreToThePower2ReciprocalMetre.addAlternativeName("meter tot de macht -2 omgekeerde meter","nl");
		MetreToThePower2ReciprocalMetre.addAlternativeSymbol("m-2Â·m-1");
		MoleMicrometre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/mole_micrometre","mole micrometre","mol Î¼m",Mole, Micrometre);
		MoleMicrometre.addAlternativeName("mol micrometer","nl");
		MoleMicrometre.addAlternativeSymbol("molÂ·Î¼m");
		ReciprocalSquareCentimetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_square_centimetre","reciprocal square centimetre","cm-2",Centimetre, -2.0);
		ReciprocalSquareCentimetre.addAlternativeName("omgekeerde vierkante centimeter","nl");
		MoleMicrometreReciprocalSquareCentimetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/mole_micrometre_reciprocal_square_centimetre","mole micrometre reciprocal square centimetre","mol Î¼m cm-2",MoleMicrometre, ReciprocalSquareCentimetre);
		MoleMicrometreReciprocalSquareCentimetre.addAlternativeName("mol micrometer omgekeerde vierkante centimeter","nl");
		MoleMicrometreReciprocalSquareCentimetre.addAlternativeSymbol("molÂ·Î¼mÂ·cm-2");
		Yottamole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottamole","yottamole","Ymol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Yottamole.addAlternativeName("yottamol","nl");
		Zeptosiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptosiemens","zeptosiemens","zS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Attoradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attoradian","attoradian","arad",(SingularUnit)Radian, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Attoradian.addAlternativeName("attoradiaal","nl");
		Decisteradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decisteradian","decisteradian","dsr",(SingularUnit)Steradian, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Decisteradian.addAlternativeName("decisteradiaal","nl");
		Pebibyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/pebibyte","pebibyte","PiB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.BinaryPrefix.PEBI);
		MolePerHectometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_hectometre","mole per hectometre","mol/hm",Mole, Hectometre);
		MolePerHectometre.addAlternativeName("mole per hectometer","nl");
		MolePerHectometre.addAlternativeSymbol("mol hm-1");
		MolePerHectometre.addAlternativeSymbol("molÂ·hm-1");
		Megabyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megabyte","megabyte","MB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		MillisecondPlaneAngle = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millisecond-plane_angle","millisecond (plane angle)","mas",(SingularUnit)SecondPlaneAngle, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		MillisecondPlaneAngle.addAlternativeName("milliseconde (hoek)","nl");
		MillisecondPlaneAngle.addAlternativeName("milliboogseconde","nl");
		MillisecondPlaneAngle.addAlternativeName("milliseconde (hoek)","nl");
		MillisecondPlaneAngle.addAlternativeName("milliboogseconde","nl");
		MillisecondPlaneAnglePerYear = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/millisecond-plane_angle_per_year","millisecond (plane_angle) per year","mas/yr",MillisecondPlaneAngle, Year);
		MillisecondPlaneAnglePerYear.addAlternativeName("milliseconde (hoek) per jaar","nl");
		Decafarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decafarad","decafarad","daF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		GramPerZeptolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_zeptolitre","gram per zeptolitre","g/zl",Gram, Zeptolitre);
		GramPerZeptolitre.addAlternativeName("gram per zeptoliter","nl");
		GramPerZeptolitre.addAlternativeSymbol("g zl-1");
		GramPerZeptolitre.addAlternativeSymbol("gÂ·zl-1");
		UnitedStatesDollar = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/United_States_dollar", "United States dollar", "null", null);
		Tebibyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/tebibyte","tebibyte","TiB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.BinaryPrefix.TEBI);
		Picokelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picokelvin","picokelvin","pK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Petametre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petametre","petametre","Pm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Petametre.addAlternativeName("petameter","nl");
		Hectowatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectowatt","hectowatt","hW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		WattPerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_cubic_metre","watt per cubic metre","W/m3",Watt, CubicMetre);
		WattPerCubicMetre.addAlternativeName("watt per kubieke meter","nl");
		WattPerCubicMetre.addAlternativeSymbol("W m-3");
		WattPerCubicMetre.addAlternativeSymbol("WÂ·m-3");
		MegametrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/megametre_per_second-time_squared","megametre per second squared","Mm/s2",Megametre, SecondTimeSquared);
		MegametrePerSecondTimeSquared.addAlternativeName("megameter per seconde kwadraat","nl");
		MegametrePerSecondTimeSquared.addAlternativeSymbol("Mm s-2");
		MegametrePerSecondTimeSquared.addAlternativeSymbol("MmÂ·s-2");
		MolePerGigalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_gigalitre","mole per gigalitre","mol/Gl",Mole, Gigalitre);
		MolePerGigalitre.addAlternativeName("mole per gigaliter","nl");
		MolePerGigalitre.addAlternativeSymbol("mol Gl-1");
		MolePerGigalitre.addAlternativeSymbol("molÂ·Gl-1");
		Kibibyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kibibyte","kibibyte","KiB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.BinaryPrefix.KIBI);
		Microkatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microkatal","microkatal","Î¼kat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Petajoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petajoule","petajoule","PJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		HenryPerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/henry_per_metre","henry per metre","H/m",Henry, Metre);
		HenryPerMetre.addAlternativeName("henry per meter","nl");
		HenryPerMetre.addAlternativeSymbol("H m-1");
		HenryPerMetre.addAlternativeSymbol("HÂ·m-1");
		Picosteradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picosteradian","picosteradian","psr",(SingularUnit)Steradian, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Picosteradian.addAlternativeName("picosteradiaal","nl");
		MillimolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/millimole_per_litre","millimole per litre","mmol/l",Millimole, Litre);
		MillimolePerLitre.addAlternativeName("millimole per liter","nl");
		MillimolePerLitre.addAlternativeSymbol("mmol l-1");
		MillimolePerLitre.addAlternativeSymbol("mmolÂ·l-1");
		PointATA = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/point-ATA", "point (ATA)", "pt", Metre, 3.514598E-4 );
		PicaATA = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/pica-ATA", "pica (ATA)", "null", PointATA, 12.0 );
		JoulePerKelvinMole = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/joule_per_kelvin_mole","joule per kelvin mole","J/(K mol)",Joule, KelvinMole);
		JoulePerKelvinMole.addAlternativeName("joule per kelvin mol","nl");
		JoulePerKelvinMole.addAlternativeSymbol("J K-1 mol-1");
		JoulePerKelvinMole.addAlternativeSymbol("J/(KÂ·mol)");
		JoulePerKelvinMole.addAlternativeSymbol("JÂ·K-1Â·mol-1");
		Decikatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decikatal","decikatal","dkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Megapascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megapascal","megapascal","MPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Millimolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millimolair","millimolair","mM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Teramolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teramolair","teramolair","TM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Picomole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picomole","picomole","pmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Picomole.addAlternativeName("picomol","nl");
		PicomolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/picomole_per_metre","picomole per metre","pmol/m",Picomole, Metre);
		PicomolePerMetre.addAlternativeName("picomole per meter","nl");
		PicomolePerMetre.addAlternativeSymbol("pmol m-1");
		PicomolePerMetre.addAlternativeSymbol("pmolÂ·m-1");
		Deciweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/deciweber","deciweber","dWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Micromolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/micromolair","micromolair","Î¼M",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Decimole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decimole","decimole","dmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Decimole.addAlternativeName("decimol","nl");
		Exakatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exakatal","exakatal","Ekat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		JoulePerMole = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/joule_per_mole","joule per mole","J/mol",Joule, Mole);
		JoulePerMole.addAlternativeName("joule per mol","nl");
		JoulePerMole.addAlternativeSymbol("J mol-1");
		JoulePerMole.addAlternativeSymbol("JÂ·mol-1");
		GramPerHectolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_hectolitre","gram per hectolitre","g/hl",Gram, Hectolitre);
		GramPerHectolitre.addAlternativeName("gram per hectoliter","nl");
		GramPerHectolitre.addAlternativeSymbol("g hl-1");
		GramPerHectolitre.addAlternativeSymbol("gÂ·hl-1");
		Attocandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attocandela","attocandela","acd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		MoleMicrometreReciprocalSquareCentimetreReciprocalSecondTime = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/mole_micrometre_reciprocal_square_centimetre_reciprocal_second-time","mole micrometre reciprocal square centimetre reciprocal second","mol Î¼m cm-2 s-1",MoleMicrometreReciprocalSquareCentimetre, ReciprocalSecondTime);
		MoleMicrometreReciprocalSquareCentimetreReciprocalSecondTime.addAlternativeName("mol micrometer omgekeerde vierkante centimeter omgekeerde seconde","nl");
		MoleMicrometreReciprocalSquareCentimetreReciprocalSecondTime.addAlternativeSymbol("molÂ·Î¼mÂ·cm-2Â·s-1");
		Yottawatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottawatt","yottawatt","YW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Decabecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decabecquerel","decabecquerel","daBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Nanoampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanoampere","nanoampere","nA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Nanoampere.addAlternativeName("nanoampÃ¨re","nl");
		MetrePerMillisecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_millisecond-time","metre per millisecond","m/ms",Metre, MillisecondTime);
		MetrePerMillisecondTime.addAlternativeName("meter per milliseconde","nl");
		MetrePerMillisecondTime.addAlternativeSymbol("m ms-1");
		MetrePerMillisecondTime.addAlternativeSymbol("mÂ·ms-1");
		Microlux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microlux","microlux","Î¼lx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Decanewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decanewton","decanewton","daN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Bar = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/bar", "bar", "bar", Pascal, 100000.0 );
		Microbar = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microbar","microbar","Î¼bar",(SingularUnit)Bar, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Femtoampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtoampere","femtoampere","fA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Femtoampere.addAlternativeName("femtoampÃ¨re","nl");
		LitrePerHour = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/litre_per_hour","litre per hour","l/h",Litre, Hour);
		LitrePerHour.addAlternativeName("liter per uur","nl");
		LitrePerHour.addAlternativeSymbol("l h-1");
		LitrePerHour.addAlternativeSymbol("lÂ·h-1");
		PartsPerMillionPerYear = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/parts_per_million_per_year","parts per million per year","ppm/a",PartsPerMillion, Year);
		PartsPerMillionPerYear.addAlternativeSymbol("ppm a-1");
		PartsPerMillionPerYear.addAlternativeSymbol("ppm y-1");
		PartsPerMillionPerYear.addAlternativeSymbol("ppm yr-1");
		PartsPerMillionPerYear.addAlternativeSymbol("ppm/y");
		PartsPerMillionPerYear.addAlternativeSymbol("ppm/yr");
		PartsPerMillionPerYear.addAlternativeSymbol("ppmÂ·a-1");
		PartsPerMillionPerYear.addAlternativeSymbol("ppmÂ·y-1");
		PartsPerMillionPerYear.addAlternativeSymbol("ppmÂ·yr-1");
		NauticalMile = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/nautical_mile", "nautical mile", "nmi", Metre, 1852.0 );
		NauticalMile.addAlternativeName("zeemijl","nl");
		NauticalMile.addAlternativeSymbol("M");
		NauticalMile.addAlternativeSymbol("NM");
		NauticalMile.addAlternativeSymbol("nm");
		NauticalMilePerHour = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/nautical_mile_per_hour","nautical mile per hour","nmi/h",NauticalMile, Hour);
		NauticalMilePerHour.addAlternativeName("zeemijl per uur","nl");
		NauticalMilePerHour.addAlternativeSymbol("M/h");
		NauticalMilePerHour.addAlternativeSymbol("M h-1");
		NauticalMilePerHour.addAlternativeSymbol("MÂ·h-1");
		NauticalMilePerHour.addAlternativeSymbol("NM h-1");
		NauticalMilePerHour.addAlternativeSymbol("NM/h");
		NauticalMilePerHour.addAlternativeSymbol("NMÂ·h-1");
		NauticalMilePerHour.addAlternativeSymbol("nm h-1");
		NauticalMilePerHour.addAlternativeSymbol("nm/h");
		NauticalMilePerHour.addAlternativeSymbol("nmi h-1");
		NauticalMilePerHour.addAlternativeSymbol("nmiÂ·h-1");
		NauticalMilePerHour.addAlternativeSymbol("nmÂ·h-1");
		Knot = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/knot", "knot", "null", NauticalMilePerHour, 1.0 );
		Knot.addAlternativeName("knoop","nl");
		SquareMetreNanometre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_nanometre","square metre nanometre","m2 nm",SquareMetre, Nanometre);
		SquareMetreNanometre.addAlternativeName("vierkante meter nanometer","nl");
		SquareMetreNanometre.addAlternativeSymbol("m2Â·nm");
		WattPerSteradian = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_steradian","watt per steradian","W/sr",Watt, Steradian);
		WattPerSteradian.addAlternativeName("watt per steradiaal","nl");
		WattPerSteradian.addAlternativeSymbol("W sr-1");
		WattPerSteradian.addAlternativeSymbol("WÂ·sr-1");
		Zeptojoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptojoule","zeptojoule","zJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Femtobecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtobecquerel","femtobecquerel","fBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		MetrePerExasecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_exasecond-time","metre per exasecond","m/Es",Metre, ExasecondTime);
		MetrePerExasecondTime.addAlternativeName("meter per exaseconde","nl");
		MetrePerExasecondTime.addAlternativeSymbol("m Es-1");
		MetrePerExasecondTime.addAlternativeSymbol("mÂ·Es-1");
		Gigacandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigacandela","gigacandela","Gcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Yottalumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottalumen","yottalumen","Ylm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		GramPerMegajoule = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_megajoule","gram per megajoule","g/MJ",Gram, Megajoule);
		GramPerMegajoule.addAlternativeSymbol("g MJ-1");
		GramPerMegajoule.addAlternativeSymbol("gÂ·MJ-1");
		Teracandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teracandela","teracandela","Tcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		MetrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_second-time","metre per second","m/s",Metre, SecondTime);
		MetrePerSecondTime.addAlternativeName("meter per seconde","nl");
		MetrePerSecondTime.addAlternativeSymbol("m s-1");
		MetrePerSecondTime.addAlternativeSymbol("mps");
		MetrePerSecondTime.addAlternativeSymbol("mÂ·s-1");
		MetrePerSecondTimePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_second-time_per_metre","metre per second per metre","m/s/m",MetrePerSecondTime, Metre);
		MetrePerSecondTimePerMetre.addAlternativeName("meter per seconde per metre","nl");
		MetrePerDecisecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_decisecond-time","metre per decisecond","m/ds",Metre, DecisecondTime);
		MetrePerDecisecondTime.addAlternativeName("meter per deciseconde","nl");
		MetrePerDecisecondTime.addAlternativeSymbol("m ds-1");
		MetrePerDecisecondTime.addAlternativeSymbol("mÂ·ds-1");
		HorsepowerWater = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/horsepower-water", "horsepower (water)", "null", Watt, 746.043 );
		CubicMetrePerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/cubic_metre_per_cubic_metre","cubic metre per cubic metre","m3/m3",CubicMetre, CubicMetre);
		CubicMetrePerCubicMetre.addAlternativeName("kubieke meter per kubieke meter","nl");
		CubicMetrePerCubicMetre.addAlternativeSymbol("m3 m-3");
		CubicMetrePerCubicMetre.addAlternativeSymbol("m3Â·m-3");
		KilomolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilomole_per_metre","kilomole per metre","kmol/m",Kilomole, Metre);
		KilomolePerMetre.addAlternativeName("kilomole per meter","nl");
		KilomolePerMetre.addAlternativeSymbol("kmol m-1");
		KilomolePerMetre.addAlternativeSymbol("kmolÂ·m-1");
		MinuteSidereal = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/minute-sidereal", "minute (sidereal)", "null", SecondTime, 59.83617 );
		Abcoulomb = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/abcoulomb", "abcoulomb", "abC", Coulomb, 10.0 );
		ZettasecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettasecond-time","zettasecond","Zs",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		ZettasecondTime.addAlternativeName("zettaseconde","nl");
		ZettasecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/zettasecond-time_squared","zettasecond squared","Zs2",ZettasecondTime, 2.0);
		ZettasecondTimeSquared.addAlternativeName("zettaseconde kwadraat","nl");
		Yoctolumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctolumen","yoctolumen","ylm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		ReciprocalGram = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_gram","reciprocal gram","g-1",Gram, -1.0);
		ReciprocalGram.addAlternativeName("omgekeerde gram","nl");
		Microfarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microfarad","microfarad","Î¼F",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		KilowattHour = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/kilowatt_hour","kilowatt hour","kW h",Kilowatt, Hour);
		KilowattHour.addAlternativeSymbol("kWh");
		KilowattHour.addAlternativeSymbol("kWÂ·h");
		Petatesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petatesla","petatesla","PT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		CaratMass = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/carat-mass", "carat (mass)", "null", Kilogram, 2.0E-4 );
		CaratMass.addAlternativeName("karaat (massa)","nl");
		MicrogramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/microgram_per_litre","microgram per litre","Î¼g/l",Microgram, Litre);
		MicrogramPerLitre.addAlternativeName("microgram per liter","nl");
		MicrogramPerLitre.addAlternativeSymbol("Î¼g l-1");
		MicrogramPerLitre.addAlternativeSymbol("Î¼gÂ·l-1");
		MolePerZeptometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_zeptometre","mole per zeptometre","mol/zm",Mole, Zeptometre);
		MolePerZeptometre.addAlternativeName("mole per zeptometer","nl");
		MolePerZeptometre.addAlternativeSymbol("mol zm-1");
		MolePerZeptometre.addAlternativeSymbol("molÂ·zm-1");
		Zettahenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettahenry","zettahenry","ZH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		HorsepowerBoiler = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/horsepower-boiler", "horsepower (boiler)", "null", Watt, 9809.5 );
		SolarRadius = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/solar_radius", "solar radius", "R_â˜‰", Metre, 6.955E8 );
		MilligramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/milligram_per_litre","milligram per litre","mg/l",Milligram, Litre);
		MilligramPerLitre.addAlternativeName("milligram per liter","nl");
		MilligramPerLitre.addAlternativeSymbol("mg l-1");
		MilligramPerLitre.addAlternativeSymbol("mgÂ·l-1");
		Attometre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attometre","attometre","am",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Attometre.addAlternativeName("attometer","nl");
		AttometrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/attometre_per_second-time","attometre per second","am/s",Attometre, SecondTime);
		AttometrePerSecondTime.addAlternativeName("attometer per seconde","nl");
		AttometrePerSecondTime.addAlternativeSymbol("am s-1");
		AttometrePerSecondTime.addAlternativeSymbol("amÂ·s-1");
		Barn = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/barn", "barn", "b", SquareMetre, 1.0E-28 );
		HectareDay = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/hectare_day","hectare day","ha d",Hectare, Day);
		HectareDay.addAlternativeName("hectare dag","nl");
		HectareDay.addAlternativeSymbol("haÂ·d");
		KilogramPerHectareDay = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_hectare_day","kilogram per hectare day","kg/(ha d)",Kilogram, HectareDay);
		KilogramPerHectareDay.addAlternativeName("kilogram per hectare dag","nl");
		KilogramPerHectareDay.addAlternativeSymbol("kg ha-1 d-1");
		KilogramPerHectareDay.addAlternativeSymbol("kgÂ·ha-1Â·d-1");
		MolePerKilolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_kilolitre","mole per kilolitre","mol/kl",Mole, Kilolitre);
		MolePerKilolitre.addAlternativeName("mole per kiloliter","nl");
		MolePerKilolitre.addAlternativeSymbol("mol kl-1");
		MolePerKilolitre.addAlternativeSymbol("molÂ·kl-1");
		Millihenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millihenry","millihenry","mH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Terabit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terabit","terabit","Tbit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Nanotesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanotesla","nanotesla","nT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		JoulePerSquareMetreSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/joule_per_square_metre_second-time","joule per square metre second","J/(m2 s)",Joule, SquareMetreSecondTime);
		JoulePerSquareMetreSecondTime.addAlternativeName("joule per vierkante meter seconde","nl");
		JoulePerSquareMetreSecondTime.addAlternativeSymbol("J m-2 s-1");
		JoulePerSquareMetreSecondTime.addAlternativeSymbol("JÂ·m-2Â·s-1");
		YearTropical = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/year-tropical", "year (tropical)", "null", SecondTime, 3.155693E7 );
		Yottapascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottapascal","yottapascal","YPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		LiquidPintUS = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/liquid_pint-US", "liquid pint (US)", "liq pt", CubicMetre, 4.731765E-4 );
		Attofarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attofarad","attofarad","aF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Decivolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decivolt","decivolt","dV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Picocandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picocandela","picocandela","pcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		N25Millilitre = null;
		Megacandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megacandela","megacandela","Mcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Kilosievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilosievert","kilosievert","kSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Nanomolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanomolair","nanomolair","nM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Megalumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megalumen","megalumen","Mlm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Femtokelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtokelvin","femtokelvin","fK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Microcandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microcandela","microcandela","Î¼cd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		CentimetrePerDay = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/centimetre_per_day","centimetre per day","cm/d",Centimetre, Day);
		CentimetrePerDay.addAlternativeName("centimeter per dag","nl");
		CentimetrePerDay.addAlternativeSymbol("cm d-1");
		CentimetrePerDay.addAlternativeSymbol("cmÂ·d-1");
		Nanomole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanomole","nanomole","nmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Nanomole.addAlternativeName("nanomol","nl");
		NanomolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/nanomole_per_litre","nanomole per litre","nmol/l",Nanomole, Litre);
		NanomolePerLitre.addAlternativeName("nanomole per liter","nl");
		NanomolePerLitre.addAlternativeSymbol("nmol l-1");
		NanomolePerLitre.addAlternativeSymbol("nmolÂ·l-1");
		MinuteTime = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/minute-time", "minute", "min", SecondTime, 60.0 );
		MinuteTime.addAlternativeName("minuut","nl");
		Abhenry = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/abhenry", "abhenry", "abH", Henry, 1.0E-9 );
		Teralitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teralitre","teralitre","Tl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Teralitre.addAlternativeName("teraliter","nl");
		GramPerDecilitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_decilitre","gram per decilitre","g/dl",Gram, Decilitre);
		GramPerDecilitre.addAlternativeName("gram per deciliter","nl");
		GramPerDecilitre.addAlternativeSymbol("g dl-1");
		GramPerDecilitre.addAlternativeSymbol("gÂ·dl-1");
		Nanolumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanolumen","nanolumen","nlm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Zeptotesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptotesla","zeptotesla","zT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		SquareZeptometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_zeptometre","square zeptometre","zm2",Zeptometre, 2.0);
		SquareZeptometre.addAlternativeName("vierkante zeptometer","nl");
		Attolitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attolitre","attolitre","al",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Attolitre.addAlternativeName("attoliter","nl");
		MolePerDecametre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_decametre","mole per decametre","mol/dam",Mole, Decametre);
		MolePerDecametre.addAlternativeName("mole per decameter","nl");
		MolePerDecametre.addAlternativeSymbol("mol dam-1");
		MolePerDecametre.addAlternativeSymbol("molÂ·dam-1");
		PintImperial = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/pint-Imperial", "pint (Imperial)", "null", Millilitre, 568.26125 );
		DecidegreeCelsius = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decidegree_Celsius","decidegree Celsius","dÂ°C",(SingularUnit)DegreeCelsius, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		DecidegreeCelsius.addAlternativeName("decigraad Celsius","nl");
		MolePerMegalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_megalitre","mole per megalitre","mol/Ml",Mole, Megalitre);
		MolePerMegalitre.addAlternativeName("mole per megaliter","nl");
		MolePerMegalitre.addAlternativeSymbol("mol Ml-1");
		MolePerMegalitre.addAlternativeSymbol("molÂ·Ml-1");
		Yobibit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yobibit","yobibit","Yibit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.BinaryPrefix.YOBI);
		HorsepowerElectric = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/horsepower-electric", "horsepower (electric)", "null", Watt, 746.0 );
		Zeptosteradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptosteradian","zeptosteradian","zsr",(SingularUnit)Steradian, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Zeptosteradian.addAlternativeName("zeptosteradiaal","nl");
		MegaeuroPerPetajoule = null;
		Millicandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millicandela","millicandela","mcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		ReciprocalWatt = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_watt","reciprocal watt","W-1",Watt, -1.0);
		ReciprocalWatt.addAlternativeName("omgekeerde watt","nl");
		Zettabyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettabyte","zettabyte","ZB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Gigametre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigametre","gigametre","Gm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Gigametre.addAlternativeName("gigameter","nl");
		GigametrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gigametre_per_second-time","gigametre per second","Gm/s",Gigametre, SecondTime);
		GigametrePerSecondTime.addAlternativeName("gigameter per seconde","nl");
		GigametrePerSecondTime.addAlternativeSymbol("Gm s-1");
		GigametrePerSecondTime.addAlternativeSymbol("GmÂ·s-1");
		Millinewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millinewton","millinewton","mN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		MetreToThePower2ReciprocalGram = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/metre_to_the_power_-2_reciprocal_gram","metre to the power -2 reciprocal gram","m-2 g-1",MetreToThePower2, ReciprocalGram);
		MetreToThePower2ReciprocalGram.addAlternativeName("meter tot de macht -2 omgekeerde gram","nl");
		MetreToThePower2ReciprocalGram.addAlternativeSymbol("m-2Â·g-1");
		WattPerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_square_metre","watt per square metre","W/m2",Watt, SquareMetre);
		WattPerSquareMetre.addAlternativeName("watt per vierkante meter","nl");
		WattPerSquareMetre.addAlternativeSymbol("W m-2");
		WattPerSquareMetre.addAlternativeSymbol("WÂ·m-2");
		KilogramPerKilogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_kilogram","kilogram per kilogram","kg/kg",Kilogram, Kilogram);
		KilogramPerKilogram.addAlternativeSymbol("kg kg-1");
		KilogramPerKilogram.addAlternativeSymbol("kgÂ·kg-1");
		Decaampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decaampere","decaampere","daA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Decaampere.addAlternativeName("decaampÃ¨re","nl");
		DeltaA450 = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/delta_A450", "delta A450", "null", null);
		DeltaA450PerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/delta_A450_per_second-time","delta A450 per second","null",DeltaA450, SecondTime);
		DeltaA450PerSecondTime.addAlternativeName("delta A450 per seconde","nl");
		MetrePerDay = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_day","metre per day","m/d",Metre, Day);
		MetrePerDay.addAlternativeName("meter per dag","nl");
		MetrePerDay.addAlternativeSymbol("m d-1");
		MetrePerDay.addAlternativeSymbol("mÂ·d-1");
		CoulombMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/coulomb_metre","coulomb metre","C m",Coulomb, Metre);
		CoulombMetre.addAlternativeName("coulomb meter","nl");
		CoulombMetre.addAlternativeSymbol("CÂ·m");
		MillimetrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/millimetre_per_second-time","millimetre per second","mm/s",Millimetre, SecondTime);
		MillimetrePerSecondTime.addAlternativeName("millimeter per seconde","nl");
		MillimetrePerSecondTime.addAlternativeSymbol("mm s-1");
		MillimetrePerSecondTime.addAlternativeSymbol("mmÂ·s-1");
		GramPerSquareMetreCentimetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_square_metre_centimetre","gram per square metre centimetre","g/(m2 cm)",GramPerSquareMetre, Centimetre);
		GramPerSquareMetreCentimetre.addAlternativeSymbol("g m-2 cm-1");
		GramPerSquareMetreCentimetre.addAlternativeSymbol("gÂ·m-2Â·cm-1");
		DecimetrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/decimetre_per_second-time","decimetre per second","dm/s",Decimetre, SecondTime);
		DecimetrePerSecondTime.addAlternativeName("decimeter per seconde","nl");
		DecimetrePerSecondTime.addAlternativeSymbol("dm s-1");
		DecimetrePerSecondTime.addAlternativeSymbol("dmÂ·s-1");
		Euro = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/euro", "euro", "null", null);
		Megagray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megagray","megagray","MGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Lambert = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/lambert", "lambert", "null", CandelaPerSquareMetre, 3183.099 );
		Baud = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/baud", "baud", "Bd", null);
		CubicDecimetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_decimetre","cubic decimetre","dm3",Decimetre, 3.0);
		CubicDecimetre.addAlternativeName("kubieke decimeter","nl");
		Femtovolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtovolt","femtovolt","fV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Megagram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megagram","megagram","Mg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Centihertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centihertz","centihertz","cHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Gibibit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gibibit","gibibit","Gibit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.BinaryPrefix.GIBI);
		KilosecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/kilosecond-time_squared","kilosecond squared","ks2",KilosecondTime, 2.0);
		KilosecondTimeSquared.addAlternativeName("kiloseconde kwadraat","nl");
		MetrePerKilosecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_kilosecond-time_squared","metre per kilosecond squared","m/ks2",Metre, KilosecondTimeSquared);
		MetrePerKilosecondTimeSquared.addAlternativeName("meter per kiloseconde kwadraat","nl");
		MetrePerKilosecondTimeSquared.addAlternativeSymbol("m ks-2");
		MetrePerKilosecondTimeSquared.addAlternativeSymbol("mÂ·ks-2");
		Femtolumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtolumen","femtolumen","flm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Picoampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picoampere","picoampere","pA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Picoampere.addAlternativeName("picoampÃ¨re","nl");
		SquarePetametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_petametre","square petametre","Pm2",Petametre, 2.0);
		SquarePetametre.addAlternativeName("vierkante petameter","nl");
		FluidOunceImperial = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/fluid_ounce-Imperial", "fluid ounce (Imperial)", "fl oz", CubicMetre, 2.841306E-5 );
		MegagramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/megagram_per_litre","megagram per litre","Mg/l",Megagram, Litre);
		MegagramPerLitre.addAlternativeName("megagram per liter","nl");
		MegagramPerLitre.addAlternativeSymbol("Mg l-1");
		MegagramPerLitre.addAlternativeSymbol("MgÂ·l-1");
		Microsievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microsievert","microsievert","Î¼Sv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Yoctolux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctolux","yoctolux","ylx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		GramPerKilolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_kilolitre","gram per kilolitre","g/kl",Gram, Kilolitre);
		GramPerKilolitre.addAlternativeName("gram per kiloliter","nl");
		GramPerKilolitre.addAlternativeSymbol("g kl-1");
		GramPerKilolitre.addAlternativeSymbol("gÂ·kl-1");
		CubicPetametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_petametre","cubic petametre","Pm3",Petametre, 3.0);
		CubicPetametre.addAlternativeName("kubieke petameter","nl");
		Mebibyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/mebibyte","mebibyte","MiB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.BinaryPrefix.MEBI);
		Kilobecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilobecquerel","kilobecquerel","kBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		MillimetrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/millimetre_per_second-time_squared","millimetre per second squared","mm/s2",Millimetre, SecondTimeSquared);
		MillimetrePerSecondTimeSquared.addAlternativeName("millimeter per seconde kwadraat","nl");
		MillimetrePerSecondTimeSquared.addAlternativeSymbol("mm s-2");
		MillimetrePerSecondTimeSquared.addAlternativeSymbol("mmÂ·s-2");
		MolePerTerametre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_terametre","mole per terametre","mol/Tm",Mole, Terametre);
		MolePerTerametre.addAlternativeName("mole per terameter","nl");
		MolePerTerametre.addAlternativeSymbol("mol Tm-1");
		MolePerTerametre.addAlternativeSymbol("molÂ·Tm-1");
		Attopascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attopascal","attopascal","aPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Zettakatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettakatal","zettakatal","Zkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		DecimolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/decimole_per_litre","decimole per litre","dmol/l",Decimole, Litre);
		DecimolePerLitre.addAlternativeName("decimole per liter","nl");
		DecimolePerLitre.addAlternativeSymbol("dmol l-1");
		DecimolePerLitre.addAlternativeSymbol("dmolÂ·l-1");
		Gigahenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigahenry","gigahenry","GH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		MilligramPerHectogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/milligram_per_hectogram","milligram per hectogram","mg/hg",Milligram, Hectogram);
		MilligramPerHectogram.addAlternativeSymbol("mg hg-1");
		MilligramPerHectogram.addAlternativeSymbol("mgÂ·hg-1");
		Microlitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microlitre","microlitre","Î¼l",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Microlitre.addAlternativeName("microliter","nl");
		Microlitre.addAlternativeName("ul","");
		GramPerMicrolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_microlitre","gram per microlitre","g/Î¼l",Gram, Microlitre);
		GramPerMicrolitre.addAlternativeName("gram per microliter","nl");
		GramPerMicrolitre.addAlternativeSymbol("g Î¼l-1");
		GramPerMicrolitre.addAlternativeSymbol("gÂ·Î¼l-1");
		Yottalitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottalitre","yottalitre","Yl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Yottalitre.addAlternativeName("yottaliter","nl");
		MolePerYottalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_yottalitre","mole per yottalitre","mol/Yl",Mole, Yottalitre);
		MolePerYottalitre.addAlternativeName("mole per yottaliter","nl");
		MolePerYottalitre.addAlternativeSymbol("mol Yl-1");
		MolePerYottalitre.addAlternativeSymbol("molÂ·Yl-1");
		MicrosecondPlaneAngle = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microsecond-plane_angle","microsecond (plane angle)","Î¼as",(SingularUnit)SecondPlaneAngle, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		MicrosecondPlaneAngle.addAlternativeName("microseconde (hoek)","nl");
		MicrosecondPlaneAngle.addAlternativeName("microboogseconde","nl");
		MicrosecondPlaneAngle.addAlternativeName("microseconde (hoek)","nl");
		MicrosecondPlaneAngle.addAlternativeName("microboogseconde","nl");
		Nanokelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanokelvin","nanokelvin","nK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		PointPostscript = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/point-Postscript", "point (Postscript)", "pt", Inch, 0.013888888888888888 );
		PicaPostscript = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/pica-Postscript", "pica (Postscript)", "null", PointPostscript, 12.0 );
		GrayPerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gray_per_second-time","gray per second","Gy/s",Gray, SecondTime);
		GrayPerSecondTime.addAlternativeName("gray per seconde","nl");
		GrayPerSecondTime.addAlternativeSymbol("Gy s-1");
		GrayPerSecondTime.addAlternativeSymbol("GyÂ·s-1");
		Zeptofarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptofarad","zeptofarad","zF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		HectomolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/hectomole_per_litre","hectomole per litre","hmol/l",Hectomole, Litre);
		HectomolePerLitre.addAlternativeName("hectomole per liter","nl");
		HectomolePerLitre.addAlternativeSymbol("hmol l-1");
		HectomolePerLitre.addAlternativeSymbol("hmolÂ·l-1");
		Teraohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teraohm","teraohm","TÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Megavolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megavolt","megavolt","MV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		MicromolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/micromole_per_litre","micromole per litre","Î¼mol/l",Micromole, Litre);
		MicromolePerLitre.addAlternativeName("micromole per liter","nl");
		MicromolePerLitre.addAlternativeSymbol("Î¼mol l-1");
		MicromolePerLitre.addAlternativeSymbol("Î¼molÂ·l-1");
		Megahertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megahertz","megahertz","MHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		NanometrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/nanometre_per_second-time_squared","nanometre per second squared","nm/s2",Nanometre, SecondTimeSquared);
		NanometrePerSecondTimeSquared.addAlternativeName("nanometer per seconde kwadraat","nl");
		NanometrePerSecondTimeSquared.addAlternativeSymbol("nm s-2");
		NanometrePerSecondTimeSquared.addAlternativeSymbol("nmÂ·s-2");
		Decamole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decamole","decamole","damol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Decamole.addAlternativeName("decamol","nl");
		DecamolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/decamole_per_litre","decamole per litre","damol/l",Decamole, Litre);
		DecamolePerLitre.addAlternativeName("decamole per liter","nl");
		DecamolePerLitre.addAlternativeSymbol("damol l-1");
		DecamolePerLitre.addAlternativeSymbol("damolÂ·l-1");
		Femtomolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtomolair","femtomolair","fM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		PicosecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/picosecond-time_squared","picosecond squared","ps2",PicosecondTime, 2.0);
		PicosecondTimeSquared.addAlternativeName("picoseconde kwadraat","nl");
		MetrePerPicosecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_picosecond-time_squared","metre per picosecond squared","m/ps2",Metre, PicosecondTimeSquared);
		MetrePerPicosecondTimeSquared.addAlternativeName("meter per picoseconde kwadraat","nl");
		MetrePerPicosecondTimeSquared.addAlternativeSymbol("m ps-2");
		MetrePerPicosecondTimeSquared.addAlternativeSymbol("mÂ·ps-2");
		Gigakelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigakelvin","gigakelvin","GK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		CubicZeptometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_zeptometre","cubic zeptometre","zm3",Zeptometre, 3.0);
		CubicZeptometre.addAlternativeName("kubieke zeptometer","nl");
		SolarMassPerCubicParsec = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/solar_mass_per_cubic_parsec","solar mass per cubic parsec","M_â˜‰/pc3",SolarMass, CubicParsec);
		SolarMassPerCubicParsec.addAlternativeName("zonsmassa per kubieke parsec","nl");
		SolarMassPerCubicParsec.addAlternativeSymbol("M_â˜‰ pc-3");
		SolarMassPerCubicParsec.addAlternativeSymbol("M_â˜‰Â·pc-3");
		MegamolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/megamole_per_metre","megamole per metre","Mmol/m",Megamole, Metre);
		MegamolePerMetre.addAlternativeName("megamole per meter","nl");
		MegamolePerMetre.addAlternativeSymbol("Mmol m-1");
		MegamolePerMetre.addAlternativeSymbol("MmolÂ·m-1");
		BritishThermalUnit59F = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/British_thermal_unit-59_F", "British thermal unit (59 Â°F)", "Btu", Joule, 1054.8 );
		Centiohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centiohm","centiohm","cÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Attocoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attocoulomb","attocoulomb","aC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Mebibit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/mebibit","mebibit","Mibit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.BinaryPrefix.MEBI);
		Hectoohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectoohm","hectoohm","hÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Kilocandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilocandela","kilocandela","kcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Kilokelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilokelvin","kilokelvin","kK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Yottacoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottacoulomb","yottacoulomb","YC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Zettacoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettacoulomb","zettacoulomb","ZC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		MicrometrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/micrometre_per_second-time_squared","micrometre per second squared","Î¼m/s2",Micrometre, SecondTimeSquared);
		MicrometrePerSecondTimeSquared.addAlternativeName("micrometer per seconde kwadraat","nl");
		MicrometrePerSecondTimeSquared.addAlternativeSymbol("Î¼m s-2");
		MicrometrePerSecondTimeSquared.addAlternativeSymbol("Î¼mÂ·s-2");
		Microampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microampere","microampere","Î¼A",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Microampere.addAlternativeName("microampÃ¨re","nl");
		AtmosphereTechnical = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/atmosphere-technical", "atmosphere (technical)", "at", Pascal, 98066.5 );
		Gigaampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigaampere","gigaampere","GA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Gigaampere.addAlternativeName("gigaampÃ¨re","nl");
		Kilonewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilonewton","kilonewton","kN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Millihertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millihertz","millihertz","mHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Microsiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microsiemens","microsiemens","Î¼S",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Millisiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millisiemens","millisiemens","mS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Pebibit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/pebibit","pebibit","Pibit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.BinaryPrefix.PEBI);
		Femtolitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtolitre","femtolitre","fl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Femtolitre.addAlternativeName("femtoliter","nl");
		ColonyFormingUnitPer25Millilitre = null;
		MetrePerMicrosecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_microsecond-time","metre per microsecond","m/Î¼s",Metre, MicrosecondTime);
		MetrePerMicrosecondTime.addAlternativeName("meter per microseconde","nl");
		MetrePerMicrosecondTime.addAlternativeSymbol("m Î¼s-1");
		MetrePerMicrosecondTime.addAlternativeSymbol("mÂ·Î¼s-1");
		ExasecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/exasecond-time_squared","exasecond squared","Es2",ExasecondTime, 2.0);
		ExasecondTimeSquared.addAlternativeName("exaseconde kwadraat","nl");
		DegreeFahrenheit = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/degree_Fahrenheit", "degree Fahrenheit", "Â°F", Kelvin, 0.5555556 );
		DegreeFahrenheit.addAlternativeName("graad Fahrenheit","nl");
		FahrenheitScale = factory.createScale("http://www.wurvoc.org/vocabularies/om-1.8/Fahrenheit_scale","Fahrenheit scale","null",KelvinScale, -459.67, 1.8, DegreeFahrenheit);
		FahrenheitScale.addAlternativeName("Fahrenheitschaal","nl");
		HundredweightBritish = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/hundredweight-British", "hundredweight (British)", "null", Kilogram, 50.80235 );
		HourSidereal = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/hour-sidereal", "hour (sidereal)", "null", SecondTime, 3590.17 );
		YottametrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/yottametre_per_second-time_squared","yottametre per second squared","Ym/s2",Yottametre, SecondTimeSquared);
		YottametrePerSecondTimeSquared.addAlternativeName("yottameter per seconde kwadraat","nl");
		YottametrePerSecondTimeSquared.addAlternativeSymbol("Ym s-2");
		YottametrePerSecondTimeSquared.addAlternativeSymbol("YmÂ·s-2");
		Terahertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terahertz","terahertz","THz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		KilogramSecondTimeToThePower2 = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_second-time_to_the_power_-2","reciprocal metre kilogram","m-1 kg",Kilogram, SecondTimeToThePower2);
		KilogramSecondTimeToThePower2.addAlternativeName("omgekeerde meter kilogram","nl");
		KilogramSecondTimeToThePower2.addAlternativeSymbol("m-1Â·kg");
		DecigramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/decigram_per_litre","decigram per litre","dg/l",Decigram, Litre);
		DecigramPerLitre.addAlternativeName("decigram per liter","nl");
		DecigramPerLitre.addAlternativeSymbol("dg l-1");
		DecigramPerLitre.addAlternativeSymbol("dgÂ·l-1");
		Yoctocandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctocandela","yoctocandela","ycd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Cord = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/cord", "cord", "null", CubicMetre, 3.624556 );
		CoulombPerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/coulomb_per_cubic_metre","coulomb per cubic metre","C/m3",Coulomb, CubicMetre);
		CoulombPerCubicMetre.addAlternativeName("coulomb per kubieke meter","nl");
		CoulombPerCubicMetre.addAlternativeSymbol("C m-3");
		CoulombPerCubicMetre.addAlternativeSymbol("CÂ·m-3");
		MetrePerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_cubic_metre","metre per cubic metre","m/m3",Metre, CubicMetre);
		MetrePerCubicMetre.addAlternativeName("meter per kubieke meter","nl");
		MetrePerCubicMetre.addAlternativeSymbol("m m-3");
		MetrePerCubicMetre.addAlternativeSymbol("mÂ·m-3");
		Picogram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picogram","picogram","pg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		PicogramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/picogram_per_litre","picogram per litre","pg/l",Picogram, Litre);
		PicogramPerLitre.addAlternativeName("picogram per liter","nl");
		PicogramPerLitre.addAlternativeSymbol("pg l-1");
		PicogramPerLitre.addAlternativeSymbol("pgÂ·l-1");
		Petafarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petafarad","petafarad","PF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Kilokatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilokatal","kilokatal","kkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Teralumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teralumen","teralumen","Tlm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		GramPerKilogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_kilogram","gram per kilogram","g/kg",Gram, Kilogram);
		GramPerKilogram.addAlternativeSymbol("g kg-1");
		GramPerKilogram.addAlternativeSymbol("gÂ·kg-1");
		SwissFranc = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Swiss_franc", "Swiss franc", "null", null);
		MolePerYoctolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_yoctolitre","mole per yoctolitre","mol/yl",Mole, Yoctolitre);
		MolePerYoctolitre.addAlternativeName("mole per yoctoliter","nl");
		MolePerYoctolitre.addAlternativeSymbol("mol yl-1");
		MolePerYoctolitre.addAlternativeSymbol("molÂ·yl-1");
		MetrePerZettasecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_zettasecond-time_squared","metre per zettasecond squared","m/Zs2",Metre, ZettasecondTimeSquared);
		MetrePerZettasecondTimeSquared.addAlternativeName("meter per zettaseconde kwadraat","nl");
		MetrePerZettasecondTimeSquared.addAlternativeSymbol("m Zs-2");
		MetrePerZettasecondTimeSquared.addAlternativeSymbol("mÂ·Zs-2");
		Megahenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megahenry","megahenry","MH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		SouthKoreanWon = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/South_Korean_won", "South Korean won", "null", null);
		Decagram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decagram","decagram","dag",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		DecagramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/decagram_per_litre","decagram per litre","dag/l",Decagram, Litre);
		DecagramPerLitre.addAlternativeName("decagram per liter","nl");
		DecagramPerLitre.addAlternativeSymbol("dag l-1");
		DecagramPerLitre.addAlternativeSymbol("dagÂ·l-1");
		Millilumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millilumen","millilumen","mlm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Zettaohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettaohm","zettaohm","ZÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		ReciprocalKelvin = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_kelvin","reciprocal kelvin","K-1",Kelvin, -1.0);
		ReciprocalKelvin.addAlternativeName("omgekeerde kelvin","nl");
		KilogramPerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_second-time","kilogram per second","kg/s",Kilogram, SecondTime);
		KilogramPerSecondTime.addAlternativeName("kilogram per seconde","nl");
		KilogramPerSecondTime.addAlternativeSymbol("kg s-1");
		KilogramPerSecondTime.addAlternativeSymbol("kgÂ·s-1");
		Centiradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centiradian","centiradian","crad",(SingularUnit)Radian, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Centiradian.addAlternativeName("centiradiaal","nl");
		Picovolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picovolt","picovolt","pV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		SteradianSquareMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/steradian_square_metre","steradian square metre","sr m2",Steradian, SquareMetre);
		SteradianSquareMetre.addAlternativeName("steradiaal vierkante meter","nl");
		SteradianSquareMetre.addAlternativeSymbol("srÂ·m2");
		SteradianSquareMetreHertz = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/steradian_square_metre_hertz","steradian square metre hertz","sr m2 Hz",SteradianSquareMetre, Hertz);
		SteradianSquareMetreHertz.addAlternativeName("steradiaal vierkante meter hertz","nl");
		SteradianSquareMetreHertz.addAlternativeSymbol("srÂ·m2Â·Hz");
		WattPerSteradianSquareMetreHertz = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_steradian_square_metre_hertz","watt per steradian square metre hertz","W/(sr m2 Hz)",Watt, SteradianSquareMetreHertz);
		WattPerSteradianSquareMetreHertz.addAlternativeName("watt per steradiaal vierkante meter hertz","nl");
		WattPerSteradianSquareMetreHertz.addAlternativeSymbol("W sr-1 m-2 Hz-1");
		WattPerSteradianSquareMetreHertz.addAlternativeSymbol("WÂ·sr-1Â·m-2Â·Hz-1");
		DegreeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/degree_squared","degree squared","null",Degree, 2.0);
		GramPerSquareMetreDay = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_square_metre_day","gram per square metre day","g/(m2 d)",Gram, SquareMetreDay);
		GramPerSquareMetreDay.addAlternativeName("gram per vierkante meter dag","nl");
		GramPerSquareMetreDay.addAlternativeSymbol("g m-2 d-1");
		GramPerSquareMetreDay.addAlternativeSymbol("gÂ·m-2Â·d-1");
		MilligramRAE = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/milligram_RAE", "milligram RAE", "null", nl.wur.fbr.om.model.dimensions.SIBaseDimension.MASS);
		PointTeX = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/point-TeX", "point (TeX)", "pt", Inch, 0.013837000138370002 );
		PascalSecondTimeSquareMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/pascal_second-time_square_metre","pascal second square metre","Pa s m2",PascalSecondTime, SquareMetre);
		PascalSecondTimeSquareMetre.addAlternativeName("pascal seconde vierkante meter","nl");
		PascalSecondTimeSquareMetre.addAlternativeSymbol("PaÂ·sÂ·m2");
		KilogramPerPascalSecondTimeSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_pascal_second-time_square_metre","kilogram per pascal second square metre","kg Pa-1 s-1 m-2",Kilogram, PascalSecondTimeSquareMetre);
		KilogramPerPascalSecondTimeSquareMetre.addAlternativeName("kilogram per pascal seconde vierkante meter","nl");
		KilogramPerPascalSecondTimeSquareMetre.addAlternativeSymbol("kg/(Pa s m2)");
		KilogramPerPascalSecondTimeSquareMetre.addAlternativeSymbol("kg/(PaÂ·sÂ·m2)");
		KilogramPerPascalSecondTimeSquareMetre.addAlternativeSymbol("kgÂ·Pa-1Â·s-1Â·m-2");
		Perm23C = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/perm-23_C", "perm (23 Â°C)", "null", KilogramPerPascalSecondTimeSquareMetre, 5.74525E-11 );
		Nanonewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanonewton","nanonewton","nN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		FaradPerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/farad_per_metre","farad per metre","F/m",Farad, Metre);
		FaradPerMetre.addAlternativeName("farad per meter","nl");
		FaradPerMetre.addAlternativeSymbol("F m-1");
		FaradPerMetre.addAlternativeSymbol("FÂ·m-1");
		Millisievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millisievert","millisievert","mSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		SquareHectometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_hectometre","square hectometre","hm2",Hectometre, 2.0);
		SquareHectometre.addAlternativeName("vierkante hectometer","nl");
		Milliampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/milliampere","milliampere","mA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		Milliampere.addAlternativeName("milliampÃ¨re","nl");
		Hectoweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectoweber","hectoweber","hWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Kiloampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kiloampere","kiloampere","kA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Kiloampere.addAlternativeName("kiloampÃ¨re","nl");
		YoctosecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctosecond-time","yoctosecond","ys",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		YoctosecondTime.addAlternativeName("yoctoseconde","nl");
		MetrePerYoctosecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_yoctosecond-time","metre per yoctosecond","m/ys",Metre, YoctosecondTime);
		MetrePerYoctosecondTime.addAlternativeName("meter per yoctoseconde","nl");
		MetrePerYoctosecondTime.addAlternativeSymbol("m ys-1");
		MetrePerYoctosecondTime.addAlternativeSymbol("mÂ·ys-1");
		Millikelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millikelvin","millikelvin","mK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		MicrogramPerCubicCentimetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/microgram_per_cubic_centimetre","microgram per cubic centimetre","Î¼g/cm3",Microgram, CubicCentimetre);
		MicrogramPerCubicCentimetre.addAlternativeName("microgram per kubieke centimeter","nl");
		MicrogramPerCubicCentimetre.addAlternativeSymbol("Î¼g cm-3");
		MicrogramPerCubicCentimetre.addAlternativeSymbol("Î¼gÂ·cm-3");
		BritishThermalUnit39F = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/British_thermal_unit-39_F", "British thermal unit (39 Â°F)", "Btu", Joule, 1059.67 );
		HundredweightUS = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/hundredweight-US", "hundredweight (US)", "null", Kilogram, 45.35924 );
		Microkelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microkelvin","microkelvin","Î¼K",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		MinuteHourAngle = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/minute-hour_angle", "minute (hour angle)", "m", Degree, 0.25 );
		MinuteHourAngle.addAlternativeName("minuut (uurhoek)","nl");
		TonForce = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/ton-force", "ton-force", "null", Newton, 8896.443 );
		BritishThermalUnit60F = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/British_thermal_unit-60_F", "British thermal unit (60 Â°F)", "Btu", Joule, 1054.68 );
		Femtokatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtokatal","femtokatal","fkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Microohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microohm","microohm","Î¼Î©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		CubicNanometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_nanometre","cubic nanometre","nm3",Nanometre, 3.0);
		CubicNanometre.addAlternativeName("kubieke nanometer","nl");
		Electronvolt = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/electronvolt", "electronvolt", "eV", Joule, 1.602177E-19 );
		SquareMetreSteradian = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_steradian","square metre steradian","m2 sr",SquareMetre, Steradian);
		SquareMetreSteradian.addAlternativeName("vierkante meter steradian","nl");
		SquareMetreSteradian.addAlternativeSymbol("m2Â·sr");
		WattPerSquareMetreSteradian = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_square_metre_steradian","watt per square metre steradian","W/(m2 sr)",Watt, SquareMetreSteradian);
		WattPerSquareMetreSteradian.addAlternativeName("watt per vierkante meter steradiaal","nl");
		WattPerSquareMetreSteradian.addAlternativeSymbol("W m-2 sr-1");
		WattPerSquareMetreSteradian.addAlternativeSymbol("W/(m2Â·sr)");
		WattPerSquareMetreSteradian.addAlternativeSymbol("WÂ·m-2Â·sr-1");
		Yoctobecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctobecquerel","yoctobecquerel","yBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Attosteradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attosteradian","attosteradian","asr",(SingularUnit)Steradian, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Attosteradian.addAlternativeName("attosteradiaal","nl");
		GramPerYottalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_yottalitre","gram per yottalitre","g/Yl",Gram, Yottalitre);
		GramPerYottalitre.addAlternativeName("gram per yottaliter","nl");
		GramPerYottalitre.addAlternativeSymbol("g Yl-1");
		GramPerYottalitre.addAlternativeSymbol("gÂ·Yl-1");
		Centicoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centicoulomb","centicoulomb","cC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Decicoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decicoulomb","decicoulomb","dC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		AttomolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/attomole_per_litre","attomole per litre","amol/l",Attomole, Litre);
		AttomolePerLitre.addAlternativeName("attomole per liter","nl");
		AttomolePerLitre.addAlternativeSymbol("amol l-1");
		AttomolePerLitre.addAlternativeSymbol("amolÂ·l-1");
		Picogray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picogray","picogray","pGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Exahertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exahertz","exahertz","EHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		ColonyFormingUnit = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/colony_forming_unit", "colony forming unit", "CFU", null);
		ColonyFormingUnitPerMillilitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/colony_forming_unit_per_millilitre","colony forming unit per millilitre","CFU/ml",ColonyFormingUnit, Millilitre);
		ReciprocalDay = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_day","reciprocal day","d-1",Day, -1.0);
		ReciprocalDay.addAlternativeName("omgekeerde dag","nl");
		NanomolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/nanomole_per_metre","nanomole per metre","nmol/m",Nanomole, Metre);
		NanomolePerMetre.addAlternativeName("nanomole per meter","nl");
		NanomolePerMetre.addAlternativeSymbol("nmol m-1");
		NanomolePerMetre.addAlternativeSymbol("nmolÂ·m-1");
		Deciampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/deciampere","deciampere","dA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Deciampere.addAlternativeName("deciampÃ¨re","nl");
		KilogramPerMole = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_mole","kilogram per mole","kg/mol",Kilogram, Mole);
		KilogramPerMole.addAlternativeName("kilogram per mol","nl");
		KilogramPerMole.addAlternativeSymbol("kg mol-1");
		KilogramPerMole.addAlternativeSymbol("kgÂ·mol-1");
		Yoctojoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctojoule","yoctojoule","yJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		PetametrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/petametre_per_second-time_squared","petametre per second squared","Pm/s2",Petametre, SecondTimeSquared);
		PetametrePerSecondTimeSquared.addAlternativeName("petameter per seconde kwadraat","nl");
		PetametrePerSecondTimeSquared.addAlternativeSymbol("Pm s-2");
		PetametrePerSecondTimeSquared.addAlternativeSymbol("PmÂ·s-2");
		TonAssay = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/ton-assay", "ton (assay)", "null", Kilogram, 0.02916667 );
		Zeptoampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptoampere","zeptoampere","zA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Zeptoampere.addAlternativeName("zeptoampÃ¨re","nl");
		MillimetrePerDay = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/millimetre_per_day","millimetre per day","mm/d",Millimetre, Day);
		MillimetrePerDay.addAlternativeName("millimeter per dag","nl");
		MillimetrePerDay.addAlternativeSymbol("mm d-1");
		MillimetrePerDay.addAlternativeSymbol("mmÂ·d-1");
		Yoctocoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctocoulomb","yoctocoulomb","yC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		CanadianDollar = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Canadian_dollar", "Canadian dollar", "null", null);
		Millipascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millipascal","millipascal","mPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		TerasecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terasecond-time","terasecond","Ts",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		TerasecondTime.addAlternativeName("teraseconde","nl");
		TerasecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/terasecond-time_squared","terasecond squared","Ts2",TerasecondTime, 2.0);
		TerasecondTimeSquared.addAlternativeName("teraseconde kwadraat","nl");
		Megacoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megacoulomb","megacoulomb","MC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		PetametrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/petametre_per_second-time","petametre per second","Pm/s",Petametre, SecondTime);
		PetametrePerSecondTime.addAlternativeName("petameter per seconde","nl");
		PetametrePerSecondTime.addAlternativeSymbol("Pm s-1");
		PetametrePerSecondTime.addAlternativeSymbol("PmÂ·s-1");
		Week = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/week", "week", "null", SecondTime, 604800.0 );
		Centifarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centifarad","centifarad","cF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		MolePerFemtolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_femtolitre","mole per femtolitre","mol/fl",Mole, Femtolitre);
		MolePerFemtolitre.addAlternativeName("mole per femtoliter","nl");
		MolePerFemtolitre.addAlternativeSymbol("mol fl-1");
		MolePerFemtolitre.addAlternativeSymbol("molÂ·fl-1");
		Zeptoohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptoohm","zeptoohm","zÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Yottabyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottabyte","yottabyte","YB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Fermi = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/fermi", "fermi", "null", Metre, 1.0E-15 );
		MicrodegreeCelsius = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microdegree_Celsius","microdegree Celsius","Î¼Â°C",(SingularUnit)DegreeCelsius, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		MicrodegreeCelsius.addAlternativeName("micrograad Celsius","nl");
		SquareAttometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_attometre","square attometre","am2",Attometre, 2.0);
		SquareAttometre.addAlternativeName("vierkante attometer","nl");
		Grain = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/grain", "grain", "gr", Kilogram, 6.479891E-5 );
		PoundApothecaries = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/pound-apothecaries", "pound (apthecaries')", "lb", Kilogram, 0.3732417 );
		CelsiusScale = factory.createScale("http://www.wurvoc.org/vocabularies/om-1.8/Celsius_scale","Celsius scale","null",KelvinScale, -273.15, 1.0, DegreeCelsius);
		ScalarPoint pointCelsiusScale1 = new ScalarPointImpl(-189.3442, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale1);
		ScalarPoint pointCelsiusScale2 = new ScalarPointImpl(-218.7916, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale2);
		ScalarPoint pointCelsiusScale3 = new ScalarPointImpl(-248.5939, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale3);
		ScalarPoint pointCelsiusScale4 = new ScalarPointImpl(-259.3467, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale4);
		ScalarRangePoint pointCelsiusScale5 = new ScalarRangePointImpl(-270.15, -268.15, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale5);
		ScalarPoint pointCelsiusScale6 = new ScalarPointImpl(-38.8344, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale6);
		ScalarPoint pointCelsiusScale7 = new ScalarPointImpl(0.01, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale7);
		ScalarPoint pointCelsiusScale8 = new ScalarPointImpl(1064.18, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale8);
		ScalarPoint pointCelsiusScale9 = new ScalarPointImpl(1084.62, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale9);
		ScalarPoint pointCelsiusScale10 = new ScalarPointImpl(156.5985, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale10);
		ScalarPoint pointCelsiusScale11 = new ScalarPointImpl(231.928, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale11);
		ScalarPoint pointCelsiusScale12 = new ScalarPointImpl(29.7646, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale12);
		ScalarPoint pointCelsiusScale13 = new ScalarPointImpl(419.527, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale13);
		ScalarPoint pointCelsiusScale14 = new ScalarPointImpl(660.323, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale14);
		ScalarPoint pointCelsiusScale15 = new ScalarPointImpl(961.78, CelsiusScale);
		CelsiusScale.addDefinitionPoint(pointCelsiusScale15);
		CelsiusScale.addAlternativeName("Celsiusschaal","nl");
		MillimetrePerHour = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/millimetre_per_hour","millimetre per hour","mm/h",Millimetre, Hour);
		MillimetrePerHour.addAlternativeName("millimeter per uur","nl");
		MillimetrePerHour.addAlternativeSymbol("mm h-1");
		MillimetrePerHour.addAlternativeSymbol("mmÂ·h-1");
		Microtesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microtesla","microtesla","Î¼T",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Gigabecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigabecquerel","gigabecquerel","GBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		MolePerHectolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_hectolitre","mole per hectolitre","mol/hl",Mole, Hectolitre);
		MolePerHectolitre.addAlternativeName("mole per hectoliter","nl");
		MolePerHectolitre.addAlternativeSymbol("mol hl-1");
		MolePerHectolitre.addAlternativeSymbol("molÂ·hl-1");
		GillImperial = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/gill-Imperial", "gill (Imperial)", "gi", CubicMetre, 1.420653E-4 );
		Piconewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/piconewton","piconewton","pN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		MolePerZeptolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_zeptolitre","mole per zeptolitre","mol/zl",Mole, Zeptolitre);
		MolePerZeptolitre.addAlternativeName("mole per zeptoliter","nl");
		MolePerZeptolitre.addAlternativeSymbol("mol zl-1");
		MolePerZeptolitre.addAlternativeSymbol("molÂ·zl-1");
		Femtoohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtoohm","femtoohm","fÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Femtoweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtoweber","femtoweber","fWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		KilogramPerHectare = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_hectare","kilogram per hectare","kg/ha",Kilogram, Hectare);
		KilogramPerHectare.addAlternativeSymbol("kg ha-1");
		KilogramPerHectare.addAlternativeSymbol("kgÂ·ha-1");
		Petabit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petabit","petabit","Pbit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Decacoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decacoulomb","decacoulomb","daC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Attogram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attogram","attogram","ag",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		AttogramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/attogram_per_litre","attogram per litre","ag/l",Attogram, Litre);
		AttogramPerLitre.addAlternativeName("attogram per liter","nl");
		AttogramPerLitre.addAlternativeSymbol("ag l-1");
		AttogramPerLitre.addAlternativeSymbol("agÂ·l-1");
		Picoradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picoradian","picoradian","prad",(SingularUnit)Radian, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Picoradian.addAlternativeName("picoradiaal","nl");
		KilogramSecondTimeToThePower2ReciprocalMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_second-time_to_the_power_-2_reciprocal_metre","reciprocal metre kilogram second to the power -2","m-1 kg s-2",KilogramSecondTimeToThePower2, ReciprocalMetre);
		KilogramSecondTimeToThePower2ReciprocalMetre.addAlternativeName("omgekeerde meter kilogram seconde tot de macht -2","nl");
		KilogramSecondTimeToThePower2ReciprocalMetre.addAlternativeSymbol("m-1Â·kgÂ·s-2");
		BritishThermalUnitThermochemical = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/British_thermal_unit-thermochemical", "British thermal unit (thermochemical)", "Btu_th", Joule, 1054.35 );
		DecisecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/decisecond-time_squared","decisecond squared","ds2",DecisecondTime, 2.0);
		DecisecondTimeSquared.addAlternativeName("deciseconde kwadraat","nl");
		PicomolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/picomole_per_litre","picomole per litre","pmol/l",Picomole, Litre);
		PicomolePerLitre.addAlternativeName("picomole per liter","nl");
		PicomolePerLitre.addAlternativeSymbol("pmol l-1");
		PicomolePerLitre.addAlternativeSymbol("pmolÂ·l-1");
		Nanofarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanofarad","nanofarad","nF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Femtowatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtowatt","femtowatt","fW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		KilojoulePerSquareMetreDay = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilojoule_per_square_metre_day","kilojoule per square metre day","kJ/(m2 d)",Kilojoule, SquareMetreDay);
		KilojoulePerSquareMetreDay.addAlternativeName("kilojoule per vierkante meter dag","nl");
		KilojoulePerSquareMetreDay.addAlternativeSymbol("kJ m-2 d-1");
		KilojoulePerSquareMetreDay.addAlternativeSymbol("kJÂ·m-2Â·d-1");
		MetrePerDecasecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_decasecond-time","metre per decasecond","m/das",Metre, DecasecondTime);
		MetrePerDecasecondTime.addAlternativeName("meter per decaseconde","nl");
		MetrePerDecasecondTime.addAlternativeSymbol("m das-1");
		MetrePerDecasecondTime.addAlternativeSymbol("mÂ·das-1");
		Zettalumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettalumen","zettalumen","Zlm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		MicrometrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/micrometre_per_second-time","micrometre per second","Î¼m/s",Micrometre, SecondTime);
		MicrometrePerSecondTime.addAlternativeName("micrometer per seconde","nl");
		MicrometrePerSecondTime.addAlternativeSymbol("Î¼m s-1");
		MicrometrePerSecondTime.addAlternativeSymbol("Î¼mÂ·s-1");
		MolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_metre","mole per metre","mol/m",Mole, Metre);
		MolePerMetre.addAlternativeName("mole per meter","nl");
		MolePerMetre.addAlternativeSymbol("mol m-1");
		MolePerMetre.addAlternativeSymbol("molÂ·m-1");
		Stathenry = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/stathenry", "stathenry", "statH", Henry, 8.987552E11 );
		AttosecondTime = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attosecond-time","attosecond","as",(SingularUnit)SecondTime, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		AttosecondTime.addAlternativeName("attoseconde","nl");
		MolePerGigametre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_gigametre","mole per gigametre","mol/Gm",Mole, Gigametre);
		MolePerGigametre.addAlternativeName("mole per gigameter","nl");
		MolePerGigametre.addAlternativeSymbol("mol Gm-1");
		MolePerGigametre.addAlternativeSymbol("molÂ·Gm-1");
		ReciprocalCubicMetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_cubic_metre","reciprocal cubic metre","m-3",Metre, -3.0);
		ReciprocalCubicMetre.addAlternativeName("omgekeerde kubieke meter","nl");
		GramPerMegalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_megalitre","gram per megalitre","g/Ml",Gram, Megalitre);
		GramPerMegalitre.addAlternativeName("gram per megaliter","nl");
		GramPerMegalitre.addAlternativeSymbol("g Ml-1");
		GramPerMegalitre.addAlternativeSymbol("gÂ·Ml-1");
		Kilomolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilomolair","kilomolair","kM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		MetrePerCentisecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_centisecond-time_squared","metre per centisecond squared","m/cs2",Metre, CentisecondTimeSquared);
		MetrePerCentisecondTimeSquared.addAlternativeName("meter per centiseconde kwadraat","nl");
		MetrePerCentisecondTimeSquared.addAlternativeSymbol("m cs-2");
		MetrePerCentisecondTimeSquared.addAlternativeSymbol("mÂ·cs-2");
		Decitesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decitesla","decitesla","dT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Attotesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attotesla","attotesla","aT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Nanowatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanowatt","nanowatt","nW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		SquareDecimetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_decimetre","square decimetre","dm2",Decimetre, 2.0);
		SquareDecimetre.addAlternativeName("vierkante decimeter","nl");
		Revolution = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/revolution", "revolution", "r", Radian, 6.283185 );
		Picowatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picowatt","picowatt","pW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Megohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megohm","megohm","MÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		CubicPicometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_picometre","cubic picometre","pm3",Picometre, 3.0);
		CubicPicometre.addAlternativeName("kubieke picometer","nl");
		KilometrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilometre_per_second-time_squared","kilometre per second squared","km/s2",Kilometre, SecondTimeSquared);
		KilometrePerSecondTimeSquared.addAlternativeName("kilometer per seconde kwadraat","nl");
		KilometrePerSecondTimeSquared.addAlternativeSymbol("km s-2");
		KilometrePerSecondTimeSquared.addAlternativeSymbol("kmÂ·s-2");
		AmylaseUnit = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/amylase_unit", "amylase unit", "AU", null);
		AmylaseUnit.addAlternativeSymbol("U");
		CubicMetrePerYear = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/cubic_metre_per_year","cubic metre per year","null",CubicMetre, Year);
		CubicMetrePerYear.addAlternativeName("kubieke meter per jaar","nl");
		Kiloweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kiloweber","kiloweber","kWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Zeptoweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptoweber","zeptoweber","zWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Petalumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petalumen","petalumen","Plm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		ReciprocalDegreeCelsius = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_degree_Celsius","reciprocal degree Celsius","Â°C-1",DegreeCelsius, -1.0);
		ReciprocalDegreeCelsius.addAlternativeName("omgekeerde graad Celsius","nl");
		CubicHectometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_hectometre","cubic hectometre","hm3",Hectometre, 3.0);
		CubicHectometre.addAlternativeName("kubieke hectometer","nl");
		Femtogram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtogram","femtogram","fg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		AtmosphereStandard = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/atmosphere-standard", "atmosphere (standard)", "atm", Pascal, 101325.0 );
		AtmosphereStandard.addAlternativeName("atmosfeer (standaard)","nl");
		ReciprocalAtmosphereStandard = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_atmosphere-standard","reciprocal atmosphere (standard)","atm-1",AtmosphereStandard, -1.0);
		ReciprocalAtmosphereStandard.addAlternativeName("omgekeerde atmosfeer (standaard)","nl");
		TonOfRefridgeration = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/ton_of_refridgeration", "ton of refridgeration", "null", Watt, 3516.853 );
		Petacandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petacandela","petacandela","Pcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		ReciprocalSquareMetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_square_metre","reciprocal square metre","m-2",Metre, -2.0);
		ReciprocalSquareMetre.addAlternativeName("omgekeerde vierkante meter","nl");
		CubicGigametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_gigametre","cubic gigametre","Gm3",Gigametre, 3.0);
		CubicGigametre.addAlternativeName("kubieke gigameter","nl");
		FemtometrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/femtometre_per_second-time_squared","femtometre per second squared","fm/s2",Femtometre, SecondTimeSquared);
		FemtometrePerSecondTimeSquared.addAlternativeName("femtometer per seconde kwadraat","nl");
		FemtometrePerSecondTimeSquared.addAlternativeSymbol("fm s-2");
		FemtometrePerSecondTimeSquared.addAlternativeSymbol("fmÂ·s-2");
		Decatesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decatesla","decatesla","daT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		DegreeCelsiusPerMinuteTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/degree_Celsius_per_minute-time","degree Celsius per minute","Â°C/min",DegreeCelsius, MinuteTime);
		DegreeCelsiusPerMinuteTime.addAlternativeName("graad Celsius per minuut","nl");
		DegreeCelsiusPerMinuteTime.addAlternativeSymbol("Â°C min-1");
		DegreeCelsiusPerMinuteTime.addAlternativeSymbol("Â°CÂ·min-1");
		Kibibit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kibibit","kibibit","Kibit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.BinaryPrefix.KIBI);
		Femtogray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtogray","femtogray","fGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Decijoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decijoule","decijoule","dJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Femtonewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtonewton","femtonewton","fN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		MetrePerExasecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_exasecond-time_squared","metre per exasecond squared","m/Es2",Metre, ExasecondTimeSquared);
		MetrePerExasecondTimeSquared.addAlternativeName("meter per exaseconde kwadraat","nl");
		MetrePerExasecondTimeSquared.addAlternativeSymbol("m Es-2");
		MetrePerExasecondTimeSquared.addAlternativeSymbol("mÂ·Es-2");
		Megaeuro = null;
		Deciohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/deciohm","deciohm","dÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		MegametrePerKilojoule = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/megametre_per_kilojoule","megametre per kilojoule","Mm/kJ",Megametre, Kilojoule);
		MegametrePerKilojoule.addAlternativeName("1000 km/kJ","");
		Picofarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picofarad","picofarad","pF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		KilomolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilomole_per_litre","kilomole per litre","kmol/l",Kilomole, Litre);
		KilomolePerLitre.addAlternativeName("kilomole per liter","nl");
		KilomolePerLitre.addAlternativeSymbol("kmol l-1");
		KilomolePerLitre.addAlternativeSymbol("kmolÂ·l-1");
		CoulombPerKilogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/coulomb_per_kilogram","coulomb per kilogram","C/kg",Coulomb, Kilogram);
		CoulombPerKilogram.addAlternativeSymbol("C kg-1");
		CoulombPerKilogram.addAlternativeSymbol("CÂ·kg-1");
		RÃ¶ntgen = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/rÃ¶ntgen", "rÃ¶ntgen", "R", CoulombPerKilogram, 2.58E-4 );
		Yottahertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottahertz","yottahertz","YHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		SecondSidereal = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/second-sidereal", "second (sidereal)", "null", SecondTime, 0.9972696 );
		Nanosiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanosiemens","nanosiemens","nS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		ReciprocalPartsPerMillion = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_parts_per_million","reciprocal parts per million","ppm-1",PartsPerMillion, -1.0);
		Yoctomole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctomole","yoctomole","ymol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Yoctomole.addAlternativeName("yoctomol","nl");
		YoctomolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/yoctomole_per_metre","yoctomole per metre","ymol/m",Yoctomole, Metre);
		YoctomolePerMetre.addAlternativeName("yoctomole per meter","nl");
		YoctomolePerMetre.addAlternativeSymbol("ymol m-1");
		YoctomolePerMetre.addAlternativeSymbol("ymolÂ·m-1");
		GramPerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_metre","gram per metre","g/m",Gram, Metre);
		GramPerMetre.addAlternativeName("gram per meter","nl");
		GramPerMetre.addAlternativeSymbol("g m-1");
		GramPerMetre.addAlternativeSymbol("gÂ·m-1");
		Centisteradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centisteradian","centisteradian","csr",(SingularUnit)Steradian, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Centisteradian.addAlternativeName("centisteradiaal","nl");
		Nanobecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanobecquerel","nanobecquerel","nBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Picocoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picocoulomb","picocoulomb","pC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		ReciprocalHectare = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_hectare","reciprocal hectare","ha-1",Hectare, -1.0);
		ReciprocalHectare.addAlternativeName("omgekeerde hectare","nl");
		Exapascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exapascal","exapascal","EPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Zeptomolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptomolair","zeptomolair","zM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		PoundSterling = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/pound_sterling", "pound sterling", "null", null);
		Zettakelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettakelvin","zettakelvin","ZK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Nanosievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanosievert","nanosievert","nSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Hectokatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectokatal","hectokatal","hkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Zettalitre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettalitre","zettalitre","Zl",(SingularUnit)Litre, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Zettalitre.addAlternativeName("zettaliter","nl");
		SquareYottametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_yottametre","square yottametre","Ym2",Yottametre, 2.0);
		SquareYottametre.addAlternativeName("vierkante yottameter","nl");
		Terawatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terawatt","terawatt","TW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		TerawattHour = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/terawatt_hour","terawatt hour","TW h",Terawatt, Hour);
		TerawattHour.addAlternativeSymbol("TWh");
		TerawattHour.addAlternativeSymbol("TWÂ·h");
		FemtosecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/femtosecond-time_squared","femtosecond squared","fs2",FemtosecondTime, 2.0);
		FemtosecondTimeSquared.addAlternativeName("femtoseconde kwadraat","nl");
		MetrePerFemtosecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_femtosecond-time_squared","metre per femtosecond squared","m/fs2",Metre, FemtosecondTimeSquared);
		MetrePerFemtosecondTimeSquared.addAlternativeName("meter per femtoseconde kwadraat","nl");
		MetrePerFemtosecondTimeSquared.addAlternativeSymbol("m fs-2");
		MetrePerFemtosecondTimeSquared.addAlternativeSymbol("mÂ·fs-2");
		Centijoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centijoule","centijoule","cJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Giganewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/giganewton","giganewton","GN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		JouleSecondTime = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/joule_second-time","joule second","J s",Joule, SecondTime);
		JouleSecondTime.addAlternativeName("joule seconde","nl");
		JouleSecondTime.addAlternativeSymbol("JÂ·s");
		YearSidereal = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/year-sidereal", "year (sidereal)", "null", SecondTime, 3.155815E7 );
		Zettametre = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettametre","zettametre","Zm",(SingularUnit)Metre, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Zettametre.addAlternativeName("zettameter","nl");
		MolePerZettametre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_zettametre","mole per zettametre","mol/Zm",Mole, Zettametre);
		MolePerZettametre.addAlternativeName("mole per zettameter","nl");
		MolePerZettametre.addAlternativeSymbol("mol Zm-1");
		MolePerZettametre.addAlternativeSymbol("molÂ·Zm-1");
		JoulePerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/joule_per_cubic_metre","joule per cubic metre","J/m3",Joule, CubicMetre);
		JoulePerCubicMetre.addAlternativeName("joule per kubieke meter","nl");
		JoulePerCubicMetre.addAlternativeSymbol("J m-3");
		JoulePerCubicMetre.addAlternativeSymbol("JÂ·m-3");
		JoulePerKelvin = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/joule_per_kelvin","joule per kelvin","J/K",Joule, Kelvin);
		JoulePerKelvin.addAlternativeSymbol("J K-1");
		JoulePerKelvin.addAlternativeSymbol("JÂ·K-1");
		AustralianDollar = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Australian_dollar", "Australian dollar", "null", null);
		PetamolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/petamole_per_metre","petamole per metre","Pmol/m",Petamole, Metre);
		PetamolePerMetre.addAlternativeName("petamole per meter","nl");
		PetamolePerMetre.addAlternativeSymbol("Pmol m-1");
		PetamolePerMetre.addAlternativeSymbol("PmolÂ·m-1");
		Attojoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attojoule","attojoule","aJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Decimolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decimolair","decimolair","dM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Yoctomolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctomolair","yoctomolair","yM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		GramPerJoule = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_joule","gram per joule","g/J",Gram, Joule);
		GramPerJoule.addAlternativeSymbol("g J-1");
		GramPerJoule.addAlternativeSymbol("gÂ·J-1");
		YottamolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/yottamole_per_metre","yottamole per metre","Ymol/m",Yottamole, Metre);
		YottamolePerMetre.addAlternativeName("yottamole per meter","nl");
		YottamolePerMetre.addAlternativeSymbol("Ymol m-1");
		YottamolePerMetre.addAlternativeSymbol("YmolÂ·m-1");
		Terahenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terahenry","terahenry","TH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Yottalux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottalux","yottalux","Ylx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Curie = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/curie", "curie", "Ci", Becquerel, 3.7E10 );
		Petasievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petasievert","petasievert","PSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Perm23C_1 = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/perm_23_C", "null", "null", null);
		MetrePerDecisecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_decisecond-time_squared","metre per decisecond squared","m/ds2",Metre, DecisecondTimeSquared);
		MetrePerDecisecondTimeSquared.addAlternativeName("meter per deciseconde kwadraat","nl");
		MetrePerDecisecondTimeSquared.addAlternativeSymbol("m ds-2");
		MetrePerDecisecondTimeSquared.addAlternativeSymbol("mÂ·ds-2");
		QuartImperial = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/quart-Imperial", "quart (Imperial)", "null", Litre, 1.1365 );
		MicrogramPerJoule = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/microgram_per_joule","microgram per joule","mg/J",Microgram, Joule);
		MicrogramPerJoule.addAlternativeSymbol("mg J-1");
		MicrogramPerJoule.addAlternativeSymbol("mgÂ·J-1");
		Statohm = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/statohm", "statohm", "statÎ©", Ohm, 8.987552E11 );
		Exabecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exabecquerel","exabecquerel","EBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		KilogramPerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_cubic_metre","kilogram per cubic metre","kg/m3",Kilogram, CubicMetre);
		KilogramPerCubicMetre.addAlternativeName("kilogram per kubieke meter","nl");
		KilogramPerCubicMetre.addAlternativeSymbol("kg m-3");
		KilogramPerCubicMetre.addAlternativeSymbol("kgÂ·m-3");
		Exahenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exahenry","exahenry","EH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Calorie15C = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/calorie-15_C", "calorie (15 Â°C)", "cal_15", Joule, 4.1858 );
		Nanogray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanogray","nanogray","nGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Zeptomole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptomole","zeptomole","zmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Zeptomole.addAlternativeName("zeptomol","nl");
		ZeptomolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/zeptomole_per_metre","zeptomole per metre","zmol/m",Zeptomole, Metre);
		ZeptomolePerMetre.addAlternativeName("zeptomole per meter","nl");
		ZeptomolePerMetre.addAlternativeSymbol("zmol m-1");
		ZeptomolePerMetre.addAlternativeSymbol("zmolÂ·m-1");
		PicaTeX = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/pica-TeX", "pica (TeX)", "null", PointTeX, 12.0 );
		Nanosteradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanosteradian","nanosteradian","nsr",(SingularUnit)Steradian, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Nanosteradian.addAlternativeName("nanosteradiaal","nl");
		MolePerNanometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_nanometre","mole per nanometre","mol/nm",Mole, Nanometre);
		MolePerNanometre.addAlternativeName("mole per nanometer","nl");
		MolePerNanometre.addAlternativeSymbol("mol nm-1");
		MolePerNanometre.addAlternativeSymbol("molÂ·nm-1");
		Exacoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exacoulomb","exacoulomb","EC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Kilosiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilosiemens","kilosiemens","kS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Gigacoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigacoulomb","gigacoulomb","GC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Megaerg = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megaerg","megaerg","Merg",(SingularUnit)Erg, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		MileStatute = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/mile-statute", "mile (statute)", "mi", Metre, 1609.344 );
		MileStatutePerHour = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mile-statute_per_hour","mile (statute) per hour","mi/h",MileStatute, Hour);
		MileStatutePerHour.addAlternativeName("mijl per uur","nl");
		MileStatutePerHour.addAlternativeSymbol("mi h-1");
		MileStatutePerHour.addAlternativeSymbol("miÂ·h-1");
		Megaweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megaweber","megaweber","MWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Teracoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teracoulomb","teracoulomb","TC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		NewtonPerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/newton_per_metre","newton per metre","N/m",Newton, Metre);
		NewtonPerMetre.addAlternativeName("newton per meter","nl");
		NewtonPerMetre.addAlternativeSymbol("N m-1");
		NewtonPerMetre.addAlternativeSymbol("NÂ·m-1");
		MetrePerZeptosecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_zeptosecond-time","metre per zeptosecond","m/zs",Metre, ZeptosecondTime);
		MetrePerZeptosecondTime.addAlternativeName("meter per zeptoseconde","nl");
		MetrePerZeptosecondTime.addAlternativeSymbol("m zs-1");
		MetrePerZeptosecondTime.addAlternativeSymbol("mÂ·zs-1");
		Petasiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petasiemens","petasiemens","PS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Dyne = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/dyne", "dyne", "dyn", Newton, 1.0E-5 );
		MegamolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/megamole_per_litre","megamole per litre","Mmol/l",Megamole, Litre);
		MegamolePerLitre.addAlternativeName("megamole per liter","nl");
		MegamolePerLitre.addAlternativeSymbol("Mmol l-1");
		MegamolePerLitre.addAlternativeSymbol("MmolÂ·l-1");
		ZettametrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/zettametre_per_second-time","zettametre per second","Zm/s",Zettametre, SecondTime);
		ZettametrePerSecondTime.addAlternativeName("zettameter per seconde","nl");
		ZettametrePerSecondTime.addAlternativeSymbol("Zm s-1");
		ZettametrePerSecondTime.addAlternativeSymbol("ZmÂ·s-1");
		MetrePerFemtosecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_femtosecond-time","metre per femtosecond","m/fs",Metre, FemtosecondTime);
		MetrePerFemtosecondTime.addAlternativeName("meter per femtoseconde","nl");
		MetrePerFemtosecondTime.addAlternativeSymbol("m fs-1");
		MetrePerFemtosecondTime.addAlternativeSymbol("mÂ·fs-1");
		MolePerPetametre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_petametre","mole per petametre","mol/Pm",Mole, Petametre);
		MolePerPetametre.addAlternativeName("mole per petameter","nl");
		MolePerPetametre.addAlternativeSymbol("mol Pm-1");
		MolePerPetametre.addAlternativeSymbol("molÂ·Pm-1");
		Microjoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microjoule","microjoule","Î¼J",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Centigray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centigray","centigray","cGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		AttosecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/attosecond-time_squared","attosecond squared","as2",AttosecondTime, 2.0);
		AttosecondTimeSquared.addAlternativeName("attoseconde kwadraat","nl");
		MetrePerAttosecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_attosecond-time_squared","metre per attosecond squared","m/as2",Metre, AttosecondTimeSquared);
		MetrePerAttosecondTimeSquared.addAlternativeName("meter per attoseconde kwadraat","nl");
		MetrePerAttosecondTimeSquared.addAlternativeSymbol("m as-2");
		MetrePerAttosecondTimeSquared.addAlternativeSymbol("mÂ·as-2");
		Gigawatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigawatt","gigawatt","GW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Decifarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decifarad","decifarad","dF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Peck = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/peck", "peck", "pk", CubicMetre, 0.008809768 );
		UnitPole = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/unit_pole", "unit pole", "null", Weber, 1.256637E-7 );
		MicromolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/micromole_per_metre","micromole per metre","Î¼mol/m",Micromole, Metre);
		MicromolePerMetre.addAlternativeName("micromole per meter","nl");
		MicromolePerMetre.addAlternativeSymbol("Î¼mol m-1");
		MicromolePerMetre.addAlternativeSymbol("Î¼molÂ·m-1");
		Attowatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attowatt","attowatt","aW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Centitesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centitesla","centitesla","cT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Picojoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picojoule","picojoule","pJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Zeptovolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptovolt","zeptovolt","zV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		MetrePerTerasecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_terasecond-time","metre per terasecond","m/Ts",Metre, TerasecondTime);
		MetrePerTerasecondTime.addAlternativeName("meter per teraseconde","nl");
		MetrePerTerasecondTime.addAlternativeSymbol("m Ts-1");
		MetrePerTerasecondTime.addAlternativeSymbol("mÂ·Ts-1");
		TonShort = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/ton-short", "ton (short)", "null", Kilogram, 907.1847 );
		Terapascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terapascal","terapascal","TPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Decibecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decibecquerel","decibecquerel","dBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		CubicYottametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_yottametre","cubic yottametre","Ym3",Yottametre, 3.0);
		CubicYottametre.addAlternativeName("kubieke yottameter","nl");
		Yottavolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottavolt","yottavolt","YV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Statweber = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/statweber", "statweber", "statWb", Weber, 299.79 );
		Yoctoohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctoohm","yoctoohm","yÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Hectosiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectosiemens","hectosiemens","hS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Exalumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exalumen","exalumen","Elm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Nanovolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanovolt","nanovolt","nV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		CubicMetrePerKilogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/cubic_metre_per_kilogram","cubic metre per kilogram","m3/kg",CubicMetre, Kilogram);
		CubicMetrePerKilogram.addAlternativeName("kubieke meter per kilogram","nl");
		CubicMetrePerKilogram.addAlternativeSymbol("m3 kg-1");
		CubicMetrePerKilogram.addAlternativeSymbol("m3Â·kg-1");
		DecimolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/decimole_per_metre","decimole per metre","dmol/m",Decimole, Metre);
		DecimolePerMetre.addAlternativeName("decimole per meter","nl");
		DecimolePerMetre.addAlternativeSymbol("dmol m-1");
		DecimolePerMetre.addAlternativeSymbol("dmolÂ·m-1");
		Gigamole = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigamole","gigamole","Gmol",(SingularUnit)Mole, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Gigamole.addAlternativeName("gigamol","nl");
		GigamolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gigamole_per_litre","gigamole per litre","Gmol/l",Gigamole, Litre);
		GigamolePerLitre.addAlternativeName("gigamole per liter","nl");
		GigamolePerLitre.addAlternativeSymbol("Gmol l-1");
		GigamolePerLitre.addAlternativeSymbol("GmolÂ·l-1");
		Debye = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/debye", "debye", "D", CoulombMetre, 3.33564E-30 );
		Chain = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/chain", "chain", "ch", Metre, 20.11684 );
		Quad = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/quad", "quad", "null", BritishThermalUnitInternationalTable, 1.0E15 );
		SquareMetreHertz = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_hertz","square metre hertz","m2 Hz",SquareMetre, Hertz);
		SquareMetreHertz.addAlternativeName("vierkante meter hertz","nl");
		SquareMetreHertz.addAlternativeSymbol("m2Â·Hz");
		WattPerSquareMetreHertz = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_square_metre_hertz","watt per square metre hertz","W/(m2 Hz)",Watt, SquareMetreHertz);
		WattPerSquareMetreHertz.addAlternativeName("watt per vierkante meter hertz","nl");
		WattPerSquareMetreHertz.addAlternativeSymbol("W m-2 Hz-1");
		WattPerSquareMetreHertz.addAlternativeSymbol("WÂ·m-2Â·Hz-1");
		Abvolt = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/abvolt", "abvolt", "abV", Volt, 1.0E-8 );
		Darcy = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/darcy", "darcy", "null", SquareMetre, 9.869233E-13 );
		DecamolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/decamole_per_metre","decamole per metre","damol/m",Decamole, Metre);
		DecamolePerMetre.addAlternativeName("decamole per meter","nl");
		DecamolePerMetre.addAlternativeSymbol("damol m-1");
		DecamolePerMetre.addAlternativeSymbol("damolÂ·m-1");
		Micromagnitude = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/micromagnitude","micromagnitude","Î¼mag",(SingularUnit)Magnitude, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Yoctopascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctopascal","yoctopascal","yPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		MetrePerPicosecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_picosecond-time","metre per picosecond","m/ps",Metre, PicosecondTime);
		MetrePerPicosecondTime.addAlternativeName("meter per picoseconde","nl");
		MetrePerPicosecondTime.addAlternativeSymbol("m ps-1");
		MetrePerPicosecondTime.addAlternativeSymbol("mÂ·ps-1");
		Decikelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decikelvin","decikelvin","dK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Terabyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terabyte","terabyte","TB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Nanolux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanolux","nanolux","nlx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Yoctoampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctoampere","yoctoampere","yA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Yoctoampere.addAlternativeName("yoctoampÃ¨re","nl");
		MolePerTeralitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_teralitre","mole per teralitre","mol/Tl",Mole, Teralitre);
		MolePerTeralitre.addAlternativeName("mole per teraliter","nl");
		MolePerTeralitre.addAlternativeSymbol("mol Tl-1");
		MolePerTeralitre.addAlternativeSymbol("molÂ·Tl-1");
		Microsteradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microsteradian","microsteradian","Î¼sr",(SingularUnit)Steradian, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Microsteradian.addAlternativeName("microsteradiaal","nl");
		FootPoundal = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/foot_poundal", "foot poundal", "null", Joule, 0.04214011 );
		AttodegreeCelsius = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attodegree_Celsius","attodegree Celsius","aÂ°C",(SingularUnit)DegreeCelsius, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		AttodegreeCelsius.addAlternativeName("attograad Celsius","nl");
		Statmho = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/statmho", "statmho", "null", Siemens, 1.11265E-12 );
		MetrePerGigasecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_gigasecond-time_squared","metre per gigasecond squared","m/Gs2",Metre, GigasecondTimeSquared);
		MetrePerGigasecondTimeSquared.addAlternativeName("meter per gigaseconde kwadraat","nl");
		MetrePerGigasecondTimeSquared.addAlternativeSymbol("m Gs-2");
		MetrePerGigasecondTimeSquared.addAlternativeSymbol("mÂ·Gs-2");
		TonLong = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/ton-long", "ton (long)", "null", Kilogram, 1016.047 );
		Yottacandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottacandela","yottacandela","Ycd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		YottametrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/yottametre_per_second-time","yottametre per second","Ym/s",Yottametre, SecondTime);
		YottametrePerSecondTime.addAlternativeName("yottameter per seconde","nl");
		YottametrePerSecondTime.addAlternativeSymbol("Ym s-1");
		YottametrePerSecondTime.addAlternativeSymbol("YmÂ·s-1");
		MolePerYottametre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_yottametre","mole per yottametre","mol/Ym",Mole, Yottametre);
		MolePerYottametre.addAlternativeName("mole per yottameter","nl");
		MolePerYottametre.addAlternativeSymbol("mol Ym-1");
		MolePerYottametre.addAlternativeSymbol("molÂ·Ym-1");
		BritishThermalUnitMean = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/British_thermal_unit-mean", "British thermal unit (mean)", "Btu", Joule, 1055.87 );
		Picolux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picolux","picolux","plx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Centibecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centibecquerel","centibecquerel","cBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Milliohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/milliohm","milliohm","mÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		JoulePerKelvinKilogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/joule_per_kelvin_kilogram","joule per kelvin kilogram","J/(K kg)",Joule, KelvinKilogram);
		JoulePerKelvinKilogram.addAlternativeSymbol("J K-1 kg-1");
		JoulePerKelvinKilogram.addAlternativeSymbol("J/(KÂ·kg)");
		JoulePerKelvinKilogram.addAlternativeSymbol("JÂ·K-1Â·kg-1");
		MetrePerTerasecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_terasecond-time_squared","metre per terasecond squared","m/Ts2",Metre, TerasecondTimeSquared);
		MetrePerTerasecondTimeSquared.addAlternativeName("meter per teraseconde kwadraat","nl");
		MetrePerTerasecondTimeSquared.addAlternativeSymbol("m Ts-2");
		MetrePerTerasecondTimeSquared.addAlternativeSymbol("mÂ·Ts-2");
		Centiwatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centiwatt","centiwatt","cW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		SquareZettametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_zettametre","square zettametre","Zm2",Zettametre, 2.0);
		SquareZettametre.addAlternativeName("vierkante zettameter","nl");
		Decajoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decajoule","decajoule","daJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Gigalumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigalumen","gigalumen","Glm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Nanojoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanojoule","nanojoule","nJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Yoctotesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctotesla","yoctotesla","yT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		KilogramPerCubicDecimetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_cubic_decimetre","kilogram per cubic decimetre","kg/dm3",Kilogram, CubicDecimetre);
		KilogramPerCubicDecimetre.addAlternativeName("kilogram per kubieke decimeter","nl");
		KilogramPerCubicDecimetre.addAlternativeSymbol("kg dm-3");
		KilogramPerCubicDecimetre.addAlternativeSymbol("kgÂ·dm-3");
		Yoctofarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctofarad","yoctofarad","yF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Yottasiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottasiemens","yottasiemens","YS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		ColonyFormingUnitPerGram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/colony_forming_unit_per_gram","colony forming unit per gram","CFU/g",ColonyFormingUnit, Gram);
		Deciwatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/deciwatt","deciwatt","dW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Attosiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attosiemens","attosiemens","aS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		ZettametrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/zettametre_per_second-time_squared","zettametre per second squared","Zm/s2",Zettametre, SecondTimeSquared);
		ZettametrePerSecondTimeSquared.addAlternativeName("zettameter per seconde kwadraat","nl");
		ZettametrePerSecondTimeSquared.addAlternativeSymbol("Zm s-2");
		ZettametrePerSecondTimeSquared.addAlternativeSymbol("ZmÂ·s-2");
		Hectocandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectocandela","hectocandela","hcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Yottagram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottagram","yottagram","YG",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		YottagramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/yottagram_per_litre","yottagram per litre","Yg/l",Yottagram, Litre);
		YottagramPerLitre.addAlternativeName("yottagram per liter","nl");
		YottagramPerLitre.addAlternativeSymbol("Yg l-1");
		YottagramPerLitre.addAlternativeSymbol("YgÂ·l-1");
		MilligramPerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/milligram_per_cubic_metre","milligram per cubic metre","mg/m3",Milligram, CubicMetre);
		MilligramPerCubicMetre.addAlternativeName("milligram per kubieke meter","nl");
		MilligramPerCubicMetre.addAlternativeSymbol("mg m-3");
		MilligramPerCubicMetre.addAlternativeSymbol("mgÂ·m-3");
		Megakatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megakatal","megakatal","Mkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Centipascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centipascal","centipascal","cPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		MolePerAttometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_attometre","mole per attometre","mol/am",Mole, Attometre);
		MolePerAttometre.addAlternativeName("mole per attometer","nl");
		MolePerAttometre.addAlternativeSymbol("mol am-1");
		MolePerAttometre.addAlternativeSymbol("molÂ·am-1");
		Millicoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millicoulomb","millicoulomb","mC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		GramPerHectogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_hectogram","gram per hectogram","g/hg",Gram, Hectogram);
		GramPerHectogram.addAlternativeSymbol("g hg-1");
		GramPerHectogram.addAlternativeSymbol("gÂ·hg-1");
		SquareNanometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_nanometre","square nanometre","nm2",Nanometre, 2.0);
		SquareNanometre.addAlternativeName("vierkante nanometer","nl");
		CubicMillimetrePerCubicMillimetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/cubic_millimetre_per_cubic_millimetre","cubic millimetre per cubic millimetre","mm3/mm3",CubicMillimetre, CubicMillimetre);
		CubicMillimetrePerCubicMillimetre.addAlternativeName("kubieke millimeter per kubieke millimeter","nl");
		CubicMillimetrePerCubicMillimetre.addAlternativeSymbol("mm3 mm-3");
		CubicMillimetrePerCubicMillimetre.addAlternativeSymbol("mm3Â·mm-3");
		Attobecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attobecquerel","attobecquerel","aBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Gigaelectronvolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigaelectronvolt","gigaelectronvolt","GeV",(SingularUnit)Electronvolt, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		CubicAttometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_attometre","cubic attometre","am3",Attometre, 3.0);
		CubicAttometre.addAlternativeName("kubieke attometer","nl");
		MilLength = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/mil-length", "mil (length)", "null", Metre, 2.54E-5 );
		Kilohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilohm","kilohm","kÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Stilb = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/stilb", "stilb", "sb", CandelaPerSquareMetre, 10000.0 );
		FemtodegreeCelsius = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtodegree_Celsius","femtodegree Celsius","fÂ°C",(SingularUnit)DegreeCelsius, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		FemtodegreeCelsius.addAlternativeName("femtograad Celsius","nl");
		Centivolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centivolt","centivolt","cV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		KatalPerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/katal_per_cubic_metre","katal per cubic metre","kat/m3",Katal, CubicMetre);
		KatalPerCubicMetre.addAlternativeName("katal per kubieke meter","nl");
		KatalPerCubicMetre.addAlternativeSymbol("kat m-3");
		KatalPerCubicMetre.addAlternativeSymbol("katÂ·m-3");
		SquareKilometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_kilometre","square kilometre","km2",Kilometre, 2.0);
		SquareKilometre.addAlternativeName("vierkante kilometer","nl");
		SquareKilometre.addAlternativeName("10^6 m2","");
		Petanewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petanewton","petanewton","PN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		CoulombPerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/coulomb_per_square_metre","coulomb per square metre","C/m2",Coulomb, SquareMetre);
		CoulombPerSquareMetre.addAlternativeName("coulomb per vierkante meter","nl");
		CoulombPerSquareMetre.addAlternativeSymbol("C m-2");
		CoulombPerSquareMetre.addAlternativeSymbol("CÂ·m-2");
		Microbecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microbecquerel","microbecquerel","Î¼Bq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Centistokes = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centistokes","centistokes","cSt",(SingularUnit)Stokes, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Attovolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attovolt","attovolt","aV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		MegajoulePerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/megajoule_per_square_metre","megajoule per square metre","MJ/m2",Megajoule, SquareMetre);
		MegajoulePerSquareMetre.addAlternativeName("megajoule per vierkante meter","nl");
		MegajoulePerSquareMetre.addAlternativeSymbol("MJ m-2");
		MegajoulePerSquareMetre.addAlternativeSymbol("MJÂ·m-2");
		Centipoise = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centipoise","centipoise","cP",(SingularUnit)Poise, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Zeptokelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptokelvin","zeptokelvin","zK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Attogray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attogray","attogray","aGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Hectonewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectonewton","hectonewton","hN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		MolePerPicolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_picolitre","mole per picolitre","mol/pl",Mole, Picolitre);
		MolePerPicolitre.addAlternativeName("mole per picoliter","nl");
		MolePerPicolitre.addAlternativeSymbol("mol pl-1");
		MolePerPicolitre.addAlternativeSymbol("molÂ·pl-1");
		CubicFemtometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_femtometre","cubic femtometre","fm3",Femtometre, 3.0);
		CubicFemtometre.addAlternativeName("kubieke femtometer","nl");
		MinutePlaneAngle = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/minute-plane_angle", "minute (plane angle)", "'", Radian, 2.908882E-4 );
		MinutePlaneAngle.addAlternativeName("minuut (hoek)","nl");
		MinutePlaneAngle.addAlternativeName("arcminuut","nl");
		MinutePlaneAngle.addAlternativeName("minuut (hoek)","nl");
		MinutePlaneAngle.addAlternativeName("arcminuut","nl");
		Yottasievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottasievert","yottasievert","YSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Gigalux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigalux","gigalux","Glx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Femtohenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtohenry","femtohenry","fH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Teralux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teralux","teralux","Tlx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		SquareDecametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_decametre","square decametre","dam2",Decametre, 2.0);
		SquareDecametre.addAlternativeName("vierkante decameter","nl");
		Hectotesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectotesla","hectotesla","hT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Hectosievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectosievert","hectosievert","hSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		GramPerZettalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_zettalitre","gram per zettalitre","g/Zl",Gram, Zettalitre);
		GramPerZettalitre.addAlternativeName("gram per zettaliter","nl");
		GramPerZettalitre.addAlternativeSymbol("g Zl-1");
		GramPerZettalitre.addAlternativeSymbol("gÂ·Zl-1");
		CentimetrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/centimetre_per_second-time","centimetre per second","cm/s",Centimetre, SecondTime);
		CentimetrePerSecondTime.addAlternativeName("centimeter per seconde","nl");
		CentimetrePerSecondTime.addAlternativeSymbol("cm s-1");
		CentimetrePerSecondTime.addAlternativeSymbol("cmÂ·s-1");
		Footlambert = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/footlambert", "footlambert", "null", CandelaPerSquareMetre, 3.426259 );
		KilogramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_litre","kilogram per litre","kg/l",Kilogram, Litre);
		KilogramPerLitre.addAlternativeName("kilogram per liter","nl");
		KilogramPerLitre.addAlternativeSymbol("kg l-1");
		KilogramPerLitre.addAlternativeSymbol("kgÂ·l-1");
		Teaspoon = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/teaspoon", "teaspoon", "null", CubicMetre, 4.928922E-6 );
		DryQuartUS = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/dry_quart-US", "dry quart (US)", "dry qt", CubicMetre, 0.001101221 );
		Megaelectronvolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megaelectronvolt","megaelectronvolt","MeV",(SingularUnit)Electronvolt, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Acre = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/acre", "acre", "null", SquareMetre, 4046.873 );
		Barrel = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/barrel", "barrel", "bbl", CubicMetre, 0.1589873 );
		Zeptokatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptokatal","zeptokatal","zkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Kilohenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilohenry","kilohenry","kH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Petaohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petaohm","petaohm","PÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Attosievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attosievert","attosievert","aSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Centigram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centigram","centigram","cg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		MetrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_second-time_squared","metre per second squared","m/s2",Metre, SecondTimeSquared);
		MetrePerSecondTimeSquared.addAlternativeName("meter per seconde kwadraat","nl");
		MetrePerSecondTimeSquared.addAlternativeSymbol("m s-2");
		MetrePerSecondTimeSquared.addAlternativeSymbol("mÂ·s-2");
		NanodegreeCelsius = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanodegree_Celsius","nanodegree Celsius","nÂ°C",(SingularUnit)DegreeCelsius, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		NanodegreeCelsius.addAlternativeName("nanograad Celsius","nl");
		Nanokatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanokatal","nanokatal","nkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		NanokatalPerMilligram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/nanokatal_per_milligram","nanokatal per milligram","nkat/mg",Nanokatal, Milligram);
		NanokatalPerMilligram.addAlternativeSymbol("nkat mg-1");
		NanokatalPerMilligram.addAlternativeSymbol("nkatÂ·mg-1");
		Yottahenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottahenry","yottahenry","YH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		RadianPerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/radian_per_second-time","radian per second","rad/s",Radian, SecondTime);
		RadianPerSecondTime.addAlternativeName("radiaal per seconde","nl");
		RadianPerSecondTime.addAlternativeSymbol("rad s-1");
		RadianPerSecondTime.addAlternativeSymbol("radÂ·s-1");
		Yottagray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottagray","yottagray","YGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Zettahertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettahertz","zettahertz","ZHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Zeptolux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptolux","zeptolux","zlx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		WattPerSquareMetreNanometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_square_metre_nanometre","watt per square metre nanometre","W/(m2 nm)",Watt, SquareMetreNanometre);
		WattPerSquareMetreNanometre.addAlternativeName("watt per vierkante meter nanometer","nl");
		WattPerSquareMetreNanometre.addAlternativeSymbol("W m-2 nm-1");
		WattPerSquareMetreNanometre.addAlternativeSymbol("WÂ·m-2Â·nm-1");
		WattPerSteradianSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_steradian_square_metre","watt per steradian square metre","W/(sr m2)",Watt, SteradianSquareMetre);
		WattPerSteradianSquareMetre.addAlternativeName("watt per steradiaal vierkante meter","nl");
		WattPerSteradianSquareMetre.addAlternativeSymbol("W sr-1 m-2");
		WattPerSteradianSquareMetre.addAlternativeSymbol("WÂ·sr-1Â·m-2");
		LightYear = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/light_year", "light year", "ly", Metre, 9.46073E15 );
		LightYear.addAlternativeName("lichtjaar","nl");
		Zettacandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettacandela","zettacandela","Zcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		DryPintUS = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/dry_pint-US", "dry pint (US)", "dry pt", CubicMetre, 5.506105E-4 );
		Attokatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attokatal","attokatal","akat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		FemtomolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/femtomole_per_litre","femtomole per litre","fmol/l",Femtomole, Litre);
		FemtomolePerLitre.addAlternativeName("femtomole per liter","nl");
		FemtomolePerLitre.addAlternativeSymbol("fm s-1");
		FemtomolePerLitre.addAlternativeSymbol("fmÂ·s-1");
		Month = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/month", "month", "null", nl.wur.fbr.om.model.dimensions.SIBaseDimension.TIME);
		Month.addAlternativeName("maand","nl");
		Statcoulomb = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/statcoulomb", "statcoulomb", "statC", Coulomb, 3.335641E-10 );
		Mho = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/mho", "mho", "null", Siemens, 1.0 );
		Exbibit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exbibit","exbibit","Eibit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.BinaryPrefix.EXBI);
		Attoohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attoohm","attoohm","aÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		MilligramPerKilometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/milligram_per_kilometre","milligram per kilometre","mg/km",Milligram, Kilometre);
		MilligramPerKilometre.addAlternativeName("milligram per kilometer","nl");
		MilligramPerKilometre.addAlternativeSymbol("mg km-1");
		MilligramPerKilometre.addAlternativeSymbol("mgÂ·km-1");
		SquareFemtometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_femtometre","square femtometre","fm2",Femtometre, 2.0);
		SquareFemtometre.addAlternativeName("vierkante femtometer","nl");
		Tablespoon = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/tablespoon", "tablespoon", "null", CubicMetre, 1.478676E-5 );
		Centiare = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centiare","centiare","ca",(SingularUnit)Are, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		ZeptomolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/zeptomole_per_litre","zeptomole per litre","zmol/l",Zeptomole, Litre);
		ZeptomolePerLitre.addAlternativeName("zeptomole per liter","nl");
		ZeptomolePerLitre.addAlternativeSymbol("zmol l-1");
		ZeptomolePerLitre.addAlternativeSymbol("zmolÂ·l-1");
		NewZealandDollar = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/New_Zealand_dollar", "New Zealand dollar", "null", null);
		ReciprocalHour = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_hour","reciprocal hour","h-1",Hour, -1.0);
		ReciprocalHour.addAlternativeName("omgekeerd uur","nl");
		CubicDecametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_decametre","cubic decametre","dam3",Decametre, 3.0);
		CubicDecametre.addAlternativeName("kubieke decameter","nl");
		HorsepowerMetric = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/horsepower-metric", "horsepower (metric)", "PS", Watt, 735.4988 );
		Zettaampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettaampere","zettaampere","ZA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		Zettaampere.addAlternativeName("zettaampÃ¨re","nl");
		SingaporeDollar = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Singapore_dollar", "Singapore dollar", "null", null);
		Zeptocoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptocoulomb","zeptocoulomb","zC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Footcandle = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/footcandle", "footcandle", "null", Lux, 10.76391 );
		Gigatesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigatesla","gigatesla","GT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Teragray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teragray","teragray","TGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Picohertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picohertz","picohertz","pHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		SquareGigametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_gigametre","square gigametre","Gm2",Gigametre, 2.0);
		SquareGigametre.addAlternativeName("vierkante gigameter","nl");
		Femtosiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtosiemens","femtosiemens","fS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Kayser = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/kayser", "kayser", "null", ReciprocalMetre, 100.0 );
		Gigaohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigaohm","gigaohm","GÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Torr = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/torr", "torr", "Torr", Pascal, 133.322368421053 );
		Yoctogray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctogray","yoctogray","yGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		GramPerMillilitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_millilitre","gram per millilitre","g/ml",Gram, Millilitre);
		GramPerMillilitre.addAlternativeName("gram per milliliter","nl");
		GramPerMillilitre.addAlternativeSymbol("g ml-1");
		GramPerMillilitre.addAlternativeSymbol("gÂ·ml-1");
		GallonImperial = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/gallon-Imperial", "gallon (Imperial)", "gal", CubicMetre, 0.00454609 );
		Attonewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attonewton","attonewton","aN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		CentimetreOfMercury = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centimetre_of_mercury","centimetre of mercury","cm Hg",(SingularUnit)MetreOfMercury, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		CentimetreOfMercury.addAlternativeName("centimeter kwik","nl");
		Gibibyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gibibyte","gibibyte","GiB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.BinaryPrefix.GIBI);
		HectometrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/hectometre_per_second-time","hectometre per second","hm/s",Hectometre, SecondTime);
		HectometrePerSecondTime.addAlternativeName("hectometer per seconde","nl");
		HectometrePerSecondTime.addAlternativeSymbol("hm s-1");
		HectometrePerSecondTime.addAlternativeSymbol("hmÂ·s-1");
		AmperePerWatt = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/ampere_per_watt","ampere per watt","A/W",Ampere, Watt);
		AmperePerWatt.addAlternativeSymbol("A W-1");
		AmperePerWatt.addAlternativeSymbol("AÂ·W-1");
		Yoctowatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctowatt","yoctowatt","yW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		CubicMetrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/cubic_metre_per_second-time","cubic metre per second","m3/s",CubicMetre, SecondTime);
		CubicMetrePerSecondTime.addAlternativeName("kubieke meter per seconde","nl");
		CubicMetrePerSecondTime.addAlternativeSymbol("m3 s-1");
		CubicMetrePerSecondTime.addAlternativeSymbol("m3Â·s-1");
		Microradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microradian","microradian","Î¼rad",(SingularUnit)Radian, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Microradian.addAlternativeName("microradiaal","nl");
		Petapascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petapascal","petapascal","PPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Teravolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teravolt","teravolt","TV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		MolePerMicrolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_microlitre","mole per microlitre","mol/Î¼l",Mole, Microlitre);
		MolePerMicrolitre.addAlternativeName("mole per microliter","nl");
		MolePerMicrolitre.addAlternativeSymbol("mol Î¼l-1");
		MolePerMicrolitre.addAlternativeSymbol("molÂ·Î¼l-1");
		Attoweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attoweber","attoweber","aWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		FemtogramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/femtogram_per_litre","femtogram per litre","fg/l",Femtogram, Litre);
		FemtogramPerLitre.addAlternativeName("femtogram per liter","nl");
		FemtogramPerLitre.addAlternativeSymbol("fm s-1");
		FemtogramPerLitre.addAlternativeSymbol("fmÂ·s-1");
		CalorieInternationalTable = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/calorie-International_Table", "calorie (International Table)", "cal_IT", Joule, 4.1868 );
		SquareMetreKelvinPerWatt = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_kelvin_per_watt","square metre kelvin per watt","m2 K/W",SquareMetreKelvin, Watt);
		SquareMetreKelvinPerWatt.addAlternativeName("vierkante meter kelvin per watt","nl");
		SquareMetreKelvinPerWatt.addAlternativeSymbol("m2 K W-1");
		SquareMetreKelvinPerWatt.addAlternativeSymbol("m2Â·K/W");
		SquareMetreKelvinPerWatt.addAlternativeSymbol("m2Â·KÂ·W-1");
		Attomolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attomolair","attomolair","aM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Hectokelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectokelvin","hectokelvin","hK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		Terakatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terakatal","terakatal","Tkat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Zeptohertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptohertz","zeptohertz","zHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Decavolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decavolt","decavolt","daV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		GramPerDecalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_decalitre","gram per decalitre","g/dal",Gram, Decalitre);
		GramPerDecalitre.addAlternativeName("gram per decaliter","nl");
		GramPerDecalitre.addAlternativeSymbol("g dal-1");
		GramPerDecalitre.addAlternativeSymbol("gÂ·dal-1");
		VoltPerWatt = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/volt_per_watt","volt per watt","V/W",Volt, Watt);
		VoltPerWatt.addAlternativeSymbol("V W-1");
		VoltPerWatt.addAlternativeSymbol("VÂ·W-1");
		YoctometrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/yoctometre_per_second-time_squared","yoctometre per second squared","ym/s2",Yoctometre, SecondTimeSquared);
		YoctometrePerSecondTimeSquared.addAlternativeName("yoctometer per seconde kwadraat","nl");
		YoctometrePerSecondTimeSquared.addAlternativeSymbol("ym s-2");
		YoctometrePerSecondTimeSquared.addAlternativeSymbol("ymÂ·s-2");
		Nanocandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanocandela","nanocandela","ncd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Gigavolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigavolt","gigavolt","GV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Zeptowatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptowatt","zeptowatt","zW",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Zeptopascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptopascal","zeptopascal","zPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Exaampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exaampere","exaampere","EA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Exaampere.addAlternativeName("exaampÃ¨re","nl");
		WattPerHertz = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/watt_per_hertz","watt per hertz","W/Hz",Watt, Hertz);
		WattPerHertz.addAlternativeSymbol("W Hz-1");
		WattPerHertz.addAlternativeSymbol("WÂ·Hz-1");
		Hectohertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectohertz","hectohertz","hHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		AmperePerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/ampere_per_square_metre","ampere per square metre","A/m2",Ampere, SquareMetre);
		AmperePerSquareMetre.addAlternativeName("ampÃ¨re per vierkante meter","nl");
		AmperePerSquareMetre.addAlternativeSymbol("A m-2");
		AmperePerSquareMetre.addAlternativeSymbol("AÂ·m-2");
		Terabecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/terabecquerel","terabecquerel","TBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		Kiloparsec = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kiloparsec","kiloparsec","kpc",(SingularUnit)Parsec, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		CubicKiloparsec = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_kiloparsec","cubic kiloparsec","kpc3",Kiloparsec, 3.0);
		CubicKiloparsec.addAlternativeName("kubieke kiloparsec","nl");
		GigayearCubicKiloparsec = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/gigayear_cubic_kiloparsec","gigayear cubic kiloparsec","Gyr kpc3",Gigayear, CubicKiloparsec);
		GigayearCubicKiloparsec.addAlternativeName("gigajaar kubieke kiloparsec","nl");
		GigayearCubicKiloparsec.addAlternativeSymbol("GyrÂ·kpc3");
		SolarMassPerGigayearCubicKiloparsec = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/solar_mass_per_gigayear_cubic_kiloparsec","solar mass per gigayear cubic kiloparsec","M_â˜‰/(Gyr kpc3)",SolarMass, GigayearCubicKiloparsec);
		SolarMassPerGigayearCubicKiloparsec.addAlternativeSymbol("M_â˜‰ Gyr-1 kpc-3");
		SolarMassPerGigayearCubicKiloparsec.addAlternativeSymbol("M_â˜‰Â·Gyr-1Â·kpc-3");
		MolePerExametre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_exametre","mole per exametre","mol/Em",Mole, Exametre);
		MolePerExametre.addAlternativeName("mole per exameter","nl");
		MolePerExametre.addAlternativeSymbol("mol Em-1");
		MolePerExametre.addAlternativeSymbol("molÂ·Em-1");
		KilojoulePerHectogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilojoule_per_hectogram","kilojoule per hectogram","kJ/hg",Kilojoule, Hectogram);
		KilojoulePerHectogram.addAlternativeSymbol("kJ hg-1");
		KilojoulePerHectogram.addAlternativeSymbol("kJÂ·hg-1");
		MillisecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/millisecond-time_squared","millisecond squared","ms2",MillisecondTime, 2.0);
		MillisecondTimeSquared.addAlternativeName("milliseconde kwadraat","nl");
		MilligramPerKilogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/milligram_per_kilogram","milligram per kilogram","mg/kg",Milligram, Kilogram);
		MilligramPerKilogram.addAlternativeSymbol("mg kg-1");
		MilligramPerKilogram.addAlternativeSymbol("mgÂ·kg-1");
		Decicandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decicandela","decicandela","dcd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		MolePerMillimetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_millimetre","mole per millimetre","mol/mm",Mole, Millimetre);
		MolePerMillimetre.addAlternativeName("mole per millimeter","nl");
		MolePerMillimetre.addAlternativeSymbol("mol mm-1");
		MolePerMillimetre.addAlternativeSymbol("molÂ·mm-1");
		YoctomolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/yoctomole_per_litre","yoctomole per litre","ymol/l",Yoctomole, Litre);
		YoctomolePerLitre.addAlternativeName("yoctomole per liter","nl");
		YoctomolePerLitre.addAlternativeSymbol("ymol l-1");
		YoctomolePerLitre.addAlternativeSymbol("ymolÂ·l-1");
		SquareCentimetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_centimetre","square centimetre","cm2",Centimetre, 2.0);
		SquareCentimetre.addAlternativeName("vierkante centimeter","nl");
		CandelaPerSquareCentimetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/candela_per_square_centimetre","candela per square centimetre","cd/cm",Candela, SquareCentimetre);
		CandelaPerSquareCentimetre.addAlternativeName("candela per vierkante centimeter","nl");
		CandelaPerSquareCentimetre.addAlternativeSymbol("cd cm-1");
		CandelaPerSquareCentimetre.addAlternativeSymbol("cdÂ·cm-1");
		Yoctovolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctovolt","yoctovolt","yV",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Gigagray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigagray","gigagray","GGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		GallonUS = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/gallon-US", "gallon (US)", "gal", CubicMetre, 0.003785412 );
		Kilogray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilogray","kilogray","kGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Gigagram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigagram","gigagram","Gg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		HorsepowerBritish = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/horsepower-British", "horsepower (British)", "null", Watt, 745.7 );
		Abfarad = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/abfarad", "abfarad", "abF", Farad, 1.0E9 );
		Exafarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exafarad","exafarad","EF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Petahertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petahertz","petahertz","PHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		CentimolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/centimole_per_litre","centimole per litre","cmol/l",Centimole, Litre);
		CentimolePerLitre.addAlternativeName("centimole per liter","nl");
		CentimolePerLitre.addAlternativeSymbol("cmol l-1");
		CentimolePerLitre.addAlternativeSymbol("cmolÂ·l-1");
		ZettamolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/zettamole_per_metre","zettamole per metre","Zmol/m",Zettamole, Metre);
		ZettamolePerMetre.addAlternativeName("zettamole per meter","nl");
		ZettamolePerMetre.addAlternativeSymbol("Zmol m-1");
		ZettamolePerMetre.addAlternativeSymbol("ZmolÂ·m-1");
		Kilohertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilohertz","kilohertz","kHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Decacandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decacandela","decacandela","dacd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		RussianRuble = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Russian_ruble", "Russian_ruble", "null", null);
		GramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_litre","gram per litre","g/l",Gram, Litre);
		GramPerLitre.addAlternativeName("gram per liter","nl");
		GramPerLitre.addAlternativeSymbol("g l-1");
		GramPerLitre.addAlternativeSymbol("gÂ·l-1");
		Millifarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millifarad","millifarad","mF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		SecondHourAngle = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/second-hour_angle", "second (hour angle)", "s", Degree, 0.0041666667 );
		SecondHourAngle.addAlternativeName("seconde (uurhoek)","nl");
		Gal = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/gal", "gal", "Gal", CentimetrePerSecondTimeSquared, 1.0 );
		Kip = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/kip", "kip", "null", Newton, 4448.222 );
		Kilotesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilotesla","kilotesla","kT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Centicandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centicandela","centicandela","ccd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Hectohenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectohenry","hectohenry","hH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		YoctosecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/yoctosecond-time_squared","yoctosecond squared","ys2",YoctosecondTime, 2.0);
		YoctosecondTimeSquared.addAlternativeName("yoctoseconde kwadraat","nl");
		Centinewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centinewton","centinewton","cN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Megabecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megabecquerel","megabecquerel","MBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Microwatt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microwatt","microwatt","Î¼W",(SingularUnit)Watt, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Decagray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decagray","decagray","daGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Kiloelectronvolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kiloelectronvolt","kiloelectronvolt","keV",(SingularUnit)Electronvolt, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		GramPerFemtolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_femtolitre","gram per femtolitre","g/fl",Gram, Femtolitre);
		GramPerFemtolitre.addAlternativeName("gram per femtoliter","nl");
		GramPerFemtolitre.addAlternativeSymbol("g fl-1");
		GramPerFemtolitre.addAlternativeSymbol("gÂ·fl-1");
		Millijoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millijoule","millijoule","mJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		MetrePerNanosecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_nanosecond-time","metre per nanosecond","m/ns",Metre, NanosecondTime);
		MetrePerNanosecondTime.addAlternativeName("meter per nanoseconde","nl");
		MetrePerNanosecondTime.addAlternativeSymbol("m ns-1");
		MetrePerNanosecondTime.addAlternativeSymbol("mÂ·ns-1");
		PetamolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/petamole_per_litre","petamole per litre","Pmol/l",Petamole, Litre);
		PetamolePerLitre.addAlternativeName("petamole per liter","nl");
		PetamolePerLitre.addAlternativeSymbol("Pmol l-1");
		PetamolePerLitre.addAlternativeSymbol("PmolÂ·l-1");
		Yobibyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yobibyte","yobibyte","YiB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.BinaryPrefix.YOBI);
		Decibar = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decibar","decibar","dbar",(SingularUnit)Bar, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Microgray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microgray","microgray","Î¼Gy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Zeptogram = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptogram","zeptogram","zg",(SingularUnit)Gram, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		Zettanewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettanewton","zettanewton","ZN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		MolePerNanolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_nanolitre","mole per nanolitre","mol/nl",Mole, Nanolitre);
		MolePerNanolitre.addAlternativeName("mole per nanoliter","nl");
		MolePerNanolitre.addAlternativeSymbol("mol nl-1");
		MolePerNanolitre.addAlternativeSymbol("molÂ·nl-1");
		Decilux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decilux","decilux","dlx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		GramPerTeralitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_teralitre","gram per teralitre","g/Tl",Gram, Teralitre);
		GramPerTeralitre.addAlternativeName("gram per teraliter","nl");
		GramPerTeralitre.addAlternativeSymbol("g Tl-1");
		GramPerTeralitre.addAlternativeSymbol("gÂ·Tl-1");
		YottamolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/yottamole_per_litre","yottamole per litre","Ymol/l",Yottamole, Litre);
		YottamolePerLitre.addAlternativeName("yottamole per liter","nl");
		YottamolePerLitre.addAlternativeSymbol("Ymol l-1");
		YottamolePerLitre.addAlternativeSymbol("YmolÂ·l-1");
		Gigabit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigabit","gigabit","Gbit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Millibar = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millibar","millibar","mbar",(SingularUnit)Bar, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		MillinewtonMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/millinewton_metre","millinewton metre","mN m",Millinewton, Metre);
		MillinewtonMetre.addAlternativeName("millinewton meter","nl");
		MillinewtonMetre.addAlternativeSymbol("mNÂ·m");
		MilPlaneAngle = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/mil-plane_angle", "mil (plane angle)", "null", Radian, 9.817477E-4 );
		DaySidereal = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/day-sidereal", "day (sidereal)", "null", SecondTime, 86164.09 );
		Millilux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/millilux","millilux","mlx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		MolePerKilogram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_kilogram","mole per kilogram","mol/kg",Mole, Kilogram);
		MolePerKilogram.addAlternativeName("mol per kilogram","nl");
		MolePerKilogram.addAlternativeSymbol("mol kg-1");
		MolePerKilogram.addAlternativeSymbol("molÂ·kg-1");
		KilometrePerHour = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilometre_per_hour","kilometre per hour","km/h",Kilometre, Hour);
		KilometrePerHour.addAlternativeName("kilometer per uur","nl");
		KilometrePerHour.addAlternativeSymbol("km h-1");
		KilometrePerHour.addAlternativeSymbol("kmÂ·h-1");
		YottasecondTimeSquared = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/yottasecond-time_squared","yottasecond squared","Ys2",YottasecondTime, 2.0);
		YottasecondTimeSquared.addAlternativeName("yottaseconde kwadraat","nl");
		Decipascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decipascal","decipascal","dPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Yoctosteradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctosteradian","yoctosteradian","ysr",(SingularUnit)Steradian, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		Yoctosteradian.addAlternativeName("yoctosteradiaal","nl");
		Femtosteradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtosteradian","femtosteradian","fsr",(SingularUnit)Steradian, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Femtosteradian.addAlternativeName("femtosteradiaal","nl");
		CubicZettametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_zettametre","cubic zettametre","Zm3",Zettametre, 3.0);
		CubicZettametre.addAlternativeName("kubieke zettameter","nl");
		Megatesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megatesla","megatesla","MT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Examolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/examolair","examolair","EM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Percent = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/percent", "percent", "%", One, 0.01 );
		Percent.addAlternativeName("procent","nl");
		MolePerZettalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_zettalitre","mole per zettalitre","mol/Zl",Mole, Zettalitre);
		MolePerZettalitre.addAlternativeName("mole per zettaliter","nl");
		MolePerZettalitre.addAlternativeSymbol("mol Zl-1");
		MolePerZettalitre.addAlternativeSymbol("molÂ·Zl-1");
		Picohenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picohenry","picohenry","pH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Slug = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/slug", "slug", "slug", Kilogram, 14.5939 );
		Decaweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decaweber","decaweber","daWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		GramPerAttolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_attolitre","gram per attolitre","g/al",Gram, Attolitre);
		GramPerAttolitre.addAlternativeName("gram per attoliter","nl");
		GramPerAttolitre.addAlternativeSymbol("g al-1");
		GramPerAttolitre.addAlternativeSymbol("gÂ·al-1");
		Zettajoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettajoule","zettajoule","ZJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		PicometrePerSecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/picometre_per_second-time","picometre per second","pm/s",Picometre, SecondTime);
		PicometrePerSecondTime.addAlternativeName("picometer per seconde","nl");
		PicometrePerSecondTime.addAlternativeSymbol("pm s-1");
		PicometrePerSecondTime.addAlternativeSymbol("pmÂ·s-1");
		Zettafarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettafarad","zettafarad","ZF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		CubicExametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_exametre","cubic exametre","Em3",Exametre, 3.0);
		CubicExametre.addAlternativeName("kubieke exameter","nl");
		Zeptogray = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptogray","zeptogray","zGy",(SingularUnit)Gray, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		MolePerCentimetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_centimetre","mole per centimetre","mol/cm",Mole, Centimetre);
		MolePerCentimetre.addAlternativeName("mole per centimeter","nl");
		MolePerCentimetre.addAlternativeSymbol("mol cm-1");
		MolePerCentimetre.addAlternativeSymbol("molÂ·cm-1");
		NorwegianKrone = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/Norwegian_krone", "Norwegian krone", "null", null);
		GillUS = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/gill-US", "gill (US)", "gi", CubicMetre, 1.182941E-4 );
		Nanoradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanoradian","nanoradian","nrad",(SingularUnit)Radian, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Nanoradian.addAlternativeName("nanoradiaal","nl");
		ReciprocalCubicParsec = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/reciprocal_cubic_parsec","reciprocal cubic parsec","pc-3",Parsec, -3.0);
		ReciprocalCubicParsec.addAlternativeName("omgekeerde kubieke parsec","nl");
		KilogramSquareMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_square_metre","kilogram square metre","kg m2",Kilogram, SquareMetre);
		KilogramSquareMetre.addAlternativeName("kilogram vierkante meter","nl");
		KilogramSquareMetre.addAlternativeSymbol("kgÂ·m2");
		PetagramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/petagram_per_litre","petagram per litre","Pg/l",Petagram, Litre);
		PetagramPerLitre.addAlternativeName("petagram per liter","nl");
		PetagramPerLitre.addAlternativeSymbol("Pg l-1");
		PetagramPerLitre.addAlternativeSymbol("PgÂ·l-1");
		MolePerPetalitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_petalitre","mole per petalitre","mol/Pl",Mole, Petalitre);
		MolePerPetalitre.addAlternativeName("mole per petaliter","nl");
		MolePerPetalitre.addAlternativeSymbol("mol Pl-1");
		MolePerPetalitre.addAlternativeSymbol("molÂ·Pl-1");
		CubicTerametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/cubic_terametre","cubic terametre","Tm3",Terametre, 3.0);
		CubicTerametre.addAlternativeName("kubieke terameter","nl");
		Micron = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/micron", "micron", "Î¼", Metre, 1.0E-6 );
		Decapascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decapascal","decapascal","daPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Yoctoweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctoweber","yoctoweber","yWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		RadianPerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/radian_per_second-time_squared","radian per second squared","rad/s2",Radian, SecondTimeSquared);
		RadianPerSecondTimeSquared.addAlternativeName("radiaal per seconde kwadraat","nl");
		RadianPerSecondTimeSquared.addAlternativeSymbol("rad s-2");
		RadianPerSecondTimeSquared.addAlternativeSymbol("radÂ·s-2");
		ThermUS = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/therm-US", "therm (US)", "null", Joule, 1.054804E8 );
		Decilumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decilumen","decilumen","dlm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Yottaweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottaweber","yottaweber","YWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Exacandela = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exacandela","exacandela","Ecd",(SingularUnit)Candela, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Hectocoulomb = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectocoulomb","hectocoulomb","hC",(SingularUnit)Coulomb, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		ExamolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/examole_per_litre","examole per litre","Emol/l",Examole, Litre);
		ExamolePerLitre.addAlternativeName("examole per liter","nl");
		ExamolePerLitre.addAlternativeSymbol("Emol l-1");
		ExamolePerLitre.addAlternativeSymbol("EmolÂ·l-1");
		Centiweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centiweber","centiweber","cWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Exajoule = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exajoule","exajoule","EJ",(SingularUnit)Joule, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		MetrePerYoctosecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_yoctosecond-time_squared","metre per yoctosecond squared","m/ys2",Metre, YoctosecondTimeSquared);
		MetrePerYoctosecondTimeSquared.addAlternativeName("meter per yoctoseconde kwadraat","nl");
		MetrePerYoctosecondTimeSquared.addAlternativeSymbol("m ys-2");
		MetrePerYoctosecondTimeSquared.addAlternativeSymbol("mÂ·ys-2");
		Angstrom = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/angstrom", "Ã¥ngstrÃ¶m", "Ã…", Metre, 1.0E-10 );
		Yottanewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottanewton","yottanewton","YN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Milliweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/milliweber","milliweber","mWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.MILLI);
		DeltaA450PerSecondTimePerMilligram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/delta_A450_per_second-time_per_milligram","delta A450 per second per milligram","null",DeltaA450PerSecondTime, Milligram);
		DeltaA450PerSecondTimePerMilligram.addAlternativeName("delta A450 per seconde per milligram","nl");
		WattSquareMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/watt_square_metre","watt square metre","W m2",Watt, SquareMetre);
		WattSquareMetre.addAlternativeName("watt vierkante meter","nl");
		WattSquareMetre.addAlternativeSymbol("WÂ·m2");
		Yottabecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottabecquerel","yottabecquerel","YBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Furlong = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/furlong", "furlong", "null", Metre, 201.168 );
		GigamolePerMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gigamole_per_metre","gigamole per metre","Gmol/m",Gigamole, Metre);
		GigamolePerMetre.addAlternativeName("gigamole per meter","nl");
		GigamolePerMetre.addAlternativeSymbol("Gmol m-1");
		GigamolePerMetre.addAlternativeSymbol("GmolÂ·m-1");
		Gigabyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigabyte","gigabyte","GB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Petalux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petalux","petalux","Plx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		SquareYoctometre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_yoctometre","square yoctometre","ym2",Yoctometre, 2.0);
		SquareYoctometre.addAlternativeName("vierkante yoctometer","nl");
		MoleMicrometreReciprocalSquareCentimetreReciprocalSecondTimeReciprocalAtmosphereStandard = null;
		Yottakatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottakatal","yottakatal","Ykat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		Femtoradian = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtoradian","femtoradian","frad",(SingularUnit)Radian, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		Femtoradian.addAlternativeName("femtoradiaal","nl");
		MetrePerAttosecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_attosecond-time","metre per attosecond","m/as",Metre, AttosecondTime);
		MetrePerAttosecondTime.addAlternativeName("meter per attoseconde","nl");
		MetrePerAttosecondTime.addAlternativeSymbol("m as-1");
		MetrePerAttosecondTime.addAlternativeSymbol("mÂ·as-1");
		Yottamolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottamolair","yottamolair","YM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		SquareMillimetre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_millimetre","square millimetre","mm2",Millimetre, 2.0);
		SquareMillimetre.addAlternativeName("vierkante millimeter","nl");
		SquareTerametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_terametre","square terametre","Tm2",Terametre, 2.0);
		SquareTerametre.addAlternativeName("vierkante terameter","nl");
		SecondTimePerDay = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/second-time_per_day","second per day","s/d",SecondTime, Day);
		SecondTimePerDay.addAlternativeName("seconde per dag","nl");
		SecondTimePerDay.addAlternativeSymbol("s d-1");
		SecondTimePerDay.addAlternativeSymbol("sÂ·d-1");
		Zettatesla = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zettatesla","zettatesla","ZT",(SingularUnit)Tesla, nl.wur.fbr.om.prefixes.DecimalPrefix.ZETTA);
		SolarLuminosity = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/solar_luminosity", "solar luminosity", "L_â˜‰", Watt, 3.839E26 );
		Perm0C = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/perm-0_C", "perm (0 Â°C)", "null", KilogramPerPascalSecondTimeSquareMetre, 5.72135E-11 );
		MetrePerZettasecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_zettasecond-time","metre per zettasecond","m/Zs",Metre, ZettasecondTime);
		MetrePerZettasecondTime.addAlternativeName("meter per zettaseconde","nl");
		MetrePerZettasecondTime.addAlternativeSymbol("m Zs-1");
		MetrePerZettasecondTime.addAlternativeSymbol("mÂ·Zs-1");
		FootUSSurvey = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/foot-US_survey", "foot (US survey)", "ft", Metre, 0.3048006 );
		GramMetreToThePower2ReciprocalMetre = factory.createUnitMultiplication("http://www.wurvoc.org/vocabularies/om-1.8/gram_metre_to_the_power_-2_reciprocal_metre","gram metre to the power -2 reciprocal metre","g m-2 m-1",Gram, MetreToThePower2);
		GramMetreToThePower2ReciprocalMetre.addAlternativeName("gram meter tot de macht -2 omgekeerde meter","nl");
		GramMetreToThePower2ReciprocalMetre.addAlternativeSymbol("gÂ·m-2Â·m-1");
		CentigramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/centigram_per_litre","centigram per litre","cg/l",Centigram, Litre);
		CentigramPerLitre.addAlternativeName("centigram per liter","nl");
		CentigramPerLitre.addAlternativeSymbol("cg l-1");
		CentigramPerLitre.addAlternativeSymbol("cgÂ·l-1");
		Microvolt = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microvolt","microvolt","Î¼V",(SingularUnit)Volt, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Yard = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/yard", "yard", "yd", Metre, 0.9144 );
		KilocolonyFormingUnit = null;
		Yoctokatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yoctokatal","yoctokatal","ykat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.YOCTO);
		ExagramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/exagram_per_litre","exagram per litre","Eg/l",Exagram, Litre);
		ExagramPerLitre.addAlternativeName("exagram per liter","nl");
		ExagramPerLitre.addAlternativeSymbol("Eg l-1");
		ExagramPerLitre.addAlternativeSymbol("EgÂ·l-1");
		Yottaohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottaohm","yottaohm","YÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		GigagramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gigagram_per_litre","gigagram per litre","Gg/l",Gigagram, Litre);
		GigagramPerLitre.addAlternativeName("gigagram per liter","nl");
		GigagramPerLitre.addAlternativeSymbol("Gg l-1");
		GigagramPerLitre.addAlternativeSymbol("GgÂ·l-1");
		Megaampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megaampere","megaampere","MA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Megaampere.addAlternativeName("megaampÃ¨re","nl");
		TonnePerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/tonne_per_cubic_metre","tonne per cubic metre","t/m3",Tonne, CubicMetre);
		TonnePerCubicMetre.addAlternativeName("ton per kubieke meter","nl");
		TonnePerCubicMetre.addAlternativeSymbol("t m-3");
		TonnePerCubicMetre.addAlternativeSymbol("tÂ·m-3");
		TonOfTNT = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/ton_of_TNT", "ton of TNT", "null", Joule, 4.184E9 );
		Picoohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picoohm","picoohm","pÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		CentidegreeCelsius = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centidegree_Celsius","centidegree Celsius","cÂ°C",(SingularUnit)DegreeCelsius, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		CentidegreeCelsius.addAlternativeName("centigraad Celsius","nl");
		Shannon = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/shannon", "shannon", "Sh", Bit, 1.0 );
		Picobecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picobecquerel","picobecquerel","pBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		Decakatal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decakatal","decakatal","dakat",(SingularUnit)Katal, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Nanoohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanoohm","nanoohm","nÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		GramPerCentilitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_centilitre","gram per centilitre","g/cl",Gram, Centilitre);
		GramPerCentilitre.addAlternativeName("gram per centiliter","nl");
		GramPerCentilitre.addAlternativeSymbol("g cl-1");
		GramPerCentilitre.addAlternativeSymbol("gÂ·cl-1");
		Gamma = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/gamma", "gamma", "Î³", Tesla, 1.0E-9 );
		Teraweber = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/teraweber","teraweber","TWb",(SingularUnit)Weber, nl.wur.fbr.om.prefixes.DecimalPrefix.TERA);
		TeramolePerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/teramole_per_litre","teramole per litre","Tmol/l",Teramole, Litre);
		TeramolePerLitre.addAlternativeName("teramole per liter","nl");
		TeramolePerLitre.addAlternativeSymbol("Tmol l-1");
		TeramolePerLitre.addAlternativeSymbol("TmolÂ·l-1");
		Exanewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exanewton","exanewton","EN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Poundal = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/poundal", "poundal", "null", Newton, 0.138255 );
		Zeptobecquerel = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptobecquerel","zeptobecquerel","zBq",(SingularUnit)Becquerel, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		MolePerAttolitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_attolitre","mole per attolitre","mol/al",Mole, Attolitre);
		MolePerAttolitre.addAlternativeName("mole per attoliter","nl");
		MolePerAttolitre.addAlternativeSymbol("mol al-1");
		MolePerAttolitre.addAlternativeSymbol("molÂ·al-1");
		NanounifiedAtomicMassUnit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/nanounified_atomic_mass_unit","nanounified atomic mass unit","nu",(SingularUnit)UnifiedAtomicMassUnit, nl.wur.fbr.om.prefixes.DecimalPrefix.NANO);
		Attoampere = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attoampere","attoampere","aA",(SingularUnit)Ampere, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Attoampere.addAlternativeName("attoampÃ¨re","nl");
		Gigaparsec = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigaparsec","gigaparsec","Gpc",(SingularUnit)Parsec, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		SquareMetrePerGram = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/square_metre_per_gram","square metre per gram","m2/g",SquareMetre, Gram);
		SquareMetrePerGram.addAlternativeName("vierkante meter per gram","nl");
		SquareMetrePerGram.addAlternativeSymbol("m2 g-1");
		SquareMetrePerGram.addAlternativeSymbol("m2Â·g-1");
		Zeptohenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/zeptohenry","zeptohenry","zH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.ZEPTO);
		ExametrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/exametre_per_second-time_squared","exametre per second squared","Em/s2",Exametre, SecondTimeSquared);
		ExametrePerSecondTimeSquared.addAlternativeName("exameter per seconde kwadraat","nl");
		ExametrePerSecondTimeSquared.addAlternativeSymbol("Em s-2");
		ExametrePerSecondTimeSquared.addAlternativeSymbol("EmÂ·s-2");
		KilogramPerSquareMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/kilogram_per_square_metre","kilogram per square metre","kg/m2",Kilogram, SquareMetre);
		KilogramPerSquareMetre.addAlternativeName("kilogram per vierkante meter","nl");
		KilogramPerSquareMetre.addAlternativeSymbol("kg m-2");
		KilogramPerSquareMetre.addAlternativeSymbol("kgÂ·m-2");
		MolePerDecimetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_decimetre","mole per decimetre","mol/dm",Mole, Decimetre);
		MolePerDecimetre.addAlternativeName("mole per decimeter","nl");
		MolePerDecimetre.addAlternativeSymbol("mol dm-1");
		MolePerDecimetre.addAlternativeSymbol("molÂ·dm-1");
		GramPerCubicMetre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gram_per_cubic_metre","gram per cubic metre","g/m3",Gram, CubicMetre);
		GramPerCubicMetre.addAlternativeName("gram per kubieke meter","nl");
		GramPerCubicMetre.addAlternativeSymbol("g m-3");
		GramPerCubicMetre.addAlternativeSymbol("gÂ·m-3");
		Fathom = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/fathom", "fathom", "null", Metre, 1.828804 );
		Meganewton = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/meganewton","meganewton","MN",(SingularUnit)Newton, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Exabyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exabyte","exabyte","EB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Micropascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/micropascal","micropascal","Î¼Pa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Decaohm = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decaohm","decaohm","daÎ©",(SingularUnit)Ohm, nl.wur.fbr.om.prefixes.DecimalPrefix.DECA);
		Gigapascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigapascal","gigapascal","GPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Statampere = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/statampere", "statampere", "statA", Ampere, 3.335641E-10 );
		Statampere.addAlternativeName("statampÃ¨re","nl");
		Centisievert = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centisievert","centisievert","cSv",(SingularUnit)Sievert, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		MetrePerGigasecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_gigasecond-time","metre per gigasecond","m/Gs",Metre, GigasecondTime);
		MetrePerGigasecondTime.addAlternativeName("meter per gigaseconde","nl");
		MetrePerGigasecondTime.addAlternativeSymbol("m Gs-1");
		MetrePerGigasecondTime.addAlternativeSymbol("mÂ·Gs-1");
		Kilopascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilopascal","kilopascal","kPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Calorie20C = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/calorie-20_C", "calorie (20 Â°C)", "cal_20", Joule, 4.1819 );
		GigametrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/gigametre_per_second-time_squared","gigametre per second squared","Gm/s2",Gigametre, SecondTimeSquared);
		GigametrePerSecondTimeSquared.addAlternativeName("gigameter per seconde kwadraat","nl");
		GigametrePerSecondTimeSquared.addAlternativeSymbol("Gm s-2");
		GigametrePerSecondTimeSquared.addAlternativeSymbol("GmÂ·s-2");
		Attokelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/attokelvin","attokelvin","aK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.ATTO);
		Hectolumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/hectolumen","hectolumen","hlm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.HECTO);
		OunceAvoirdupois = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/ounce-avoirdupois", "ounce (avoirdupois)", "oz", Kilogram, 0.02834952 );
		OunceAvoirdupois.addAlternativeSymbol("oz (av.)");
		OunceAvoirdupois.addAlternativeSymbol("oz avdp");
		MolePerPicometre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/mole_per_picometre","mole per picometre","mol/pm",Mole, Picometre);
		MolePerPicometre.addAlternativeName("mole per picometer","nl");
		MolePerPicometre.addAlternativeSymbol("mol pm-1");
		MolePerPicometre.addAlternativeSymbol("molÂ·pm-1");
		Picolumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picolumen","picolumen","plm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		ZeptogramPerLitre = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/zeptogram_per_litre","zeptogram per litre","zg/l",Zeptogram, Litre);
		ZeptogramPerLitre.addAlternativeName("zeptogram per liter","nl");
		ZeptogramPerLitre.addAlternativeSymbol("zg l-1");
		ZeptogramPerLitre.addAlternativeSymbol("zgÂ·l-1");
		MetrePerYottasecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_yottasecond-time_squared","metre per yottasecond squared","m/Ys2",Metre, YottasecondTimeSquared);
		MetrePerYottasecondTimeSquared.addAlternativeName("meter per yottaseconde kwadraat","nl");
		MetrePerYottasecondTimeSquared.addAlternativeSymbol("m Ys-2");
		MetrePerYottasecondTimeSquared.addAlternativeSymbol("mÂ·Ys-2");
		LitrePerMole = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/litre_per_mole","litre per mole","l/mol",Litre, Mole);
		LitrePerMole.addAlternativeName("liter per mol","nl");
		LitrePerMole.addAlternativeSymbol("l mol-1");
		LitrePerMole.addAlternativeSymbol("lÂ·mol-1");
		Decihertz = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decihertz","decihertz","dHz",(SingularUnit)Hertz, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Gigafarad = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/gigafarad","gigafarad","GF",(SingularUnit)Farad, nl.wur.fbr.om.prefixes.DecimalPrefix.GIGA);
		Microlumen = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/microlumen","microlumen","Î¼lm",(SingularUnit)Lumen, nl.wur.fbr.om.prefixes.DecimalPrefix.MICRO);
		Yottabit = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/yottabit","yottabit","Ybit",(SingularUnit)Bit, nl.wur.fbr.om.prefixes.DecimalPrefix.YOTTA);
		PointDidot = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/point-Didot", "point (Didot)", "pt", Metre, 3.759E-4 );
		AttometrePerSecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/attometre_per_second-time_squared","attometre per second squared","am/s2",Attometre, SecondTimeSquared);
		AttometrePerSecondTimeSquared.addAlternativeName("attometer per seconde kwadraat","nl");
		AttometrePerSecondTimeSquared.addAlternativeSymbol("am s-2");
		AttometrePerSecondTimeSquared.addAlternativeSymbol("amÂ·s-2");
		Megakelvin = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/megakelvin","megakelvin","MK",(SingularUnit)Kelvin, nl.wur.fbr.om.prefixes.DecimalPrefix.MEGA);
		Centimolair = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centimolair","centimolair","cM",(SingularUnit)Molair, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Kilotonne = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilotonne","kilotonne","kt",(SingularUnit)Tonne, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		Kilotonne.addAlternativeName("kiloton","nl");
		Petabyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petabyte","petabyte","PB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Decisiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/decisiemens","decisiemens","dS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.DECI);
		Hartley = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/hartley", "hartley", "Hart", Bit, 3.321928095 );
		Exalux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/exalux","exalux","Elx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.EXA);
		Bushel = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/bushel", "bushel", "bu", CubicMetre, 0.03523907 );
		Picopascal = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/picopascal","picopascal","pPa",(SingularUnit)Pascal, nl.wur.fbr.om.prefixes.DecimalPrefix.PICO);
		MetrePerMillisecondTimeSquared = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_millisecond-time_squared","metre per millisecond squared","m/ms2",Metre, MillisecondTimeSquared);
		MetrePerMillisecondTimeSquared.addAlternativeName("meter per milliseconde kwadraat","nl");
		MetrePerMillisecondTimeSquared.addAlternativeSymbol("m ms-2");
		MetrePerMillisecondTimeSquared.addAlternativeSymbol("mÂ·ms-2");
		Centisiemens = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/centisiemens","centisiemens","cS",(SingularUnit)Siemens, nl.wur.fbr.om.prefixes.DecimalPrefix.CENTI);
		Petahenry = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/petahenry","petahenry","PH",(SingularUnit)Henry, nl.wur.fbr.om.prefixes.DecimalPrefix.PETA);
		Cicero = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/cicero", "cicero", "null", PointDidot, 12.0 );
		SquareMegametre = factory.createUnitExponentiation("http://www.wurvoc.org/vocabularies/om-1.8/square_megametre","square megametre","Mm2",Megametre, 2.0);
		SquareMegametre.addAlternativeName("vierkante megameter","nl");
		Stere = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/stere", "stere", "null", CubicMetre, 1.0 );
		Rad = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/rad", "rad", "rad", Gray, 0.01 );
		Kilobyte = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/kilobyte","kilobyte","kB",(SingularUnit)Byte, nl.wur.fbr.om.prefixes.DecimalPrefix.KILO);
		MetrePerCentisecondTime = factory.createUnitDivision("http://www.wurvoc.org/vocabularies/om-1.8/metre_per_centisecond-time","metre per centisecond","m/cs",Metre, CentisecondTime);
		MetrePerCentisecondTime.addAlternativeName("meter per centiseconde","nl");
		MetrePerCentisecondTime.addAlternativeSymbol("m cs-1");
		MetrePerCentisecondTime.addAlternativeSymbol("mÂ·cs-1");
		PoundForce = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/pound-force", "pound-force", "lbf", Newton, 4.448222 );
		TonRegister = factory.createSingularUnit("http://www.wurvoc.org/vocabularies/om-1.8/ton-register", "ton (register)", "null", CubicMetre, 2.831658 );
		Femtolux = factory.createPrefixedUnit("http://www.wurvoc.org/vocabularies/om-1.8/femtolux","femtolux","flx",(SingularUnit)Lux, nl.wur.fbr.om.prefixes.DecimalPrefix.FEMTO);
		InternationalUnit = factory.createBaseUnit("http://www.wurvoc.org/vocabularies/om-1.8/International_Unit", "International Unit", "IU", nl.wur.fbr.om.model.dimensions.SIBaseDimension.MASS);
	}

    /**
     * Returns all units in this set.
     *
     * @return All units.
     */
    @Override
    public Set<Unit> getAllUnits() {
        Set<Unit> units = new HashSet<>();
        units.add(Decasievert);
        units.add(Statvolt);
        units.add(MegametrePerSecondTime);
        units.add(Attohertz);
        units.add(Petagray);
        units.add(Terametre);
        units.add(MetrePerYottasecondTime);
        units.add(Yoctosievert);
        units.add(Gigasiemens);
        units.add(DecasecondTimeSquared);
        units.add(MetrePerMicrosecondTimeSquared);
        units.add(Jansky);
        units.add(Zebibit);
        units.add(OunceApothecaries);
        units.add(Oersted);
        units.add(Yoctohenry);
        units.add(Gigaweber);
        units.add(ZettagramPerLitre);
        units.add(Microhertz);
        units.add(Yottajoule);
        units.add(MetrePerMegasecondTimeSquared);
        units.add(Gigakatal);
        units.add(Decakelvin);
        units.add(Megasiemens);
        units.add(Petaampere);
        units.add(GramPerYoctolitre);
        units.add(Picokatal);
        units.add(Kilolux);
        units.add(Ampere);
        units.add(MetrePerHectosecondTimeSquared);
        units.add(Picoweber);
        units.add(Decisievert);
        units.add(CandelaSteradian);
        units.add(SquareMicrometre);
        units.add(Hectobecquerel);
        units.add(Petagram);
        units.add(CubicMegametre);
        units.add(DecisecondTime);
        units.add(Tesla);
        units.add(PoundAvoirdupois);
        units.add(FemtomolePerMetre);
        units.add(Kilolitre);
        units.add(Yottametre);
        units.add(Exasievert);
        units.add(Petamolair);
        units.add(MillimetreOfMercury);
        units.add(GramPerNanolitre);
        units.add(Inch);
        units.add(Megabit);
        units.add(PicosecondTime);
        units.add(SquareMetrePerSquareMetreDay);
        units.add(Nanopascal);
        units.add(TonnePerHectare);
        units.add(Megasievert);
        units.add(Hectolitre);
        units.add(HectometrePerSecondTimeSquared);
        units.add(BritishThermalUnitInternationalTable);
        units.add(DegreeCelsiusPerHour);
        units.add(GramPerCubicCentimetre);
        units.add(Exatesla);
        units.add(Centikelvin);
        units.add(Exakelvin);
        units.add(Gigasievert);
        units.add(MillimolePerMetre);
        units.add(Gon);
        units.add(MolePerMicrometre);
        units.add(Zettapascal);
        units.add(Millivolt);
        units.add(Petamole);
        units.add(Exasiemens);
        units.add(Centihenry);
        units.add(Megafarad);
        units.add(Rem);
        units.add(ReciprocalHenry);
        units.add(Femtocandela);
        units.add(Teratesla);
        units.add(Zeptolitre);
        units.add(Decahertz);
        units.add(SquareMetrePerSquareMetre);
        units.add(Metre);
        units.add(SquareExametre);
        units.add(Zeptocandela);
        units.add(CircularMil);
        units.add(MolePerExalitre);
        units.add(AstronomicalUnit);
        units.add(KelvinKilogram);
        units.add(Exavolt);
        units.add(MillisecondTime);
        units.add(MegasecondTimeSquared);
        units.add(Millimole);
        units.add(Zettasiemens);
        units.add(Millisteradian);
        units.add(Decihenry);
        units.add(Nanoweber);
        units.add(Biot);
        units.add(PartsPerMillion);
        units.add(Abampere);
        units.add(Zettasievert);
        units.add(Yottatesla);
        units.add(Terajoule);
        units.add(Milliwatt);
        units.add(ReciprocalDegreeCelsiusDay);
        units.add(JapaneseYen);
        units.add(Gigayear);
        units.add(DryGallonUS);
        units.add(Foot);
        units.add(Exbibyte);
        units.add(Nanocoulomb);
        units.add(Exametre);
        units.add(ReciprocalYear);
        units.add(Statfarad);
        units.add(SecondTimeSquared);
        units.add(FemtometrePerSecondTime);
        units.add(Femtopascal);
        units.add(CentimolePerMetre);
        units.add(Deciradian);
        units.add(GramPerPicolitre);
        units.add(Megawatt);
        units.add(MicromolePerMole);
        units.add(ErgSecondTime);
        units.add(MolePerMillilitre);
        units.add(SecondTimeToThePower2);
        units.add(NanosecondTimeSquared);
        units.add(ZeptosecondTime);
        units.add(Attohenry);
        units.add(Milligray);
        units.add(CubicMillimetre);
        units.add(Hectomolair);
        units.add(Yottakelvin);
        units.add(Rhe);
        units.add(NanosecondTime);
        units.add(JoulePerSquareMetre);
        units.add(MetrePerPetasecondTimeSquared);
        units.add(Milligram);
        units.add(MolePerKilometre);
        units.add(Kilolumen);
        units.add(Yoctosiemens);
        units.add(Zeptolumen);
        units.add(Terafarad);
        units.add(Exabit);
        units.add(MetrePerMegasecondTime);
        units.add(Stattesla);
        units.add(Zeptoradian);
        units.add(Yoctohertz);
        units.add(YoctodegreeCelsius);
        units.add(TeragramPerLitre);
        units.add(MolePerMegametre);
        units.add(Microhenry);
        units.add(Yottaampere);
        units.add(ZettamolePerLitre);
        units.add(ReciprocalPascalSecondTime);
        units.add(Zettabecquerel);
        units.add(DecametrePerSecondTime);
        units.add(MolePerDecalitre);
        units.add(Microcoulomb);
        units.add(KilocolonyFormingUnitPerMillilitre);
        units.add(Megamole);
        units.add(Petavolt);
        units.add(WattPerNanometre);
        units.add(Yoctoradian);
        units.add(Decalumen);
        units.add(LiquidQuartUS);
        units.add(KilometrePerSecondTimePerMegaparsec);
        units.add(MegaeuroPerMegawatt);
        units.add(CubicKilometre);
        units.add(Centikatal);
        units.add(Petacoulomb);
        units.add(Hectovolt);
        units.add(Kilovolt);
        units.add(Terasiemens);
        units.add(GramPerPetalitre);
        units.add(SolarMassPerGigayearCubicParsec);
        units.add(Exagray);
        units.add(MagnitudePerSecondPlaneAngleSquared);
        units.add(MolePerCentilitre);
        units.add(Megalitre);
        units.add(Attolumen);
        units.add(MetrePerKilosecondTime);
        units.add(Kelvin);
        units.add(Zettalux);
        units.add(Exagram);
        units.add(ThermEC);
        units.add(MolePerCubicMetre);
        units.add(HectogramPerLitre);
        units.add(Kilofarad);
        units.add(FluidOunceUS);
        units.add(Megamolair);
        units.add(Decawatt);
        units.add(Kilobit);
        units.add(ExamolePerMetre);
        units.add(Terasievert);
        units.add(SquareMetreKelvin);
        units.add(Petaweber);
        units.add(CubicCentimetrePerCubicCentimetre);
        units.add(Zettawatt);
        units.add(GramPerGram);
        units.add(DecametrePerSecondTimeSquared);
        units.add(Erg);
        units.add(Femtojoule);
        units.add(Hectolux);
        units.add(MolePerSecondTime);
        units.add(MetrePerPetasecondTime);
        units.add(Hectopascal);
        units.add(PetasecondTime);
        units.add(CandelaPerSquareMetre);
        units.add(YoctometrePerSecondTime);
        units.add(Milliradian);
        units.add(ExasecondTime);
        units.add(WattPerSecondPlaneAngleSquared);
        units.add(Megalux);
        units.add(TerametrePerSecondTime);
        units.add(Farad);
        units.add(GramPerSquareMetreSecondTime);
        units.add(UnifiedAtomicMassUnit);
        units.add(YoctogramPerLitre);
        units.add(DecasecondTime);
        units.add(Decamolair);
        units.add(MegaeuroPerMegatonne);
        units.add(Candela);
        units.add(HectomolePerMetre);
        units.add(Zettaweber);
        units.add(JoulePerSquareMetreDay);
        units.add(MetrePerDecasecondTimeSquared);
        units.add(Poise);
        units.add(MicrogramPerSquareMetreSecondTime);
        units.add(Nanohertz);
        units.add(PascalSecondTime);
        units.add(Hectoampere);
        units.add(AcreFoot);
        units.add(Joule);
        units.add(CalorieThermochemical);
        units.add(MetreKilogramPerSecondTime);
        units.add(Kilocoulomb);
        units.add(Hectofarad);
        units.add(Millikatal);
        units.add(DecimetrePerSecondTimeSquared);
        units.add(CentisecondTimeSquared);
        units.add(IndianRupee);
        units.add(BitPerSecondTime);
        units.add(Exaohm);
        units.add(Maxwell);
        units.add(Hectojoule);
        units.add(Picosievert);
        units.add(SecondTimePerSquareMetre);
        units.add(Millitesla);
        units.add(Yottafarad);
        units.add(MetrePerZeptosecondTimeSquared);
        units.add(Abmho);
        units.add(CentimetrePerSecondTimeSquared);
        units.add(Kilojoule);
        units.add(MolePerDecilitre);
        units.add(WattPerMetreKelvin);
        units.add(Centiampere);
        units.add(Hectogray);
        units.add(PicometrePerSecondTimeSquared);
        units.add(Hectomole);
        units.add(Kilomole);
        units.add(Milligauss);
        units.add(Petakatal);
        units.add(Rod);
        units.add(Femtometre);
        units.add(Nanohenry);
        units.add(PicodegreeCelsius);
        units.add(PetasecondTimeSquared);
        units.add(Zettagray);
        units.add(Stokes);
        units.add(Yoctokelvin);
        units.add(MolePerYoctometre);
        units.add(Petabecquerel);
        units.add(Petawatt);
        units.add(Decinewton);
        units.add(Attolux);
        units.add(Picomolair);
        units.add(FemtosecondTime);
        units.add(Zettagram);
        units.add(Zettamolair);
        units.add(Pennyweight);
        units.add(Teraampere);
        units.add(Centilux);
        units.add(Decahenry);
        units.add(Gigamolair);
        units.add(Millimagnitude);
        units.add(Picosiemens);
        units.add(MexicanPeso);
        units.add(Femtofarad);
        units.add(Kilowatt);
        units.add(VoltPerMetre);
        units.add(Decasiemens);
        units.add(SolarMass);
        units.add(Decalux);
        units.add(Megatonne);
        units.add(SwedishKrona);
        units.add(Examole);
        units.add(Phot);
        units.add(MetrePerNanosecondTimeSquared);
        units.add(Exawatt);
        units.add(KilogramPerGigajoule);
        units.add(GramPerGigalitre);
        units.add(TerametrePerSecondTimeSquared);
        units.add(Zeptonewton);
        units.add(Petakelvin);
        units.add(ZeptodegreeCelsius);
        units.add(Femtosievert);
        units.add(CubicYoctometre);
        units.add(Hectogram);
        units.add(Zettamole);
        units.add(KelvinMole);
        units.add(TeramolePerMetre);
        units.add(MicromolePerSecondTimeGram);
        units.add(NanometrePerSecondTime);
        units.add(Zebibyte);
        units.add(KilocalorieMean);
        units.add(Barye);
        units.add(MillidegreeCelsius);
        units.add(Yoctonewton);
        units.add(MicronewtonMetre);
        units.add(ExametrePerSecondTime);
        units.add(ZeptometrePerSecondTime);
        units.add(DegreeCelsiusPerSecondTime);
        units.add(Faraday);
        units.add(Terakelvin);
        units.add(MetrePerMetre);
        units.add(Franklin);
        units.add(MolePerFemtometre);
        units.add(GramPerSquareMetreMetre);
        units.add(GigasecondTimeSquared);
        units.add(Femtohertz);
        units.add(CubicMicrometre);
        units.add(ReciprocalCubicCentimetre);
        units.add(HongKongDollar);
        units.add(Exaweber);
        units.add(Femtotesla);
        units.add(Centilumen);
        units.add(Tebibit);
        units.add(Zeptometre);
        units.add(AttomolePerMetre);
        units.add(Zettavolt);
        units.add(Abohm);
        units.add(Decigram);
        units.add(MolePerMole);
        units.add(Zeptosievert);
        units.add(Femtocoulomb);
        units.add(Zettabit);
        units.add(Gigahertz);
        units.add(MegajoulePerSquareMetreDay);
        units.add(GramPerExalitre);
        units.add(ZeptometrePerSecondTimeSquared);
        units.add(Cup);
        units.add(SquarePicometre);
        units.add(MileUSSurvey);
        units.add(Shake);
        units.add(Teranewton);
        units.add(Hour);
        units.add(Decigray);
        units.add(CubicMetrePerMole);
        units.add(NanogramPerLitre);
        units.add(HourHourAngle);
        units.add(Millibecquerel);
        units.add(Picotesla);
        units.add(MetrePerHectosecondTime);
        units.add(Microweber);
        units.add(Are);
        units.add(MetreToThePower2ReciprocalMetre);
        units.add(MoleMicrometreReciprocalSquareCentimetre);
        units.add(Yottamole);
        units.add(Zeptosiemens);
        units.add(Attoradian);
        units.add(Decisteradian);
        units.add(Pebibyte);
        units.add(MolePerHectometre);
        units.add(Megabyte);
        units.add(MillisecondPlaneAnglePerYear);
        units.add(Decafarad);
        units.add(GramPerZeptolitre);
        units.add(UnitedStatesDollar);
        units.add(Tebibyte);
        units.add(Picokelvin);
        units.add(Petametre);
        units.add(CoulombPerVolt);
        units.add(Hectowatt);
        units.add(WattPerCubicMetre);
        units.add(MegametrePerSecondTimeSquared);
        units.add(MolePerGigalitre);
        units.add(WattPerAmpere);
        units.add(Kibibyte);
        units.add(Microkatal);
        units.add(Petajoule);
        units.add(HenryPerMetre);
        units.add(Picosteradian);
        units.add(MillimolePerLitre);
        units.add(Hectometre);
        units.add(PicaATA);
        units.add(JoulePerKelvinMole);
        units.add(Decikatal);
        units.add(Megapascal);
        units.add(Millimolair);
        units.add(Teramolair);
        units.add(PicomolePerMetre);
        units.add(Deciweber);
        units.add(Micromolair);
        units.add(Decimole);
        units.add(Exakatal);
        units.add(JoulePerMole);
        units.add(GramPerHectolitre);
        units.add(Attocandela);
        units.add(MoleMicrometreReciprocalSquareCentimetreReciprocalSecondTime);
        units.add(Yottawatt);
        units.add(Decabecquerel);
        units.add(Nanoampere);
        units.add(MetrePerMillisecondTime);
        units.add(Microlux);
        units.add(CubicMetre);
        units.add(Decanewton);
        units.add(Microbar);
        units.add(Femtoampere);
        units.add(LitrePerHour);
        units.add(PartsPerMillionPerYear);
        units.add(WeberPerSquareMetre);
        units.add(Litre);
        units.add(Picometre);
        units.add(Knot);
        units.add(SquareMetreNanometre);
        units.add(WattPerSteradian);
        units.add(Zeptojoule);
        units.add(Centilitre);
        units.add(MetreKilogram);
        units.add(Femtobecquerel);
        units.add(MetrePerExasecondTime);
        units.add(Gigacandela);
        units.add(Yottalumen);
        units.add(GramPerMegajoule);
        units.add(Teracandela);
        units.add(MetrePerSecondTimePerMetre);
        units.add(MetrePerDecisecondTime);
        units.add(HorsepowerWater);
        units.add(CubicMetrePerCubicMetre);
        units.add(KilomolePerMetre);
        units.add(DegreeCelsiusDay);
        units.add(MinuteSidereal);
        units.add(Abcoulomb);
        units.add(ZettasecondTimeSquared);
        units.add(Yoctolumen);
        units.add(ReciprocalGram);
        units.add(Microfarad);
        units.add(KilowattHour);
        units.add(Petatesla);
        units.add(CaratMass);
        units.add(MicrogramPerLitre);
        units.add(YottasecondTime);
        units.add(MolePerZeptometre);
        units.add(Zettahenry);
        units.add(HorsepowerBoiler);
        units.add(SolarRadius);
        units.add(MilligramPerLitre);
        units.add(AttometrePerSecondTime);
        units.add(Barn);
        units.add(KilogramPerHectareDay);
        units.add(MolePerKilolitre);
        units.add(Millihenry);
        units.add(Terabit);
        units.add(Nanotesla);
        units.add(JoulePerSquareMetreSecondTime);
        units.add(YearTropical);
        units.add(Yottapascal);
        units.add(LiquidPintUS);
        units.add(Attofarad);
        units.add(Decivolt);
        units.add(Picocandela);
        units.add(N25Millilitre);
        units.add(Megacandela);
        units.add(Kilosievert);
        units.add(Nanomolair);
        units.add(Megalumen);
        units.add(Femtokelvin);
        units.add(Microcandela);
        units.add(CentimetrePerDay);
        units.add(NanomolePerLitre);
        units.add(MinuteTime);
        units.add(Abhenry);
        units.add(Teralitre);
        units.add(GramPerDecilitre);
        units.add(Nanolumen);
        units.add(Zeptotesla);
        units.add(SquareZeptometre);
        units.add(Attolitre);
        units.add(MolePerDecametre);
        units.add(PintImperial);
        units.add(DecidegreeCelsius);
        units.add(Tonne);
        units.add(MolePerMegalitre);
        units.add(Yobibit);
        units.add(HorsepowerElectric);
        units.add(Zeptosteradian);
        units.add(MegaeuroPerPetajoule);
        units.add(Millicandela);
        units.add(ReciprocalWatt);
        units.add(CentisecondTime);
        units.add(SecondPlaneAngleSquared);
        units.add(Zettabyte);
        units.add(GigametrePerSecondTime);
        units.add(Nanolitre);
        units.add(Millinewton);
        units.add(MetreToThePower2ReciprocalGram);
        units.add(WattPerSquareMetre);
        units.add(KilogramPerKilogram);
        units.add(Decalitre);
        units.add(Decaampere);
        units.add(NewtonPerSquareMetre);
        units.add(DeltaA450PerSecondTime);
        units.add(Degree);
        units.add(MetrePerDay);
        units.add(CoulombMetre);
        units.add(MillimetrePerSecondTime);
        units.add(GramPerSquareMetreCentimetre);
        units.add(DecimetrePerSecondTime);
        units.add(Euro);
        units.add(Megagray);
        units.add(Lambert);
        units.add(Baud);
        units.add(CubicDecimetre);
        units.add(Femtovolt);
        units.add(Megagram);
        units.add(JoulePerSecondTime);
        units.add(Centihertz);
        units.add(Gibibit);
        units.add(MetrePerKilosecondTimeSquared);
        units.add(Femtolumen);
        units.add(Picoampere);
        units.add(SquarePetametre);
        units.add(FluidOunceImperial);
        units.add(MegagramPerLitre);
        units.add(Microsievert);
        units.add(Yoctolux);
        units.add(GramPerKilolitre);
        units.add(CubicPetametre);
        units.add(Mebibyte);
        units.add(Kilobecquerel);
        units.add(DegreeRankine);
        units.add(MillimetrePerSecondTimeSquared);
        units.add(MolePerTerametre);
        units.add(Attopascal);
        units.add(Zettakatal);
        units.add(DecimolePerLitre);
        units.add(Gigahenry);
        units.add(MilligramPerHectogram);
        units.add(GramPerMicrolitre);
        units.add(Becquerel);
        units.add(MolePerYottalitre);
        units.add(MicrosecondPlaneAngle);
        units.add(Nanokelvin);
        units.add(PicaPostscript);
        units.add(GrayPerSecondTime);
        units.add(Zeptofarad);
        units.add(HectomolePerLitre);
        units.add(Teraohm);
        units.add(Megavolt);
        units.add(MicromolePerLitre);
        units.add(Megahertz);
        units.add(NanometrePerSecondTimeSquared);
        units.add(DecamolePerLitre);
        units.add(Femtomolair);
        units.add(MetrePerPicosecondTimeSquared);
        units.add(Gigakelvin);
        units.add(CubicZeptometre);
        units.add(SolarMassPerCubicParsec);
        units.add(MegamolePerMetre);
        units.add(BritishThermalUnit59F);
        units.add(Day);
        units.add(Centiohm);
        units.add(Attocoulomb);
        units.add(Mebibit);
        units.add(Hectoohm);
        units.add(Kilocandela);
        units.add(Kilokelvin);
        units.add(Yottacoulomb);
        units.add(Zettacoulomb);
        units.add(MicrometrePerSecondTimeSquared);
        units.add(Microampere);
        units.add(AtmosphereTechnical);
        units.add(Gigaampere);
        units.add(Kilonewton);
        units.add(Millihertz);
        units.add(Microsiemens);
        units.add(Millisiemens);
        units.add(Molair);
        units.add(Pebibit);
        units.add(Femtolitre);
        units.add(ColonyFormingUnitPer25Millilitre);
        units.add(MetrePerMicrosecondTime);
        units.add(ExasecondTimeSquared);
        units.add(HundredweightBritish);
        units.add(HourSidereal);
        units.add(YottametrePerSecondTimeSquared);
        units.add(Terahertz);
        units.add(KilogramSecondTimeToThePower2);
        units.add(DecigramPerLitre);
        units.add(Yoctocandela);
        units.add(Cord);
        units.add(CoulombPerCubicMetre);
        units.add(Micronewton);
        units.add(MetrePerCubicMetre);
        units.add(PicogramPerLitre);
        units.add(Petafarad);
        units.add(Kilokatal);
        units.add(Teralumen);
        units.add(GramPerKilogram);
        units.add(SwissFranc);
        units.add(Megaparsec);
        units.add(MolePerYoctolitre);
        units.add(MetrePerZettasecondTimeSquared);
        units.add(Megahenry);
        units.add(SouthKoreanWon);
        units.add(DecagramPerLitre);
        units.add(Millilumen);
        units.add(Zettaohm);
        units.add(ReciprocalKelvin);
        units.add(KilogramPerSecondTime);
        units.add(Centiradian);
        units.add(Yottalitre);
        units.add(Picovolt);
        units.add(Yoctolitre);
        units.add(WattPerSteradianSquareMetreHertz);
        units.add(DegreeSquared);
        units.add(GramPerSquareMetreDay);
        units.add(MilligramRAE);
        units.add(PointTeX);
        units.add(Perm23C);
        units.add(Nanonewton);
        units.add(FaradPerMetre);
        units.add(Millisievert);
        units.add(Lumen);
        units.add(SquareHectometre);
        units.add(Lux);
        units.add(Milliampere);
        units.add(Bar);
        units.add(Hectoweber);
        units.add(Kiloampere);
        units.add(ZettasecondTime);
        units.add(MetrePerYoctosecondTime);
        units.add(Millikelvin);
        units.add(MicrogramPerCubicCentimetre);
        units.add(BritishThermalUnit39F);
        units.add(HundredweightUS);
        units.add(Microkelvin);
        units.add(MinuteHourAngle);
        units.add(TonForce);
        units.add(BritishThermalUnit60F);
        units.add(Femtokatal);
        units.add(Microohm);
        units.add(CubicNanometre);
        units.add(DegreeCelsius);
        units.add(Electronvolt);
        units.add(WattPerSquareMetreSteradian);
        units.add(Yoctobecquerel);
        units.add(Attosteradian);
        units.add(Picogram);
        units.add(GramPerYottalitre);
        units.add(MicromolePerSecondTime);
        units.add(Centicoulomb);
        units.add(Decicoulomb);
        units.add(GigayearCubicParsec);
        units.add(Hertz);
        units.add(MillisecondPlaneAngle);
        units.add(AttomolePerLitre);
        units.add(Picogray);
        units.add(Exahertz);
        units.add(ColonyFormingUnitPerMillilitre);
        units.add(ReciprocalDay);
        units.add(NanomolePerMetre);
        units.add(Deciampere);
        units.add(MetreToThePower2);
        units.add(KilogramPerMole);
        units.add(Yoctojoule);
        units.add(PetametrePerSecondTimeSquared);
        units.add(TonAssay);
        units.add(Zeptoampere);
        units.add(MillimetrePerDay);
        units.add(Yoctocoulomb);
        units.add(CanadianDollar);
        units.add(Millipascal);
        units.add(TerasecondTimeSquared);
        units.add(Megacoulomb);
        units.add(PetametrePerSecondTime);
        units.add(Week);
        units.add(Centifarad);
        units.add(Petalitre);
        units.add(ReciprocalMetre);
        units.add(MolePerFemtolitre);
        units.add(Zeptoohm);
        units.add(Yottabyte);
        units.add(Fermi);
        units.add(MicrodegreeCelsius);
        units.add(SquareAttometre);
        units.add(Grain);
        units.add(PoundApothecaries);
        units.add(MillimetrePerHour);
        units.add(Microtesla);
        units.add(Gigabecquerel);
        units.add(MolePerHectolitre);
        units.add(GillImperial);
        units.add(Femtomole);
        units.add(Piconewton);
        units.add(MolePerZeptolitre);
        units.add(Femtoohm);
        units.add(Femtoweber);
        units.add(KilogramPerHectare);
        units.add(Petabit);
        units.add(ReciprocalSecondTime);
        units.add(Decacoulomb);
        units.add(AttogramPerLitre);
        units.add(Picoradian);
        units.add(KilogramSecondTimeToThePower2ReciprocalMetre);
        units.add(BritishThermalUnitThermochemical);
        units.add(DecisecondTimeSquared);
        units.add(PicomolePerLitre);
        units.add(Nanofarad);
        units.add(Femtowatt);
        units.add(KilojoulePerSquareMetreDay);
        units.add(Picomole);
        units.add(MetrePerDecasecondTime);
        units.add(Zettalumen);
        units.add(MicrometrePerSecondTime);
        units.add(MolePerMetre);
        units.add(Stathenry);
        units.add(Year);
        units.add(AttosecondTime);
        units.add(MolePerGigametre);
        units.add(ReciprocalCubicMetre);
        units.add(GramPerMegalitre);
        units.add(Kilomolair);
        units.add(LumenPerSquareMetre);
        units.add(MetrePerCentisecondTimeSquared);
        units.add(Decitesla);
        units.add(HectareDay);
        units.add(Attotesla);
        units.add(Nanowatt);
        units.add(SquareDecimetre);
        units.add(Revolution);
        units.add(Picowatt);
        units.add(Megohm);
        units.add(YoctosecondTime);
        units.add(SquareMetreSteradian);
        units.add(CubicPicometre);
        units.add(KilometrePerSecondTimeSquared);
        units.add(MetrePerSecondTime);
        units.add(AmylaseUnit);
        units.add(NewtonMetre);
        units.add(CubicMetrePerYear);
        units.add(Kiloweber);
        units.add(Zeptoweber);
        units.add(Petalumen);
        units.add(ReciprocalDegreeCelsius);
        units.add(CubicHectometre);
        units.add(MetreOfMercury);
        units.add(Femtogram);
        units.add(ReciprocalAtmosphereStandard);
        units.add(PointPostscript);
        units.add(TonOfRefridgeration);
        units.add(Attometre);
        units.add(Petacandela);
        units.add(ReciprocalSquareMetre);
        units.add(CubicGigametre);
        units.add(FemtometrePerSecondTimeSquared);
        units.add(Decatesla);
        units.add(DegreeCelsiusPerMinuteTime);
        units.add(Kibibit);
        units.add(Femtogray);
        units.add(Decijoule);
        units.add(Femtonewton);
        units.add(SquareMetre);
        units.add(MetrePerExasecondTimeSquared);
        units.add(Megaeuro);
        units.add(Centimetre);
        units.add(Deciohm);
        units.add(MegametrePerKilojoule);
        units.add(Picofarad);
        units.add(KilomolePerLitre);
        units.add(ColonyFormingUnit);
        units.add(RÃ¶ntgen);
        units.add(Yottahertz);
        units.add(SecondSidereal);
        units.add(Nanosiemens);
        units.add(ReciprocalPartsPerMillion);
        units.add(Picolitre);
        units.add(YoctomolePerMetre);
        units.add(DegreeFahrenheit);
        units.add(Nanomole);
        units.add(KilosecondTime);
        units.add(GramPerMetre);
        units.add(Micrometre);
        units.add(Centisteradian);
        units.add(Nanobecquerel);
        units.add(Picocoulomb);
        units.add(ReciprocalHectare);
        units.add(Exapascal);
        units.add(Zeptomolair);
        units.add(PoundSterling);
        units.add(Zettakelvin);
        units.add(Nanosievert);
        units.add(Decimetre);
        units.add(Hectokatal);
        units.add(Zettalitre);
        units.add(SquareYottametre);
        units.add(TerawattHour);
        units.add(MetrePerFemtosecondTimeSquared);
        units.add(Centijoule);
        units.add(Giganewton);
        units.add(JouleSecondTime);
        units.add(YearSidereal);
        units.add(MolePerZettametre);
        units.add(JoulePerCubicMetre);
        units.add(JoulePerKelvin);
        units.add(AustralianDollar);
        units.add(PetamolePerMetre);
        units.add(Attojoule);
        units.add(Decimolair);
        units.add(Yoctomolair);
        units.add(GramPerJoule);
        units.add(YottamolePerMetre);
        units.add(Terahenry);
        units.add(Yottalux);
        units.add(Curie);
        units.add(Petasievert);
        units.add(Perm23C_1);
        units.add(MetrePerDecisecondTimeSquared);
        units.add(Henry);
        units.add(QuartImperial);
        units.add(MicrogramPerJoule);
        units.add(Statohm);
        units.add(Exabecquerel);
        units.add(Millilitre);
        units.add(KilogramPerCubicMetre);
        units.add(Exahenry);
        units.add(Calorie15C);
        units.add(ZeptosecondTimeSquared);
        units.add(Bit);
        units.add(Nanogray);
        units.add(ZeptomolePerMetre);
        units.add(PicaTeX);
        units.add(Nanogram);
        units.add(Nanosteradian);
        units.add(MolePerNanometre);
        units.add(Exacoulomb);
        units.add(Kilosiemens);
        units.add(Gigacoulomb);
        units.add(Megaerg);
        units.add(MileStatutePerHour);
        units.add(Megaweber);
        units.add(Teracoulomb);
        units.add(NewtonPerMetre);
        units.add(Nanometre);
        units.add(MetrePerZeptosecondTime);
        units.add(Petasiemens);
        units.add(Dyne);
        units.add(MegamolePerLitre);
        units.add(ZettametrePerSecondTime);
        units.add(MetrePerFemtosecondTime);
        units.add(MolePerPetametre);
        units.add(Microjoule);
        units.add(Centigray);
        units.add(MetrePerAttosecondTimeSquared);
        units.add(Gigawatt);
        units.add(Decifarad);
        units.add(Peck);
        units.add(Siemens);
        units.add(UnitPole);
        units.add(MicromolePerMetre);
        units.add(Attowatt);
        units.add(Centitesla);
        units.add(MileStatute);
        units.add(Picojoule);
        units.add(Zeptovolt);
        units.add(MetrePerTerasecondTime);
        units.add(Centimole);
        units.add(TonShort);
        units.add(Terapascal);
        units.add(Decibecquerel);
        units.add(CubicYottametre);
        units.add(Yottavolt);
        units.add(Statweber);
        units.add(Yoctoohm);
        units.add(Newton);
        units.add(Hectosiemens);
        units.add(Exalumen);
        units.add(Nanovolt);
        units.add(Byte);
        units.add(CubicMetrePerKilogram);
        units.add(DecimolePerMetre);
        units.add(GigamolePerLitre);
        units.add(Debye);
        units.add(SquareMetrePerSecondTime);
        units.add(Chain);
        units.add(Quad);
        units.add(WattPerSquareMetreHertz);
        units.add(Abvolt);
        units.add(Darcy);
        units.add(DecamolePerMetre);
        units.add(HectosecondTimeSquared);
        units.add(Micromagnitude);
        units.add(Yoctopascal);
        units.add(NauticalMilePerHour);
        units.add(MetrePerPicosecondTime);
        units.add(Decikelvin);
        units.add(Terabyte);
        units.add(Nanolux);
        units.add(MicrosecondTimeSquared);
        units.add(Yoctoampere);
        units.add(MolePerTeralitre);
        units.add(PointATA);
        units.add(Microsteradian);
        units.add(FootPoundal);
        units.add(AttodegreeCelsius);
        units.add(Statmho);
        units.add(MetrePerGigasecondTimeSquared);
        units.add(TonLong);
        units.add(Yottacandela);
        units.add(Attomole);
        units.add(YottametrePerSecondTime);
        units.add(MolePerYottametre);
        units.add(BritishThermalUnitMean);
        units.add(Picolux);
        units.add(Centibecquerel);
        units.add(NauticalMile);
        units.add(Milliohm);
        units.add(JoulePerKelvinKilogram);
        units.add(MetrePerTerasecondTimeSquared);
        units.add(Decametre);
        units.add(Centiwatt);
        units.add(SquareZettametre);
        units.add(Decajoule);
        units.add(Gigalumen);
        units.add(AtmosphereStandard);
        units.add(Nanojoule);
        units.add(Yoctotesla);
        units.add(KilogramPerCubicDecimetre);
        units.add(Yoctofarad);
        units.add(Yottasiemens);
        units.add(ColonyFormingUnitPerGram);
        units.add(Deciwatt);
        units.add(Attosiemens);
        units.add(ZettametrePerSecondTimeSquared);
        units.add(Hectocandela);
        units.add(YottagramPerLitre);
        units.add(Gigalitre);
        units.add(MilligramPerCubicMetre);
        units.add(Megakatal);
        units.add(Centipascal);
        units.add(MolePerAttometre);
        units.add(SecondTime);
        units.add(Ohm);
        units.add(AttosecondTimeSquared);
        units.add(Millicoulomb);
        units.add(GramPerHectogram);
        units.add(SquareNanometre);
        units.add(CubicMillimetrePerCubicMillimetre);
        units.add(Attobecquerel);
        units.add(Gigaelectronvolt);
        units.add(AmperePerMetre);
        units.add(CubicAttometre);
        units.add(MilLength);
        units.add(Kilohm);
        units.add(Stilb);
        units.add(FemtodegreeCelsius);
        units.add(Centivolt);
        units.add(SteradianSquareMetreHertz);
        units.add(KatalPerCubicMetre);
        units.add(PicosecondTimeSquared);
        units.add(SquareKilometre);
        units.add(Petanewton);
        units.add(CoulombPerSquareMetre);
        units.add(MetreKelvin);
        units.add(Microbecquerel);
        units.add(CubicParsec);
        units.add(Centistokes);
        units.add(Attovolt);
        units.add(MegajoulePerSquareMetre);
        units.add(Centipoise);
        units.add(Zeptokelvin);
        units.add(Attogray);
        units.add(Hectonewton);
        units.add(MolePerPicolitre);
        units.add(CubicFemtometre);
        units.add(MinutePlaneAngle);
        units.add(Yoctometre);
        units.add(Yottasievert);
        units.add(Gigalux);
        units.add(Femtohenry);
        units.add(Teralux);
        units.add(Attogram);
        units.add(SquareDecametre);
        units.add(Hectotesla);
        units.add(Hectosievert);
        units.add(GramPerZettalitre);
        units.add(CentimetrePerSecondTime);
        units.add(Footlambert);
        units.add(KilogramPerLitre);
        units.add(Teaspoon);
        units.add(DryQuartUS);
        units.add(Megaelectronvolt);
        units.add(MoleMicrometre);
        units.add(Acre);
        units.add(Barrel);
        units.add(Zeptokatal);
        units.add(Kilohenry);
        units.add(Petaohm);
        units.add(SecondTimeAmpere);
        units.add(Attosievert);
        units.add(Centigram);
        units.add(MetrePerSecondTimeSquared);
        units.add(NanodegreeCelsius);
        units.add(NanokatalPerMilligram);
        units.add(Yottahenry);
        units.add(RadianPerSecondTime);
        units.add(Yottagray);
        units.add(Sievert);
        units.add(Zettahertz);
        units.add(KilosecondTimeSquared);
        units.add(Yottagram);
        units.add(Zeptolux);
        units.add(WattPerSquareMetreNanometre);
        units.add(WattPerSteradianSquareMetre);
        units.add(LightYear);
        units.add(Zettacandela);
        units.add(Volt);
        units.add(SquareMetreHertz);
        units.add(DryPintUS);
        units.add(Kilometre);
        units.add(Attokatal);
        units.add(FemtomolePerLitre);
        units.add(Month);
        units.add(Statcoulomb);
        units.add(Mho);
        units.add(Weber);
        units.add(Exbibit);
        units.add(Attoohm);
        units.add(Pascal);
        units.add(MilligramPerKilometre);
        units.add(SquareFemtometre);
        units.add(Tablespoon);
        units.add(Centiare);
        units.add(Teragram);
        units.add(ZeptomolePerLitre);
        units.add(Parsec);
        units.add(NewZealandDollar);
        units.add(ReciprocalHour);
        units.add(CubicDecametre);
        units.add(HorsepowerMetric);
        units.add(Katal);
        units.add(Millimetre);
        units.add(Zettaampere);
        units.add(SingaporeDollar);
        units.add(Zeptocoulomb);
        units.add(Footcandle);
        units.add(Gigatesla);
        units.add(Teragray);
        units.add(Picohertz);
        units.add(SquareGigametre);
        units.add(MicrosecondTime);
        units.add(PascalSecondTimeSquareMetre);
        units.add(Femtosiemens);
        units.add(Kayser);
        units.add(Gigaohm);
        units.add(Steradian);
        units.add(Torr);
        units.add(Yoctogray);
        units.add(GramPerMillilitre);
        units.add(GallonImperial);
        units.add(Attonewton);
        units.add(CentimetreOfMercury);
        units.add(Gibibyte);
        units.add(One);
        units.add(HectometrePerSecondTime);
        units.add(AmperePerWatt);
        units.add(Yoctowatt);
        units.add(CubicMetrePerSecondTime);
        units.add(Gauss);
        units.add(Microradian);
        units.add(Petapascal);
        units.add(Teravolt);
        units.add(MolePerMicrolitre);
        units.add(Attoweber);
        units.add(FemtogramPerLitre);
        units.add(CalorieInternationalTable);
        units.add(MetreKilogramPerSecondTimeSquared);
        units.add(Gram);
        units.add(SquareMetreKelvinPerWatt);
        units.add(Attomolair);
        units.add(Hectokelvin);
        units.add(Terakatal);
        units.add(Zeptohertz);
        units.add(Decavolt);
        units.add(GramPerDecalitre);
        units.add(VoltPerWatt);
        units.add(YoctometrePerSecondTimeSquared);
        units.add(Nanocandela);
        units.add(Gigavolt);
        units.add(Zeptowatt);
        units.add(Yoctomole);
        units.add(Zeptopascal);
        units.add(Exaampere);
        units.add(MolePerLitre);
        units.add(WattPerHertz);
        units.add(Hectohertz);
        units.add(AmperePerSquareMetre);
        units.add(SquareMetreSecondTime);
        units.add(Terabecquerel);
        units.add(SolarMassPerGigayearCubicKiloparsec);
        units.add(MolePerExametre);
        units.add(KilojoulePerHectogram);
        units.add(MillisecondTimeSquared);
        units.add(MilligramPerKilogram);
        units.add(Decicandela);
        units.add(MolePerMillimetre);
        units.add(Decagram);
        units.add(YoctomolePerLitre);
        units.add(CandelaPerSquareCentimetre);
        units.add(Yoctovolt);
        units.add(Gigagray);
        units.add(GallonUS);
        units.add(Exalitre);
        units.add(Kilogray);
        units.add(CoulombPerKilogram);
        units.add(Mole);
        units.add(Gigagram);
        units.add(TerasecondTime);
        units.add(HorsepowerBritish);
        units.add(Abfarad);
        units.add(Gray);
        units.add(Exafarad);
        units.add(Petahertz);
        units.add(CentimolePerLitre);
        units.add(ZettamolePerMetre);
        units.add(Kilogram);
        units.add(Kilohertz);
        units.add(KilometrePerSecondTime);
        units.add(Decacandela);
        units.add(RussianRuble);
        units.add(GramPerLitre);
        units.add(Millifarad);
        units.add(SecondHourAngle);
        units.add(GramPerSquareMetre);
        units.add(Gal);
        units.add(Kip);
        units.add(Kilotesla);
        units.add(Centicandela);
        units.add(Hectohenry);
        units.add(Microlitre);
        units.add(YoctosecondTimeSquared);
        units.add(Centinewton);
        units.add(Zeptomole);
        units.add(Megabecquerel);
        units.add(Microwatt);
        units.add(Decagray);
        units.add(Kiloelectronvolt);
        units.add(MegasecondTime);
        units.add(GramPerFemtolitre);
        units.add(Watt);
        units.add(Millijoule);
        units.add(CalorieMean);
        units.add(MetrePerNanosecondTime);
        units.add(Decamole);
        units.add(PetamolePerLitre);
        units.add(Yobibyte);
        units.add(Decibar);
        units.add(Microgray);
        units.add(Zeptogram);
        units.add(Zettanewton);
        units.add(MolePerNanolitre);
        units.add(Yoctogram);
        units.add(Magnitude);
        units.add(Decilux);
        units.add(GramPerTeralitre);
        units.add(SteradianSquareMetre);
        units.add(YottamolePerLitre);
        units.add(Gigabit);
        units.add(Millibar);
        units.add(MillinewtonMetre);
        units.add(MilPlaneAngle);
        units.add(DaySidereal);
        units.add(Millilux);
        units.add(MolePerKilogram);
        units.add(KilometrePerHour);
        units.add(YottasecondTimeSquared);
        units.add(Gigamole);
        units.add(Decipascal);
        units.add(Yoctosteradian);
        units.add(Femtosteradian);
        units.add(CubicZettametre);
        units.add(Megatesla);
        units.add(Examolair);
        units.add(Percent);
        units.add(MolePerZettalitre);
        units.add(Picohenry);
        units.add(KilogramPerPascalSecondTimeSquareMetre);
        units.add(Slug);
        units.add(Decaweber);
        units.add(Micromole);
        units.add(GramPerAttolitre);
        units.add(Zettajoule);
        units.add(PicometrePerSecondTime);
        units.add(Zettafarad);
        units.add(Zettametre);
        units.add(CubicExametre);
        units.add(Zeptogray);
        units.add(Decilitre);
        units.add(MolePerCentimetre);
        units.add(NorwegianKrone);
        units.add(GillUS);
        units.add(Nanoradian);
        units.add(ReciprocalCubicParsec);
        units.add(KilogramSquareMetre);
        units.add(PetagramPerLitre);
        units.add(DeltaA450);
        units.add(MolePerPetalitre);
        units.add(Coulomb);
        units.add(CubicTerametre);
        units.add(Micron);
        units.add(AmperePerVolt);
        units.add(Decapascal);
        units.add(GigasecondTime);
        units.add(Yoctoweber);
        units.add(RadianPerSecondTimeSquared);
        units.add(ThermUS);
        units.add(Decilumen);
        units.add(Yottaweber);
        units.add(Exacandela);
        units.add(ReciprocalSquareCentimetre);
        units.add(CubicKiloparsec);
        units.add(SquareMetreDay);
        units.add(SquareCentimetre);
        units.add(DegreeReaumur);
        units.add(Radian);
        units.add(Hectocoulomb);
        units.add(ExamolePerLitre);
        units.add(Centiweber);
        units.add(Microgram);
        units.add(Exajoule);
        units.add(MetrePerYoctosecondTimeSquared);
        units.add(Angstrom);
        units.add(Yottanewton);
        units.add(Milliweber);
        units.add(DeltaA450PerSecondTimePerMilligram);
        units.add(WattSquareMetre);
        units.add(Yottabecquerel);
        units.add(Furlong);
        units.add(GigamolePerMetre);
        units.add(Gigabyte);
        units.add(WeberPerAmpere);
        units.add(Petalux);
        units.add(CubicCentimetre);
        units.add(SquareYoctometre);
        units.add(MoleMicrometreReciprocalSquareCentimetreReciprocalSecondTimeReciprocalAtmosphereStandard);
        units.add(Yottakatal);
        units.add(Femtoradian);
        units.add(MetrePerAttosecondTime);
        units.add(Yottamolair);
        units.add(SquareMillimetre);
        units.add(SquareTerametre);
        units.add(SecondTimePerDay);
        units.add(Zettatesla);
        units.add(SolarLuminosity);
        units.add(Megajoule);
        units.add(Perm0C);
        units.add(MetrePerZettasecondTime);
        units.add(FootUSSurvey);
        units.add(GramMetreToThePower2ReciprocalMetre);
        units.add(CentigramPerLitre);
        units.add(Microvolt);
        units.add(Yard);
        units.add(KilocolonyFormingUnit);
        units.add(Yoctokatal);
        units.add(ExagramPerLitre);
        units.add(Yottaohm);
        units.add(GigagramPerLitre);
        units.add(JoulePerKilogram);
        units.add(Megametre);
        units.add(Megaampere);
        units.add(TonnePerCubicMetre);
        units.add(TonOfTNT);
        units.add(Hectare);
        units.add(Terawatt);
        units.add(Picoohm);
        units.add(CentidegreeCelsius);
        units.add(Shannon);
        units.add(Picobecquerel);
        units.add(Decakatal);
        units.add(Nanoohm);
        units.add(GramPerCentilitre);
        units.add(Gamma);
        units.add(Teraweber);
        units.add(TeramolePerLitre);
        units.add(Exanewton);
        units.add(Poundal);
        units.add(Zeptobecquerel);
        units.add(MolePerAttolitre);
        units.add(NanounifiedAtomicMassUnit);
        units.add(VoltSecondTime);
        units.add(Attoampere);
        units.add(Gigaparsec);
        units.add(SquareMetrePerGram);
        units.add(Gigametre);
        units.add(Nanokatal);
        units.add(Zeptohenry);
        units.add(ExametrePerSecondTimeSquared);
        units.add(KilogramPerSquareMetre);
        units.add(MolePerDecimetre);
        units.add(GramPerCubicMetre);
        units.add(Fathom);
        units.add(Meganewton);
        units.add(Exabyte);
        units.add(Micropascal);
        units.add(Decaohm);
        units.add(Gigapascal);
        units.add(Statampere);
        units.add(Centisievert);
        units.add(MetrePerGigasecondTime);
        units.add(Kilopascal);
        units.add(Calorie20C);
        units.add(Kiloparsec);
        units.add(SecondPlaneAngle);
        units.add(GigametrePerSecondTimeSquared);
        units.add(Attokelvin);
        units.add(HectosecondTime);
        units.add(Hectolumen);
        units.add(OunceAvoirdupois);
        units.add(MolePerPicometre);
        units.add(Picolumen);
        units.add(Teramole);
        units.add(ZeptogramPerLitre);
        units.add(MetrePerYottasecondTimeSquared);
        units.add(LitrePerMole);
        units.add(Decihertz);
        units.add(Gigafarad);
        units.add(Microlumen);
        units.add(Yottabit);
        units.add(VoltPerAmpere);
        units.add(PointDidot);
        units.add(AttometrePerSecondTimeSquared);
        units.add(Megakelvin);
        units.add(Centimolair);
        units.add(Kilotonne);
        units.add(Petabyte);
        units.add(Decisiemens);
        units.add(Gigajoule);
        units.add(Hartley);
        units.add(Exalux);
        units.add(Bushel);
        units.add(Picopascal);
        units.add(MetrePerMillisecondTimeSquared);
        units.add(FemtosecondTimeSquared);
        units.add(Centisiemens);
        units.add(Petahenry);
        units.add(Cicero);
        units.add(SquareMegametre);
        units.add(Stere);
        units.add(Rad);
        units.add(Kilobyte);
        units.add(MetrePerCentisecondTime);
        units.add(PoundForce);
        units.add(TonRegister);
        units.add(GigayearCubicKiloparsec);
        units.add(Femtolux);
        units.add(InternationalUnit);
        return units;
 	}

    /**
     * Returns all scales in this set.
     *
     * @return All scales.
     */
    @Override
    public Set<Scale> getAllScales() {
        Set<Scale> scales = new HashSet<>();
        scales.add(RankineScale);
        scales.add(ReaumurScale);
        scales.add(FahrenheitScale);
        scales.add(CelsiusScale);
        scales.add(KelvinScale);
        return scales;
 	}
}